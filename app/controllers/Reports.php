<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Reports extends MY_Controller
{

    function __construct()
    {
        parent::__construct();

        if (!$this->loggedIn) {
            $this->session->set_userdata('requested_page', $this->uri->uri_string());
            $this->cus->md('login');
        }

        $this->lang->load('reports', $this->Settings->user_language);
        $this->load->library('form_validation');
        $this->load->model('reports_model');
		$this->load->model('sales_model');
		$this->load->model('purchases_model');
        $this->data['pb'] = array(
							'cash' => lang('cash'),
							'CC' => lang('CC'),
							'Cheque' => lang('Cheque'),
							'paypal_pro' => lang('paypal_pro'),
							'stripe' => lang('stripe'),
							'gift_card' => lang('gift_card'),
							'deposit' => lang('deposit'),
							'authorize' => lang('authorize'),
						);
		$this->data['logo'] = true;
    }

    function index()
    {
        $this->cus->checkPermissions();
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['monthly_sales'] = $this->reports_model->getChartData();
        $this->data['stock'] = $this->reports_model->getStockValue();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->core_page('reports/index', $meta, $this->data);
    }

    function warehouse_stock($warehouse = NULL)
    {
        $this->cus->checkPermissions('warehouse_stock', TRUE);
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }

        $this->data['stock'] = $warehouse ? $this->reports_model->getWarehouseStockValue($warehouse) : $this->reports_model->getStockValue();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse'] = $warehouse ? $this->site->getWarehouseByID($warehouse) : NULL;
        $this->data['totals'] = $this->reports_model->getWarehouseTotals($warehouse);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->core_page('reports/warehouse_stock', $meta, $this->data);

    }

    function expiry_alerts($warehouse_id = NULL)
    {
        $this->cus->checkPermissions('expiry_alerts');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['warehouse_id'] = $warehouse_id;
		$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_expiry_alerts')));
        $meta = array('page_title' => lang('product_expiry_alerts'), 'bc' => $bc);
        $this->core_page('reports/expiry_alerts', $meta, $this->data);
    }

    function getExpiryAlerts($warehouse_id = NULL, $pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('expiry_alerts', TRUE);
        $date = date('Y-m-d', strtotime('+3 months'));
		$where = '';
		if ($warehouse_id) {
			$where .=" AND warehouse_id='".$warehouse_id."'";
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse = "";
			$warehouse_ids = json_decode($this->session->userdata('warehouse_id'));
			if($warehouse_ids){
				$i = 1;
				foreach($warehouse_ids as $warehouse_id){
					if($i==1){
						$warehouse .= "IFNULL(".$warehouse_id.",0)";
						$i = 2;
					}else{
						$warehouse .= ",IFNULL(".$warehouse_id.",0)";
					}
				}
			}
			$where .= " AND warehouse_id IN (".$warehouse.")";
		}
		$allow_category = $this->site->getCategoryByProject();
		if ($xls) {
			$this->db->select("image, products.code as product_code, products.name as product_name, expired_qty, warehouses.name as warehouse, expiry")
					->from("(SELECT
						convert_qty(product_id,(sum(IFNULL(quantity, 0))))AS expired_qty,
						IFNULL(product_id,0) as product_id,
						IFNULL(warehouse_id,0) as warehouse_id,
						expiry
					FROM
						cus_stockmoves
					WHERE
						expiry != '0000-00-00'
					AND expiry IS NOT NULL
					AND expiry < '".$date."'
					".$where."
					GROUP BY
						IFNULL(product_id,0),
						IFNULL(warehouse_id,0),
						expiry
					) as cus_stockmoves
			")
			->join('products', 'products.id=stockmoves.product_id', 'left')
			->join('warehouses', 'warehouses.id=stockmoves.warehouse_id', 'left')
			->where('expired_qty >', 0);
			if($allow_category){
				$this->db->where_in('products.category_id',$allow_category);
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_expiry_alerts'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('expiry_date'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->product_code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatQuantity($data_row->expired_qty));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->hrsd($data_row->expiry));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);

       
				$filename = 'product_expiry_alerts_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			$this->load->library('datatables');
			$this->datatables
				->select("image, products.code as product_code, products.name as product_name, expired_qty, warehouses.name, expiry")
				->from("(SELECT
							convert_qty(product_id,(sum(IFNULL(quantity, 0))))AS expired_qty,
							IFNULL(product_id,0) as product_id,
							IFNULL(warehouse_id,0) as warehouse_id,
							expiry
						FROM
							cus_stockmoves
						WHERE
							expiry != '0000-00-00'
						AND expiry IS NOT NULL
						AND expiry < '".$date."'
						".$where."
						GROUP BY
							IFNULL(product_id,0),
							IFNULL(warehouse_id,0),
							expiry
						) as cus_stockmoves
				")
				->join('products', 'products.id=stockmoves.product_id', 'left')
				->join('warehouses', 'warehouses.id=stockmoves.warehouse_id', 'left')
				->where('expired_qty >', 0);
				if($allow_category){
					$this->datatables->where_in('products.category_id',$allow_category);
				}
			echo $this->datatables->generate();
		}
    }
	
	
	function product_license_alerts($warehouse_id = NULL)
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['warehouse_id'] = $warehouse_id;
		$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_license_alerts')));
        $meta = array('page_title' => lang('product_license_alerts'), 'bc' => $bc);
        $this->core_page('reports/product_license_alerts', $meta, $this->data);
    }

    function getLicenseAlerts($warehouse_id = NULL, $pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('product_license_alerts', TRUE);
        $date = date('Y-m-d', strtotime('+6 months'));
		if ($xls) {
			$this->db->select("
							products.image, 
							products.code,
							products.name,
							product_licenses.valid_date
						")
				->join("(SELECT
							product_id,
							max( valid_date ) valid_date 
						FROM
							".$this->db->dbprefix('product_licenses')."
						GROUP BY
							product_id) as product_licenses","product_licenses.product_id = products.id","inner")
				->from("products")
				->where("product_licenses.valid_date <",$date)
				->group_by("products.id");
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_license_alerts'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('valid_date'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->hrsd($data_row->valid_date));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
				$filename = 'product_license_alerts_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
			$this->datatables->select("
							products.image, 
							products.code,
							products.name,
							product_licenses.valid_date
						")
				->join("(SELECT
							product_id,
							max( valid_date ) valid_date 
						FROM
							".$this->db->dbprefix('product_licenses')."
						GROUP BY
							product_id) as product_licenses","product_licenses.product_id = products.id","inner")
				->from("products")
				->where("product_licenses.valid_date <",$date)
				->group_by("products.id");
			echo $this->datatables->generate();
		}
    }

    function quantity_alerts($warehouse_id = NULL)
    {
        $this->cus->checkPermissions('quantity_alerts');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['warehouse_id'] = $warehouse_id;
		$this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_quantity_alerts')));
        $meta = array('page_title' => lang('product_quantity_alerts'), 'bc' => $bc);
        $this->core_page('reports/quantity_alerts', $meta, $this->data);
    }

    function getQuantityAlerts($warehouse_id = NULL, $pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('quantity_alerts', TRUE);
        if (!$this->Owner && !$this->Admin && !$warehouse_id) {
			if ($this->session->userdata('warehouse_id')) {
				$warehouse_id = json_decode($this->session->userdata('warehouse_id'));
			}
        }
		$allow_category = $this->site->getCategoryByProject();
        if ($xls) {
			if($warehouse_id && $this->Settings->alert_qty_by_warehouse == 1){
				$this->db
                    ->select('products.image, products.code, products.name, convert_qty('.$this->db->dbprefix("products").'.id,'.$this->db->dbprefix("warehouses_products").'.quantity) AS quantity, convert_qty('.$this->db->dbprefix("products").'.id,'.$this->db->dbprefix("warehouses_products").'.alert_quantity) as alert_quantity, convert_qty('.$this->db->dbprefix("products").'.id,('.$this->db->dbprefix("warehouses_products").'.alert_quantity - '.$this->db->dbprefix("warehouses_products").'.quantity)) as quantity_to_add')
					->from('warehouses_products')
					->join('products','products.id = warehouses_products.product_id','inner')
					->join('warehouses','warehouses.id = warehouses_products.warehouse_id','inner')
					->where('warehouses_products.alert_quantity >',0)
					->where('products.track_quantity',1)
					->where('warehouses_products.alert_quantity >= warehouses_products.quantity')
					->where_in('warehouses.id',$warehouse_id)
					->group_by('warehouses_products.product_id');
			}else if ($warehouse_id) {
                $this->db
                    ->select('image, code, name, convert_qty('.$this->db->dbprefix("products").'.id,wp.quantity) AS quantity, convert_qty('.$this->db->dbprefix("products").'.id,'.$this->db->dbprefix("products").'.alert_quantity) as alert_quantity, convert_qty('.$this->db->dbprefix("products").'.id,('.$this->db->dbprefix("products").'.alert_quantity-wp.quantity)) as quantity_to_add')
                    ->from('products')
                    ->join("( SELECT * from {$this->db->dbprefix('warehouses_products')} ) wp", 'products.id=wp.product_id', 'left')
                    ->where('products.alert_quantity > wp.quantity', NULL)
                    ->where('track_quantity', 1)
					->where_in('wp.warehouse_id', $warehouse_id)
					->where('products.alert_quantity >', 0)
                    ->group_by('products.id');
            } else {
                $this->db
                    ->select('image, code, name, convert_qty(id,quantity) as quantity, convert_qty(id,alert_quantity) as alert_quantity ,convert_qty(id,(alert_quantity-quantity)) as quantity_to_add')
                    ->from('products')
                    ->where('alert_quantity > quantity', NULL)
					->where('products.alert_quantity >', 0)
                    ->where('track_quantity', 1);
            }
			if($allow_category){
				$this->db->where_in('products.category_id',$allow_category);
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_quantity_alerts'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('alert_quantity'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('quantity_to_add'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, strip_tags($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, strip_tags($data_row->alert_quantity));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, strip_tags($data_row->quantity_to_add));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);

				$filename = 'product_quantity_alerts_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            if($warehouse_id && $this->Settings->alert_qty_by_warehouse == 1){
				$this->datatables
                    ->select('products.image, products.code, products.name, convert_qty('.$this->db->dbprefix("products").'.id,'.$this->db->dbprefix("warehouses_products").'.quantity) AS quantity, convert_qty('.$this->db->dbprefix("products").'.id,'.$this->db->dbprefix("warehouses_products").'.alert_quantity) as alert_quantity, convert_qty('.$this->db->dbprefix("products").'.id,('.$this->db->dbprefix("warehouses_products").'.alert_quantity - '.$this->db->dbprefix("warehouses_products").'.quantity)) as quantity_to_add')
					->from('warehouses_products')
					->join('products','products.id = warehouses_products.product_id','inner')
					->join('warehouses','warehouses.id = warehouses_products.warehouse_id','inner')
					->where('warehouses_products.alert_quantity >',0)
					->where('products.track_quantity',1)
					->where('warehouses_products.alert_quantity >= warehouses_products.quantity')
					->where_in('warehouses.id',$warehouse_id)
					->group_by('warehouses_products.product_id');
			}else if ($warehouse_id) {
                $this->datatables
                    ->select('image, code, name, convert_qty('.$this->db->dbprefix("products").'.id,wp.quantity) AS quantity, convert_qty('.$this->db->dbprefix("products").'.id,'.$this->db->dbprefix("products").'.alert_quantity) as alert_quantity, convert_qty('.$this->db->dbprefix("products").'.id,('.$this->db->dbprefix("products").'.alert_quantity-wp.quantity)) as quantity_to_add')
                    ->from('products')
                    ->join("( SELECT * from {$this->db->dbprefix('warehouses_products')} ) AS wp", 'products.id=wp.product_id', 'left')
                    ->where('products.alert_quantity > wp.quantity', NULL)
                    ->where('track_quantity', 1)
					->where_in('wp.warehouse_id', $warehouse_id)
					->where('products.alert_quantity >', 0)
                    ->group_by('products.id');
            } else {
                $this->datatables
                    ->select('image, code, name, convert_qty(id,quantity) as quantity, convert_qty(id,alert_quantity) as alert_quantity,convert_qty(id,(alert_quantity-quantity)) as quantity_to_add')
                    ->from('products')
                    ->where('alert_quantity > quantity', NULL)
					->where('products.alert_quantity >', 0)
                    ->where('track_quantity', 1);
            }
			
			if($allow_category){
				$this->datatables->where_in('products.category_id',$allow_category);
			}
            echo $this->datatables->generate();

        }

    }

    function suggestions()
    {
        $term = $this->input->get('term', TRUE);
        if (strlen($term) < 1) {
            die();
        }

        $rows = $this->reports_model->getProductNames($term);
        if ($rows) {
            foreach ($rows as $row) {
                $pr[] = array('id' => $row->id, 'label' => $row->name . " (" . $row->code . ")");

            }
            $this->cus->send_json($pr);
        } else {
            echo FALSE;
        }
    }

    public function best_sellers($warehouse_id = NULL)
    {
        $this->cus->checkPermissions('best_sellers');

        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $y1 = date('Y', strtotime('-1 month'));
        $m1 = date('m', strtotime('-1 month'));
        $m1sdate = $y1.'-'.$m1.'-01 00:00:00';
        $m1edate = $y1.'-'.$m1.'-'. days_in_month($m1, $y1) . ' 23:59:59';
        $this->data['m1'] = date('M Y', strtotime($y1.'-'.$m1));
        $this->data['m1bs'] = $this->reports_model->getBestSeller($m1sdate, $m1edate, $warehouse_id);
        $y2 = date('Y', strtotime('-2 months'));
        $m2 = date('m', strtotime('-2 months'));
        $m2sdate = $y2.'-'.$m2.'-01 00:00:00';
        $m2edate = $y2.'-'.$m2.'-'. days_in_month($m2, $y2) . ' 23:59:59';
        $this->data['m2'] = date('M Y', strtotime($y2.'-'.$m2));
        $this->data['m2bs'] = $this->reports_model->getBestSeller($m2sdate, $m2edate, $warehouse_id);
        $y3 = date('Y', strtotime('-3 months'));
        $m3 = date('m', strtotime('-3 months'));
        $m3sdate = $y3.'-'.$m3.'-01 23:59:59';
        $this->data['m3'] = date('M Y', strtotime($y3.'-'.$m3)).' - '.$this->data['m1'];
        $this->data['m3bs'] = $this->reports_model->getBestSeller($m3sdate, $m1edate, $warehouse_id);
        $y4 = date('Y', strtotime('-12 months'));
        $m4 = date('m', strtotime('-12 months'));
        $m4sdate = $y4.'-'.$m4.'-01 23:59:59';
        $this->data['m4'] = date('M Y', strtotime($y4.'-'.$m4)).' - '.$this->data['m1'];
        $this->data['m4bs'] = $this->reports_model->getBestSeller($m4sdate, $m1edate, $warehouse_id);
        // $this->cus->print_arrays($this->data['m1bs'], $this->data['m2bs'], $this->data['m3bs'], $this->data['m4bs']);
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('best_sellers')));
        $meta = array('page_title' => lang('best_sellers'), 'bc' => $bc);
        $this->core_page('reports/best_sellers', $meta, $this->data);

    }


    function products()
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('products_report')));
        $meta = array('page_title' => lang('products_report'), 'bc' => $bc);
        $this->core_page('reports/products', $meta, $this->data);
    }

    function getProductsReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('products', TRUE);

        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $cf1 = $this->input->get('cf1') ? $this->input->get('cf1') : NULL;
        $cf2 = $this->input->get('cf2') ? $this->input->get('cf2') : NULL;
        $cf3 = $this->input->get('cf3') ? $this->input->get('cf3') : NULL;
        $cf4 = $this->input->get('cf4') ? $this->input->get('cf4') : NULL;
        $cf5 = $this->input->get('cf5') ? $this->input->get('cf5') : NULL;
        $cf6 = $this->input->get('cf6') ? $this->input->get('cf6') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$allow_category = $this->site->getCategoryByProject();

        $pp = "( SELECT product_id, SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as purchasedQty, SUM(quantity_balance) as balacneQty, SUM( unit_cost * quantity_balance ) balacneValue, SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase,p.created_by from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('purchases')} p on p.id = pi.purchase_id ";
        $sp = "( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale,s.created_by from " . $this->db->dbprefix('sales') . " s JOIN " . $this->db->dbprefix('sale_items') . " si on s.id = si.sale_id ";
        
		$pp .= " WHERE 1=1";
        $sp .= " WHERE 1=1 ";
		if($start_date){
			$start_date = $this->cus->fld($start_date);
			$end_date = $end_date ? $this->cus->fld($end_date, false, 1) : date('Y-m-d');
			
			$pp .= " AND p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
			$sp .= " AND s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
		}
		
		if ($warehouse) {
			$pp .= " AND p.warehouse_id = '{$warehouse}' ";
			$sp .= " AND s.warehouse_id = '{$warehouse}' ";
			$balance_qty = "COALESCE( ".$this->db->dbprefix('warehouses_products') . ".quantity, 0 )";
		}else{
			$balance_qty = "COALESCE( ".$this->db->dbprefix('products') . ".quantity, 0 )";
		}
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
			$pp .= " AND p.created_by = '{$this->session->userdata('user_id')}' ";
			$sp .= " AND s.created_by = '{$this->session->userdata('user_id')}' ";
			
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$pp .= " AND p.biller_id = '{$this->session->userdata('biller_id')}' ";
			$sp .= " AND s.biller_id = '{$this->session->userdata('biller_id')}' ";
			
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$pp .= " AND p.warehouse_id IN ".$warehouse_ids;
			$sp .= " AND s.warehouse_id IN ".$warehouse_ids;
			
		}
        $pp .= " GROUP BY pi.product_id ) PCosts";
        $sp .= " GROUP BY si.product_id ) PSales";
        if ($xls) {

            $this->db
                ->select($this->db->dbprefix('products') . ".code, " . $this->db->dbprefix('products') . ".name,
				convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PCosts.purchasedQty, 0 )) as PurchasedQty,
				convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PSales.soldQty, 0 )) as SoldQty,
				convert_qty(".$this->db->dbprefix('products') . ".id,".$balance_qty.") as BalacneQty,
				COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
				COALESCE( ".$balance_qty." * ".$this->db->dbprefix('products') . ".cost, 0 ) as TotalBalance,
				COALESCE( PSales.totalSale, 0 ) as TotalSales,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit", FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->order_by('products.name');
			if ($warehouse) {
				$this->db->join('warehouses_products', 'warehouses_products.product_id = products.id AND warehouses_products.warehouse_id = '.$warehouse.'', 'inner');
			}				
            if ($product) {
                $this->db->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($cf1) {
                $this->db->where($this->db->dbprefix('products') . ".cf1", $cf1);
            }
            if ($cf2) {
                $this->db->where($this->db->dbprefix('products') . ".cf2", $cf2);
            }
            if ($cf3) {
                $this->db->where($this->db->dbprefix('products') . ".cf3", $cf3);
            }
            if ($cf4) {
                $this->db->where($this->db->dbprefix('products') . ".cf4", $cf4);
            }
            if ($cf5) {
                $this->db->where($this->db->dbprefix('products') . ".cf5", $cf5);
            }
            if ($cf6) {
                $this->db->where($this->db->dbprefix('products') . ".cf6", $cf6);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . ".category_id", $category);
            }
            if ($subcategory) {
                $this->db->where($this->db->dbprefix('products') . ".subcategory_id", $subcategory);
            }
            if ($brand) {
                $this->db->where($this->db->dbprefix('products') . ".brand", $brand);
            }
			if ($allow_category) {
				$this->db->where_in($this->db->dbprefix('products') . ".category_id", $allow_category);
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('stock_in_hand'));

                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $bQty = 0;
                $bAmt = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, strip_tags(html_entity_decode($data_row->PurchasedQty)));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, strip_tags(html_entity_decode($data_row->SoldQty)));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, strip_tags(html_entity_decode($data_row->BalacneQty)));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->TotalBalance);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $bQty += $data_row->BalacneQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $bAmt += $data_row->TotalBalance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $bAmt);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);


				$filename = 'products_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('products') . ".code, " . $this->db->dbprefix('products') . ".name,
				CONCAT(convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PCosts.purchasedQty, 0 )), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
				CONCAT(convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PSales.soldQty, 0 )), '__', COALESCE( PSales.totalSale, 0 )) as sold,
				CONCAT(convert_qty(".$this->db->dbprefix('products') . ".id,".$balance_qty."), '__', COALESCE( ".$balance_qty." * ".$this->db->dbprefix('products') . ".cost, 0 )) as balance, {$this->db->dbprefix('products')}.id as id", FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->group_by('products.code, PSales.soldQty, PSales.totalSale, PCosts.purchasedQty, PCosts.totalPurchase, PCosts.balacneQty, PCosts.balacneValue');
			if ($warehouse) {
				$this->datatables->join('warehouses_products', 'warehouses_products.product_id = products.id AND warehouses_products.warehouse_id = '.$warehouse.'', 'inner');
			}
            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($cf1) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf1", $cf1);
            }
			
            if ($cf2) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf2", $cf2);
            }
            if ($cf3) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf3", $cf3);
            }
            if ($cf4) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf4", $cf4);
            }
            if ($cf5) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf5", $cf5);
            }
            if ($cf6) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf6", $cf6);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
            if ($subcategory) {
                $this->datatables->where($this->db->dbprefix('products') . ".subcategory_id", $subcategory);
            }
            if ($brand) {
                $this->datatables->where($this->db->dbprefix('products') . ".brand", $brand);
            }
			if ($allow_category) {
				$this->datatables->where_in($this->db->dbprefix('products') . ".category_id", $allow_category);
			}
            echo $this->datatables->generate();

        }

    }
	
	function product_variant()
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_variant')));
        $meta = array('page_title' => lang('products_report'), 'bc' => $bc);
        $this->core_page('reports/product_variant', $meta, $this->data);
    }
	
	function getProductVariantReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('products', TRUE);

        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;

        
			
        if ($xls) {
			$where = '';
			if($warehouse){
				$where .= " AND cus_warehouses_products_variants.warehouse_id = '".$warehouse."'";
			}
			$vi = "(SELECT
						cus_product_variants.product_id,
						GROUP_CONCAT(
							CONCAT(
								NAME,
								' ( ',
								IFNULL(
									cus_warehouses_products_variants.quantity,
									0
								)
							) SEPARATOR ' ) '
						) AS item_nane, 
						sum(cus_warehouses_products_variants.quantity) as variant_qty
					FROM
						cus_product_variants
					LEFT JOIN cus_warehouses_products_variants ON cus_warehouses_products_variants.option_id = cus_product_variants.id ".$where."
					GROUP BY
						cus_product_variants.product_id) as varaint";

            $this->db
                ->select($this->db->dbprefix('products') . ".code,
					" . $this->db->dbprefix('products') . ".name , 
					varaint.item_nane,variant_qty", FALSE)
                ->from('products')
				->join($vi,'varaint.product_id=products.id','inner')
                ->group_by('products.id');

            if ($product) {
                $this->db->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . ".category_id", $category);
            }
            if ($subcategory) {
                $this->db->where($this->db->dbprefix('products') . ".subcategory_id", $subcategory);
            }
            if ($brand) {
                $this->db->where($this->db->dbprefix('products') . ".brand", $brand);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('varaint'));
                $row = 2;
				$r = 1;
                
                $pQty = 0;
                foreach ($data as $data_row) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $r);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->variant_qty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->item_nane.")");
                    
                    $pQty += $this->cus->formatDecimal($data_row->variant_qty);
                    $row++;
					$r++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":D" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $pQty);
				
				
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);

				$filename = 'product_variant_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			
            $this->load->library('datatables');
			$where = '';
			if($warehouse){
				$where .= " AND cus_warehouses_products_variants.warehouse_id = '".$warehouse."'";
			}
			$vi = "(SELECT
						cus_product_variants.product_id,
						GROUP_CONCAT(
							CONCAT(
								NAME,
								'__',
								IFNULL(
									cus_warehouses_products_variants.quantity,
									0
								)
							) SEPARATOR '___'
						) AS item_nane
					FROM
						cus_product_variants
					LEFT JOIN cus_warehouses_products_variants ON cus_warehouses_products_variants.option_id = cus_product_variants.id ".$where."
					GROUP BY
						cus_product_variants.product_id) as varaint";
			
            $this->datatables
                ->select($this->db->dbprefix('products') . ".code,
					" . $this->db->dbprefix('products') . ".name , 
					varaint.item_nane", FALSE)
                ->from('products')
				->join($vi,'varaint.product_id=products.id','inner')
                ->group_by('products.id');

            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
            if (isset($subcategory)) {
                $this->datatables->where($this->db->dbprefix('products') . ".subcategory_id", $subcategory);
            }
            if ($brand) {
                $this->datatables->where($this->db->dbprefix('products') . ".brand", $brand);
            }

            echo $this->datatables->generate();

        }

    }

    function categories()
    {
        $this->cus->checkPermissions('products');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['warehouses'] = $this->site->getWarehouses();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('categories_report')));
        $meta = array('page_title' => lang('categories_report'), 'bc' => $bc);
        $this->core_page('reports/categories', $meta, $this->data);
    }

    function getCategoriesReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('products', TRUE);
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$allow_category = $this->site->getCategoryByProject();
		
        $pp = "( SELECT pp.category_id as category, SUM( pi.quantity ) purchasedQty, SUM( pi.subtotal ) totalPurchase, p.created_by from {$this->db->dbprefix('products')} pp
                left JOIN " . $this->db->dbprefix('purchase_items') . " pi ON pp.id = pi.product_id
                left join " . $this->db->dbprefix('purchases') . " p ON p.id = pi.purchase_id ";
        $sp = "( SELECT sp.category_id as category, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, s.created_by from {$this->db->dbprefix('products')} sp
                left JOIN " . $this->db->dbprefix('sale_items') . " si ON sp.id = si.product_id
                left join " . $this->db->dbprefix('sales') . " s ON s.id = si.sale_id ";
		
		$pp .= " WHERE 1=1";
        $sp .= " WHERE 1=1 ";
		if($start_date){
			$start_date = $this->cus->fld($start_date);
			$end_date = $end_date ? $this->cus->fld($end_date, false, 1) : date('Y-m-d');
			
			$pp .= " AND p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
			$sp .= " AND s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
		}
		if ($warehouse) {
			$pp .= " AND p.warehouse_id = '{$warehouse}' ";
			$sp .= " AND s.warehouse_id = '{$warehouse}' ";
		}
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
			$pp .= " AND p.created_by = '{$this->session->userdata('user_id')}' ";
			$sp .= " AND s.created_by = '{$this->session->userdata('user_id')}' ";
			
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$pp .= " AND p.biller_id = '{$this->session->userdata('biller_id')}' ";
			$sp .= " AND s.biller_id = '{$this->session->userdata('biller_id')}' ";
			
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$pp .= " AND p.warehouse_id IN ".$warehouse_ids;
			$sp .= " AND s.warehouse_id IN ".$warehouse_ids;
			
		}
		
		
        $pp .= " GROUP BY pp.category_id ) PCosts";
        $sp .= " GROUP BY sp.category_id ) PSales";

        if ($xls) {

            $this->db
                ->select($this->db->dbprefix('categories') . ".code, " . $this->db->dbprefix('categories') . ".name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit", FALSE)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left')
                ->group_by('categories.id, categories.code, categories.name')
                ->order_by('categories.code', 'asc');

            if ($category) {
                $this->db->where($this->db->dbprefix('categories') . ".id", $category);
            }
			if ($allow_category) {
                $this->db->where_in($this->db->dbprefix('categories') . ".id", $allow_category);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('categories_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('profit_loss'));

                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $pl = 0;
                foreach ($data as $data_row) {
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $profit);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $pl += $profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":G" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);


				$filename = 'categories_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {


            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('categories') . ".id as cid, " .$this->db->dbprefix('categories') . ".code, " . $this->db->dbprefix('categories') . ".name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit", FALSE)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left');
                
            if ($category) {
                $this->datatables->where('categories.id', $category);
            }
			if ($allow_category) {
                $this->datatables->where_in("categories.id", $allow_category);
            }
            $this->datatables->group_by('categories.id, categories.code, categories.name, PSales.SoldQty, PSales.totalSale, PCosts.purchasedQty, PCosts.totalPurchase');
            $this->datatables->unset_column('cid');
            echo $this->datatables->generate();

        }

    }

    function brands()
    {
        $this->cus->checkPermissions('products');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
        } else {
            $dt = "Till " . $this->input->post('end_date');
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('brands_report')));
        $meta = array('page_title' => lang('brands_report'), 'bc' => $bc);
        $this->core_page('reports/brands', $meta, $this->data);
    }

    function getBrandsReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('products', TRUE);
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        $pp = "( SELECT pp.brand as brand, SUM( pi.quantity ) purchasedQty, SUM( pi.subtotal ) totalPurchase,p.created_by from {$this->db->dbprefix('products')} pp
                left JOIN " . $this->db->dbprefix('purchase_items') . " pi ON pp.id = pi.product_id
                left join " . $this->db->dbprefix('purchases') . " p ON p.id = pi.purchase_id ";
        $sp = "( SELECT sp.brand as brand, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale,s.created_by from {$this->db->dbprefix('products')} sp
                left JOIN " . $this->db->dbprefix('sale_items') . " si ON sp.id = si.product_id
                left join " . $this->db->dbprefix('sales') . " s ON s.id = si.sale_id ";
        
		$pp .= " WHERE 1=1";
        $sp .= " WHERE 1=1 ";
		if($start_date){
			$start_date = $this->cus->fld($start_date);
			$end_date = $end_date ? $this->cus->fld($end_date, false, 1) : date('Y-m-d');
			
			$pp .= " AND p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
			$sp .= " AND s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
		}
		if ($warehouse) {
			$pp .= " AND p.warehouse_id = '{$warehouse}' ";
			$sp .= " AND s.warehouse_id = '{$warehouse}' ";
		}
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
			$pp .= " AND p.created_by = '{$this->session->userdata('user_id')}' ";
			$sp .= " AND s.created_by = '{$this->session->userdata('user_id')}' ";
			
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$pp .= " AND p.biller_id = '{$this->session->userdata('biller_id')}' ";
			$sp .= " AND s.biller_id = '{$this->session->userdata('biller_id')}' ";
			
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$pp .= " AND p.warehouse_id IN ".$warehouse_ids;
			$sp .= " AND s.warehouse_id IN ".$warehouse_ids;
			
		}
		$allow_category = $this->site->getCategoryByProject();
		if($allow_category){
			$pp .= " AND pp.category_id IN ('".implode("','",$allow_category)."')";
			$sp .= " AND sp.category_id IN ('".implode("','",$allow_category)."')";
		}
		

        $pp .= " GROUP BY pp.brand ) PCosts";
        $sp .= " GROUP BY sp.brand ) PSales";

        if ($xls) {

            $this->db
                ->select($this->db->dbprefix('brands') . ".name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit", FALSE)
                ->from('brands')
                ->join($sp, 'brands.id = PSales.brand', 'left')
                ->join($pp, 'brands.id = PCosts.brand', 'left')
                ->group_by('brands.id, brands.name')
                ->order_by('brands.code', 'asc');

            if ($brand) {
                $this->db->where($this->db->dbprefix('brands') . ".id", $brand);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('brands_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('brands'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('profit_loss'));

                $row = 2; $sQty = 0; $pQty = 0; $sAmt = 0; $pAmt = 0; $pl = 0;
                foreach ($data as $data_row) {
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $profit);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $pl += $profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("B" . $row . ":F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);

				$filename = 'brands_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {


            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('brands') . ".id as id, " . $this->db->dbprefix('brands') . ".name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit", FALSE)
                ->from('brands')
                ->join($sp, 'brands.id = PSales.brand', 'left')
                ->join($pp, 'brands.id = PCosts.brand', 'left');
                
            if ($brand) {
                $this->datatables->where('brands.id', $brand);
            }
            $this->datatables->group_by('brands.id, brands.name, PSales.SoldQty, PSales.totalSale, PCosts.purchasedQty, PCosts.totalPurchase');
            $this->datatables->unset_column('id');
            echo $this->datatables->generate();

        }

    }

    function profit($date = NULL, $warehouse_id = NULL)
    {

        if ( ! $date) { $date = date('Y-m-d'); }
        $this->data['costing'] = $this->reports_model->getCosting($date, $warehouse_id);
        $this->data['discount'] = $this->reports_model->getOrderDiscount($date, $warehouse_id);
        $this->data['expenses'] = $this->reports_model->getExpenses($date, $warehouse_id);
        $this->data['date'] = $date;
        $this->load->view($this->theme . 'reports/profit', $this->data);
    }
    
	function monthly_profit($year, $month, $warehouse_id = NULL)
    {
        if ( ! $this->Owner) {
            $this->session->set_flashdata('error', lang('access_denied'));
            $this->cus->md();
        }
        
        $this->data['costing'] = $this->reports_model->getCosting(NULL, $warehouse_id, $year, $month);
        $this->data['discount'] = $this->reports_model->getOrderDiscount(NULL, $warehouse_id, $year, $month);
        $this->data['expenses'] = $this->reports_model->getExpenses(NULL, $warehouse_id, $year, $month);
        $this->data['date'] = date('F Y', strtotime($year.'-'.$month.'-'.'01'));
        $this->load->view($this->theme . 'reports/monthly_profit', $this->data);
    }

    function daily_sales($warehouse_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->cus->checkPermissions();
        if (!$year) {
            $year = date('Y');
        }
        if (!$month) {
            $month = date('m');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/daily_sales/'.($warehouse_id ? $warehouse_id : 0)),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<div class="table-responsive"><table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
		{heading_row_start}<tr>{/heading_row_start}
		{heading_previous_cell}<th><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
		{heading_title_cell}<th colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
		{heading_next_cell}<th><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
		{heading_row_end}</tr>{/heading_row_end}
		{week_row_start}<tr>{/week_row_start}
		{week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
		{week_row_end}</tr>{/week_row_end}
		{cal_row_start}<tr class="days">{/cal_row_start}
		{cal_cell_start}<td class="day">{/cal_cell_start}
		{cal_cell_content}
		<div class="day_num">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content}
		{cal_cell_content_today}
		<div class="day_num highlight">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content_today}
		{cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
		{cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
		{cal_cell_blank}&nbsp;{/cal_cell_blank}
		{cal_cell_end}</td>{/cal_cell_end}
		{cal_row_end}</tr>{/cal_row_end}
		{table_close}</table></div>{/table_close}';

        $this->load->library('calendar', $config);
		
        $sales = $user_id ? $this->reports_model->getStaffDailySales($user_id, $year, $month, $warehouse_id) : $this->reports_model->getDailySales($year, $month, $warehouse_id);

        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("discount") . "</td><td>" . $this->cus->formatMoney($sale->discount) . "</td></tr><tr><td>" . lang("shipping") . "</td><td>" . $this->cus->formatMoney($sale->shipping) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->cus->formatMoney($sale->tax1) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->cus->formatMoney($sale->tax2) . "</td></tr><tr><td>" . lang("total") . "</td><td>" . $this->cus->formatMoney($sale->total) . "</td></tr><tr><td>" . lang("returned") . "</td><td>" . $this->cus->formatMoney($sale->return_total) . "</td></tr></table>";
            }
        } else {
            $daily_sale = array();
        }

        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/daily', $this->data, true);
            $name = lang("daily_sales") . "_" . $year . "_" . $month . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->cus->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['sel_warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_sales_report')));
        $meta = array('page_title' => lang('daily_sales_report'), 'bc' => $bc);
        $this->core_page('reports/daily', $meta, $this->data);

    }


    function monthly_sales($warehouse_id = NULL, $year = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->cus->checkPermissions();
        if (!$year) {
            $year = date('Y');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->load->language('calendar');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['year'] = $year;
        $this->data['sales'] = $user_id ? $this->reports_model->getStaffMonthlySales($user_id, $year, $warehouse_id) : $this->reports_model->getMonthlySales($year, $warehouse_id);
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/monthly', $this->data, true);
            $name = lang("monthly_sales") . "_" . $year . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->cus->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['sel_warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_sales_report')));
        $meta = array('page_title' => lang('monthly_sales_report'), 'bc' => $bc);
        $this->core_page('reports/monthly', $meta, $this->data);

    }

    function sales()
    {
        $this->cus->checkPermissions('sales');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['pos_settings'] = $this->reports_model->getPOSSetting();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_report')));
        $meta = array('page_title' => lang('sales_report'), 'bc' => $bc);
        $this->core_page('reports/sales', $meta, $this->data);
    }
	
    function getSalesReportMargin($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('sales', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $serial = $this->input->get('serial') ? $this->input->get('serial') : NULL;
		$sale_id = $this->input->get('sale_id') ? $this->input->get('sale_id') : NULL;
		$sale_type = $this->input->get('sale_type') ? $this->input->get('sale_type') : NULL;
		$sale_tax = $this->input->get('sale_tax') ? $this->input->get('sale_tax') : NULL;
		
		$vehicle_model = $this->input->get('vehicle_model') ? $this->input->get('vehicle_model') : NULL;
		$vehicle_plate = $this->input->get('vehicle_plate') ? $this->input->get('vehicle_plate') : NULL;
		$vehicle_vin = $this->input->get('vehicle_vin') ? $this->input->get('vehicle_vin') : NULL;
		$mechanic = $this->input->get('mechanic') ? $this->input->get('mechanic') : NULL;
		
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($xls) {
				
			$si = "( SELECT IFNULL(sum(((quantity + IFNULL(foc,0)) * cost) + IFNULL(extract_cost,0)),0) AS total_cost,sale_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, ' Qty : ', {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '\n') as item_nane from {$this->db->dbprefix('sale_items')} ";
            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            
			$this->db
                ->select("{$this->db->dbprefix('sales')}.id as id,DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, biller, customer, CONCAT (".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
				FSI.item_nane as iname,
				IF(".$this->db->dbprefix('sales').".sale_status='draft',0,(grand_total - IFNULL(total_cost,0)) - (IFNULL(return_total,0) - IFNULL(return_cost,0))) as gross_margin,
				grand_total, 
				IFNULL(cus_return.return_total,0) as returned, 
				IFNULL(cus_payments.paid + IFNULL(return_paid,0),0) as paid, 
				IFNULL(cus_payments.discount,0) as discount,  
				ROUND((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.return_total + return_paid,0))),".$this->Settings->decimals.") as balance,
				IF (
					(
						round((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.return_total + return_paid,0))),".$this->Settings->decimals.") = 0
					),
					'paid',
					IF (
					(
						(grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.return_total + return_paid,0))) = grand_total
					),
					'pending',
					'partial'
				)) AS payment_status", FALSE)
                ->from('sales')
				->join('users','users.id = sales.created_by','left')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
				->join('(SELECT
						sum(abs(grand_total)) AS return_total,
						sum(paid) AS return_paid,
						'.$this->db->dbprefix('sales').'.sale_id,
						IFNULL(return_cost,0) AS return_cost
					FROM
						'.$this->db->dbprefix('sales').'
					LEFT JOIN (
						SELECT
							sale_id,
							IFNULL(
								sum(
									(
										abs('.$this->db->dbprefix('sale_items').'.quantity) * '.$this->db->dbprefix('sale_items').'.cost
									) + IFNULL(
										'.$this->db->dbprefix('sale_items').'.extract_cost,
										0
									)
								),
								0
							) as return_cost
						FROM
							'.$this->db->dbprefix('sale_items').'
						GROUP BY
							sale_id
					) AS cus_sale_items ON cus_sale_items.sale_id = cus_sales.id	
					WHERE sale_status = "returned"
					GROUP BY
						sale_id) as cus_return', 'cus_return.sale_id=sales.id', 'left')
				->join('(SELECT
							sale_id,
							IFNULL(sum(amount),0) AS paid,
							IFNULL(sum(discount),0) AS discount
						FROM
							'.$this->db->dbprefix('payments').'
						GROUP BY
							sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left');
			$this->db->where('sale_status !=', 'returned');
			
			if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($product) {
                $this->db->where('FSI.product_id', $product, FALSE);
            }
            if ($serial) {
                $this->db->like('FSI.serial_no', $serial, FALSE);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
				$this->db->where('sales.date >=', $start_date);
            }
			if ($end_date) {
				$this->db->where('sales.date <=', $end_date);
            }
			if($sale_type){
				if($sale_type=="sale"){
					$this->db->where('sales.pos !=', 1);
				}else if($sale_type=="pos"){
					$this->db->where('sales.pos', 1);
				}
			}
			if($sale_tax){
				if($sale_tax=="yes"){
					$this->db->where('IFNULL('.$this->db->dbprefix("sales").'.order_tax,0)!=', 0);
				}else if($sale_tax=="no"){
					$this->db->where('IFNULL('.$this->db->dbprefix("sales").'.order_tax,0)', 0);
				}
			}
			if ($vehicle_model) {
                $this->db->like('sales.vehicle_model', $vehicle_model, 'both');
            }
			if ($vehicle_plate) {
                $this->db->like('sales.vehicle_plate', $vehicle_plate, 'both');
            }
			if ($vehicle_vin) {
                $this->db->like('sales.vehicle_vin_no', $vehicle_vin, 'both');
            }
			if ($mechanic) {
                $this->db->like('sales.mechanic', $mechanic, 'both');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
			$q = $this->db->get();

            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }


            if (!empty($data)) {
				
				if($pdf){
					$this->combine_sales_pdf($data);
				}
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('product_qty'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('gross_margin'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('returned'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('payment_status'));

                $row = 2;
				$gross_margin = 0;
                $total = 0;
                $paid = 0;
				$discount = 0;
                $balance = 0;
                foreach ($data as $data_row) {	
					if(!$this->Owner && !$this->Admin && !$this->session->userdata('show_cost')){ 
						$data_row->gross_margin = 0;
					}
					$sb = number_format($data_row->grand_total - $data_row->paid - $data_row->discount,$this->Settings->decimals);										
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iname);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->gross_margin));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->returned));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->balance));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($data_row->payment_status));
                   
					$gross_margin += $data_row->gross_margin;
					$total += $data_row->grand_total;
					$returned += $data_row->returned;
                    $paid += $data_row->paid;
					$discount += $data_row->discount;
                    $balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row . ":L" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($gross_margin));
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total));
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($returned));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($paid));
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($discount));
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($balance));

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
             
				$filename = 'sales_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $si = "( SELECT IFNULL(sum(((quantity + IFNULL(foc,0)) * cost) + IFNULL(extract_cost,0)),0) AS total_cost,sale_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('sale_items')} ";
            if ($product) {
                $si .= " WHERE {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, biller, customer,CONCAT (".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
				FSI.item_nane as iname,
				IF(".$this->db->dbprefix('sales').".sale_status='draft',0,(grand_total - IFNULL(total_cost,0)) - (IFNULL(return_total,0) - IFNULL(return_cost,0))) as gross_margin,
				grand_total, 
				IFNULL(cus_return.return_total,0) as returned, 
				IFNULL(cus_payments.paid + IFNULL(return_paid,0),0) as paid, 
				IFNULL(cus_payments.discount,0) as discount,  
				ROUND((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.return_total + return_paid,0))),".$this->Settings->decimals.") as balance,
				IF (
					(
						round((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.return_total + return_paid,0))),".$this->Settings->decimals.") = 0
					),
					'paid',
					IF (
					(
						(grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.return_total + return_paid,0))) = grand_total
					),
					'pending',
					'partial'
				)) AS payment_status,
				{$this->db->dbprefix('sales')}.id as id,", FALSE)
                ->from('sales')
				->join('users','users.id = sales.created_by','left')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
				->join('(SELECT
						sum(abs(grand_total)) AS return_total,
						sum(paid) AS return_paid,
						'.$this->db->dbprefix('sales').'.sale_id,
						IFNULL(return_cost,0) AS return_cost
					FROM
						'.$this->db->dbprefix('sales').'
					LEFT JOIN (
						SELECT
							sale_id,
							IFNULL(
								sum(
									(
										abs('.$this->db->dbprefix('sale_items').'.quantity) * '.$this->db->dbprefix('sale_items').'.cost
									) + IFNULL(
										'.$this->db->dbprefix('sale_items').'.extract_cost,
										0
									)
								),
								0
							) as return_cost
						FROM
							'.$this->db->dbprefix('sale_items').'
						GROUP BY
							sale_id
					) AS cus_sale_items ON cus_sale_items.sale_id = cus_sales.id	
					WHERE sale_status = "returned"
					GROUP BY
						sale_id) as cus_return', 'cus_return.sale_id=sales.id', 'left')
				->join('(SELECT
							sale_id,
							IFNULL(sum(amount),0) AS paid,
							IFNULL(sum(discount),0) AS discount
						FROM
							'.$this->db->dbprefix('payments').'
						GROUP BY
							sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left');
			$this->datatables->where('sale_status !=', 'returned');
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product, FALSE);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial, FALSE);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
			if ($start_date) {
				$this->datatables->where('sales.date >=', $start_date);
            }
			if ($end_date) {
				$this->datatables->where('sales.date <=', $end_date);
            }
			if($sale_type){
				if($sale_type=="sale"){
					$this->datatables->where('sales.pos !=', 1);
				}else if($sale_type=="pos"){
					$this->datatables->where('sales.pos', 1);
				}
			}
			if($sale_tax){
				if($sale_tax=="yes"){
					$this->datatables->where('IFNULL('.$this->db->dbprefix("sales").'.order_tax,0)!=', 0);
				}else if($sale_tax=="no"){
					$this->datatables->where('IFNULL('.$this->db->dbprefix("sales").'.order_tax,0)', 0);
				}
			}
			if ($vehicle_model) {
                $this->datatables->like('sales.vehicle_model', $vehicle_model, 'both');
            }
			if ($vehicle_plate) {
                $this->datatables->like('sales.vehicle_plate', $vehicle_plate, 'both');
            }
			if ($vehicle_vin) {
                $this->datatables->like('sales.vehicle_vin_no', $vehicle_vin, 'both');
            }
			if ($mechanic) {
                $this->datatables->like('sales.mechanic', $mechanic, 'both');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();

        }

    }

    function getSalesFreightReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('sales', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $serial = $this->input->get('serial') ? $this->input->get('serial') : NULL;
        $sale_id = $this->input->get('sale_id') ? $this->input->get('sale_id') : NULL;
        
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($xls) {
                
            $this->db
                ->select("cus_sales.id,
                    cus_sales.date,
                    cus_sales.reference_no as ref,
                    b.reference_no as purchase_ref,
                    cus_sales.supplier,
                    cus_sales.total,
                    cus_sales.paid,
                    (cus_sales.total - cus_sales.paid) as balance,
                    IF
                    (
                        (
                            round(( cus_sales.grand_total -( IFNULL( cus_payments.paid, 0 ))-( IFNULL( cus_payments.discount, 0 ))), 2 ) = 0 
                        ),
                        'paid',
                    IF
                        (
                            (
                                (
                                    cus_sales.grand_total -(
                                        IFNULL( cus_payments.paid, 0 ))-(
                                        IFNULL( cus_payments.discount, 0 ))) = cus_sales.grand_total 
                            ),
                            'pending',
                            'partial' 
                        )) AS payment_status,
                        cus_sales.sale_id
                        ", FALSE)
                ->from('sales')
                ->join('sales b', 'cus_sales.sale_id=b.id')
                ->join('(SELECT
                            sale_id,
                            IFNULL(sum(amount),0) AS paid,
                            IFNULL(sum(discount),0) AS discount
                        FROM
                            '.$this->db->dbprefix('payments').'
                        GROUP BY
                            sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left');
            
            if ($sale_id) {
                $this->db->where('sales.id IN ('.$sale_id.')');
            }
            $q = $this->db->get();

            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }


            if (!empty($data)) {
                
                if($pdf){
                    $this->combine_sales_pdf($data);
                }
                
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('payment_status'));

                $row = 2;
                $gross_margin = 0;
                $total = 0;
                $paid = 0;
                $discount = 0;
                $balance = 0;
                foreach ($data as $data_row) {                  
                    $sb = number_format($data_row->grand_total - $data_row->paid - $data_row->discount,$this->Settings->decimals);                                      
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->balance);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, lang($data_row->payment_status));
                   
                    $total += $data_row->total;
                    $paid += $data_row->paid;
                    $balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("E" . $row . ":G" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                
				$filename = 'sales_freight_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("cus_sales.id,
                    cus_sales.date,
                    cus_sales.reference_no as ref,
                    b.reference_no as purchase_ref,
                    cus_sales.supplier,
                    cus_sales.total,
                    cus_sales.paid,
                    (cus_sales.total - cus_sales.paid) as balance,
                    IF
                    (
                        (
                            round(( cus_sales.grand_total -( IFNULL( cus_payments.paid, 0 ))-( IFNULL( cus_payments.discount, 0 ))), 2 ) = 0 
                        ),
                        'paid',
                    IF
                        (
                            (
                                (
                                    cus_sales.grand_total -(
                                        IFNULL( cus_payments.paid, 0 ))-(
                                        IFNULL( cus_payments.discount, 0 ))) = cus_sales.grand_total 
                            ),
                            'pending',
                            'partial' 
                        )) AS payment_status,
                        cus_sales.sale_id
                        ", FALSE)
                ->from('sales')
                ->join('sales b', 'cus_sales.sale_id=b.id')
                ->join('(SELECT
                            sale_id,
                            IFNULL(sum(amount),0) AS paid,
                            IFNULL(sum(discount),0) AS discount
                        FROM
                            '.$this->db->dbprefix('payments').'
                        GROUP BY
                            sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left');
            $this->datatables->where('sales.status', 'freight');
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product, FALSE);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial, FALSE);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($supplier) {
                $this->datatables->where('sales.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();

        }

    }
	
	function getSalesReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('sales', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $serial = $this->input->get('serial') ? $this->input->get('serial') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($xls) {

            $this->db
                ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, 
							reference_no,
							biller,
							customer,
							GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname,
							grand_total,
							IFNULL(total_return,0) as total_return,
							IFNULL(cus_payments.paid + IFNULL(total_return_paid,0),0) as paid,
							IFNULL(cus_payments.discount,0) as discount,
							ROUND((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") as balance,
							IF (
								(
									round((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") = 0
								),
								'paid',
								IF (
								(
									(grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.total_return + total_return_paid,0))) = grand_total
								),
								'pending',
								'partial'
							)) AS payment_status", FALSE)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
				->join('(SELECT
						sum(abs(grand_total)) AS total_return,
						sum(paid) AS total_return_paid,
						sale_id
					FROM
						'.$this->db->dbprefix('sales').'
					WHERE sale_status = "returned"
					GROUP BY
						sale_id) as cus_return', 'cus_return.sale_id=sales.id', 'left')
				->join('(SELECT
							sale_id,
							IFNULL(sum(amount),0) AS paid,
							IFNULL(sum(discount),0) AS discount
						FROM
							'.$this->db->dbprefix('payments').'
						GROUP BY
							sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id',$this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

			
			$this->db->where('sale_status !=', 'returned');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
				
				if($pdf){
					$this->combine_sales_pdf($data);
				}
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('return'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('payment_status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
				$discount = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->total_return);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->discount);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->balance));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->payment_status));
                    $total += $data_row->grand_total;
					$return += $data_row->total_return;
                    $paid += $data_row->paid;
					$discount += $data_row->discount;
                    $balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":J" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $return);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
               
				$filename = 'sales_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $si = "( SELECT sale_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('sale_items')} ";
            if ($product) {
                $si .= " WHERE {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $this->load->library('datatables');
            $this->datatables
                ->select("sales.id as id, DATE_FORMAT(date, '%Y-%m-%d %T') as date, 
							reference_no,
							biller,
							customer,
							FSI.item_nane as iname,
							grand_total,
							IFNULL(total_return,0) as total_return,
							IFNULL(cus_payments.paid + IFNULL(total_return_paid,0),0) as paid,
							IFNULL(cus_payments.discount,0) as discount,
							ROUND((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") as balance,
							IF (
								(
									round((grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") = 0
								),
								'paid',
								IF (
								(
									(grand_total-(IFNULL(cus_payments.paid,0))-(IFNULL(cus_payments.discount,0))-(IFNULL(cus_return.total_return + total_return_paid,0))) = grand_total
								),
								'pending',
								'partial'
							)) AS payment_status,
							{$this->db->dbprefix('sales')}.id as id", FALSE)
                ->from('sales')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
				->join('(SELECT
						sum(abs(grand_total)) AS total_return,
						sum(paid) AS total_return_paid,
						sale_id
					FROM
						'.$this->db->dbprefix('sales').'
					WHERE sale_status = "returned"
					GROUP BY
						sale_id) as cus_return', 'cus_return.sale_id=sales.id', 'left')
				->join('(SELECT
							sale_id,
							IFNULL(sum(amount),0) AS paid,
							IFNULL(sum(discount),0) AS discount
						FROM
							'.$this->db->dbprefix('payments').'
						GROUP BY
							sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left');
                // ->group_by('sales.id');

            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product, FALSE);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial, FALSE);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id',$this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			$this->datatables->where('sale_status !=', 'returned');

            echo $this->datatables->generate();

        }

    }
	
	function getSaleOrdersReport($pdf = NULL, $xls = NULL)
	{

		if ($this->input->get('product')) {
			$product = $this->input->get('product');
		} else {
			$product = NULL;
		}
		if ($this->input->get('user')) {
			$user = $this->input->get('user');
		} else {
			$user = NULL;
		}
		if ($this->input->get('customer')) {
			$customer = $this->input->get('customer');
		} else {
			$customer = NULL;
		}
		if ($this->input->get('biller')) {
			$biller = $this->input->get('biller');
		} else {
			$biller = NULL;
		}
		if ($this->input->get('warehouse')) {
			$warehouse = $this->input->get('warehouse');
		} else {
			$warehouse = NULL;
		}
		if ($this->input->get('reference_no')) {
			$reference_no = $this->input->get('reference_no');
		} else {
			$reference_no = NULL;
		}
		if ($this->input->get('start_date')) {
			$start_date = $this->input->get('start_date');
		} else {
			$start_date = NULL;
		}
		if ($this->input->get('end_date')) {
			$end_date = $this->input->get('end_date');
		} else {
			$end_date = NULL;
		}
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
			$end_date = $this->cus->fld($end_date,false,1);
		}
		if ($xls) {

			$this->db
				->select("date, reference_no, biller, customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('sale_order_items') . ".product_name, ' (', " . $this->db->dbprefix('sale_order_items') . ".quantity, ')') SEPARATOR '<br>') as iname, grand_total, status", FALSE)
				->from('sale_orders')
				->join('sale_order_items', 'sale_order_items.sale_order_id=sale_orders.id', 'left')
				->join('warehouses', 'warehouses.id=sale_orders.warehouse_id', 'left')
				->group_by('sale_orders.id');

			if ($user) {
				$this->db->where('sale_orders.created_by', $user);
			}
			if ($product) {
				$this->db->where('sale_order_items.product_id', $product);
			}
			if ($biller) {
				$this->db->where('sale_orders.biller_id', $biller);
			}
			if ($customer) {
				$this->db->where('sale_orders.customer_id', $customer);
			}
			if ($warehouse) {
				$this->db->where('sale_orders.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->like('sale_orders.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where($this->db->dbprefix('sale_orders').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}

			$q = $this->db->get();
			if ($q->num_rows() > 0) {
				foreach (($q->result()) as $row) {
					$data[] = $row;
				}
			} else {
				$data = NULL;
			}

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('sale_orders_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

				$row = 2;
				foreach ($data as $data_row) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				
				$filename = 'sale_orders_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);

			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);

		} else {

			$qi = "( SELECT sale_order_id, product_id, GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_order_items')}.product_name, '__', {$this->db->dbprefix('sale_order_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('sale_order_items')} ";
			if ($product) {
				$qi .= " WHERE {$this->db->dbprefix('sale_order_items')}.product_id = {$product} ";
			}
			$qi .= " GROUP BY {$this->db->dbprefix('sale_order_items')}.sale_order_id ) FQI";
			$this->load->library('datatables');
			$this->datatables
				->select("date, reference_no, biller, customer, FQI.item_nane as iname, grand_total, status, {$this->db->dbprefix('sale_orders')}.id as id", FALSE)
				->from('sale_orders')
				->join($qi, 'FQI.sale_order_id=sale_orders.id', 'left')
				->join('warehouses', 'warehouses.id=sale_orders.warehouse_id', 'left')
				->group_by('sale_orders.id');

			if ($user) {
				$this->datatables->where('sale_orders.created_by', $user);
			}
			if ($product) {
				$this->datatables->where('FQI.product_id', $product, FALSE);
			}
			if ($biller) {
				$this->datatables->where('sale_orders.biller_id', $biller);
			}
			if ($customer) {
				$this->datatables->where('sale_orders.customer_id', $customer);
			}
			if ($warehouse) {
				$this->datatables->where('sale_orders.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->like('sale_orders.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where($this->db->dbprefix('sale_orders').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}

			echo $this->datatables->generate();

		}

	}
	
	function getProductHistoriesReport($pdf = NULL, $xls = NULL)
	{
		if ($this->input->get('product')) {
			$product = $this->input->get('product');
		} else {
			$product = NULL;
		}
		if ($this->input->get('user')) {
			$user = $this->input->get('user');
		} else {
			$user = NULL;
		}
		if ($this->input->get('biller')) {
			$biller = $this->input->get('biller');
		} else {
			$biller = NULL;
		}
		if ($this->input->get('warehouse')) {
			$warehouse = $this->input->get('warehouse');
		} else {
			$warehouse = NULL;
		}
		if ($this->input->get('reference_no')) {
			$reference_no = $this->input->get('reference_no');
		} else {
			$reference_no = NULL;
		}
		if ($this->input->get('start_date')) {
			$start_date = $this->input->get('start_date');
		} else {
			$start_date = NULL;
		}
		if ($this->input->get('end_date')) {
			$end_date = $this->input->get('end_date');
		} else {
			$end_date = NULL;
		}
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
			$end_date = $this->cus->fld($end_date,false,1);
		}
		if ($xls) {
			
			$this->db
				->select("
					date, 
					stockmoves.transaction,
					stockmoves.reference_no,
					warehouses.name as warehouse, 
					SUM(IFNULL(quantity,0)) as quantity, 
					concat(last_name,' ',first_name) as user,
					{$this->db->dbprefix('stockmoves')}.id as id", FALSE)
				->from('stockmoves')
				->join('warehouses', 'warehouses.id=stockmoves.warehouse_id', 'left')
				->join('users', 'users.id=stockmoves.user_id', 'left')
				->where('quantity <>', NULL)
				->group_by('stockmoves.transaction,stockmoves.transaction_id');
			
			if ($user) {
				$this->db->where('stockmoves.created_by', $user);
			}
			if ($product) {
                $this->db->where('stockmoves.product_id', $product);
            }
			if ($warehouse) {
				$this->db->where('stockmoves.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->like('stockmoves.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where($this->db->dbprefix('stockmoves').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			
			$q = $this->db->get();
			if ($q->num_rows() > 0) {
				foreach (($q->result()) as $row) {
					$data[] = $row;
				}
			} else {
				$data = NULL;
			}
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('sale_orders_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('transaction'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('quantity'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
				$row = 2;
				foreach ($data as $data_row) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->transaction);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->quantity);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->user);
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				
				
				$filename = 'product_histories_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);

		} else {

			$this->load->library('datatables');
			$this->datatables
				->select("
					date, 
					stockmoves.transaction,
					stockmoves.reference_no,
					warehouses.name as warehouse, 
					SUM(IFNULL(quantity,0)) as quantity, 
					concat(last_name,' ',first_name) as user,
					{$this->db->dbprefix('stockmoves')}.id as id", FALSE)
				->from('stockmoves')
				->join('warehouses', 'warehouses.id=stockmoves.warehouse_id', 'left')
				->join('users', 'users.id=stockmoves.user_id', 'left')
				->where('quantity <>', NULL)
				->group_by('stockmoves.transaction,stockmoves.transaction_id');

			if ($user) {
				$this->datatables->where('stockmoves.user_id', $user);
			}
			if ($product) {
                $this->datatables->where('stockmoves.product_id', $product);
            }
			if ($warehouse) {
				$this->datatables->where('stockmoves.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->like('stockmoves.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where($this->db->dbprefix('stockmoves').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			echo $this->datatables->generate();
		}
	}

    function getQuotesReport($pdf = NULL, $xls = NULL)
    {

        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {

            $this->db
                ->select("date, reference_no, biller, customer, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('quote_items') . ".product_name, ' (', " . $this->db->dbprefix('quote_items') . ".quantity, ')') SEPARATOR '<br>') as iname, grand_total, status", FALSE)
                ->from('quotes')
                ->join('quote_items', 'quote_items.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');

            if ($user) {
                $this->db->where('quotes.created_by', $user);
            }
            if ($product) {
                $this->db->where('quote_items.product_id', $product);
            }
            if ($biller) {
                $this->db->where('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('quotes').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('quotes.biller_id',$this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('quotes.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where('quotes.created_by', $this->session->userdata('user_id'));
			}

			

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('quotes_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                
				$filename = 'quotes_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $qi = "( SELECT quote_id, product_id, GROUP_CONCAT(CONCAT({$this->db->dbprefix('quote_items')}.product_name, '__', {$this->db->dbprefix('quote_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('quote_items')} ";
            if ($product) {
                $qi .= " WHERE {$this->db->dbprefix('quote_items')}.product_id = {$product} ";
            }
            $qi .= " GROUP BY {$this->db->dbprefix('quote_items')}.quote_id ) FQI";
            $this->load->library('datatables');
            $this->datatables
                ->select("date, reference_no, biller, customer, FQI.item_nane as iname, grand_total, status, {$this->db->dbprefix('quotes')}.id as id", FALSE)
                ->from('quotes')
                ->join($qi, 'FQI.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');

            if ($user) {
                $this->datatables->where('quotes.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FQI.product_id', $product, FALSE);
            }
            if ($biller) {
                $this->datatables->where('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('quotes').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('quotes.biller_id',$this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('quotes.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('quotes.created_by', $this->session->userdata('user_id'));
			}

            echo $this->datatables->generate();

        }

    }

    function getTransfersReport($pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }

        if ($xls) {

            $this->db
                ->select($this->db->dbprefix('transfers') . ".date, transfer_no, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('transfer_items') . ".product_name, ' (', " . $this->db->dbprefix('transfer_items') . ".quantity, ')') SEPARATOR '<br>') as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, " . $this->db->dbprefix('transfers') . ".status")
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id')->order_by('transfers.date desc');
            if ($product) {
                $this->db->where($this->db->dbprefix('transfer_items') . ".product_id", $product);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('transfers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('transfer_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse') . ' (' . lang('from') . ')');
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse') . ' (' . lang('to') . ')');
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transfer_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->fname . ' (' . $data_row->fcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->tname . ' (' . $data_row->tcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                
				$filename = 'transfers_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("{$this->db->dbprefix('transfers')}.date, transfer_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('transfer_items')}.product_name, '__', {$this->db->dbprefix('transfer_items')}.quantity) SEPARATOR '___') as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, {$this->db->dbprefix('transfers')}.status, {$this->db->dbprefix('transfers')}.id as id", FALSE)
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id');
            if ($product) {
                $this->datatables->where(" (({$this->db->dbprefix('transfer_items')}.product_id = {$product})) ", NULL, FALSE);
            }
            $this->datatables->edit_column("fname", "$1 ($2)", "fname, fcode")
                ->edit_column("tname", "$1 ($2)", "tname, tcode")
                ->unset_column('fcode')
                ->unset_column('tcode');
            echo $this->datatables->generate();

        }

    }
	
	function freights()
    {
        $this->cus->checkPermissions('purchases');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('freight_report')));
        $meta = array('page_title' => lang('freights_report'), 'bc' => $bc);
        $this->core_page('reports/freights', $meta, $this->data);
    }
	
	function getFreightReports($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('purchases', TRUE);

        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$freight_tax = $this->input->get('freight_tax') ? $this->input->get('freight_tax') : NULL;
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		
        if ($xls) {
			
            $this->load->library('datatables');

			$this->db->select("
						DATE_FORMAT(".$this->db->dbprefix('purchases').".date, '%Y-%m-%d %T') as date, 
						purchases.reference_no,
						companies.company,
						projects.name,
						{$this->db->dbprefix('warehouses')}.name as wname,
						purchases.supplier, 
						purchases.grand_total,
						purchases.paid, 
						cus_purchases.grand_total - IFNULL({$this->db->dbprefix('purchases')}.paid,0) as balance,
						IF(
							cus_purchases.grand_total = cus_purchases.paid,'paid',
							IF(cus_purchases.paid > 0,'partial','pending')
						) as payment_status,
						purchases.id as id")
						->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
						->join("projects","projects.id=purchases.project_id","left")
						->join('companies', 'companies.id=purchases.biller_id', 'left')
						->from('purchases');
			$this->db->where('purchases.grand_total >', 0);			
			$this->db->where('purchases.status', 'freight');	
			if ($biller) {
                $this->db->where('purchases.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('purchases.project_id', $project);
            }
            if ($user) {
                $this->db->where('purchases.created_by', $user);
            }

            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
			if ($start_date) {
				$this->db->where('purchases.date >=', $start_date);
            }
			if ($end_date) {
				$this->db->where('purchases.date <=', $end_date);
            }
			if($freight_tax){
				if($freight_tax=="yes"){
					$this->db->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0) !=', 0);
				}else if($freight_tax=="no"){
					$this->db->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0)', 0);
				}
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('purchases.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('purchases.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
				
				if($pdf){
					$this->combine_purchases_pdf($data);
				}
		
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('freight_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('project'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('payment_status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->balance));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->payment_status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($total));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($paid));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($balance));

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);

              
				$filename = 'freight_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');

			$this->datatables
						->select("
						DATE_FORMAT(".$this->db->dbprefix('purchases').".date, '%Y-%m-%d %T') as date, 
						purchases.reference_no,
						companies.company,
						projects.name,
						{$this->db->dbprefix('warehouses')}.name as wname,
						purchases.supplier, 
						purchases.grand_total,
						purchases.paid, 
						cus_purchases.grand_total - IFNULL({$this->db->dbprefix('purchases')}.paid,0) as balance,
						IF(
							cus_purchases.grand_total = cus_purchases.paid,'paid',
							IF(cus_purchases.paid > 0,'partial','pending')
						) as payment_status,
						purchases.id as id")
						->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
						->join("projects","projects.id=purchases.project_id","left")
						->join('companies', 'companies.id=purchases.biller_id', 'left')
						->from('purchases');
			$this->datatables->where('purchases.grand_total >', 0);					
			$this->datatables->where('purchases.status', 'freight');	
			if ($biller) {
                $this->datatables->where('purchases.biller_id', $biller);
            }
			if ($project) {
                $this->datatables->where('purchases.project_id', $project);
            }
            if ($user) {
                $this->datatables->where('purchases.created_by', $user);
            }

            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('purchases.reference_no', $reference_no, 'both');
            }
			if ($start_date) {
				$this->datatables->where('purchases.date >=', $start_date);
            }
			if ($end_date) {
				$this->datatables->where('purchases.date <=', $end_date);
            }
			if($freight_tax){
				if($freight_tax=="yes"){
					$this->datatables->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0) !=', 0);
				}else if($freight_tax=="no"){
					$this->datatables->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0)', 0);
				}
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('purchases.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('purchases.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();

        }

    }
	
	function purchases()
    {
        $this->cus->checkPermissions('purchases');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('purchases_report')));
        $meta = array('page_title' => lang('purchases_report'), 'bc' => $bc);
        $this->core_page('reports/purchases', $meta, $this->data);
    }

    function purchase_freight()
    {
        $this->cus->checkPermissions('purchases');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('purchases_report')));
        $meta = array('page_title' => lang('purchases_report'), 'bc' => $bc);
        $this->core_page('reports/purchase_freight', $meta, $this->data);
    }

    function getPurchasesReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('purchases', TRUE);

        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$purchase_tax = $this->input->get('purchase_tax') ? $this->input->get('purchase_tax') : NULL;
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		
        if ($xls) {
			
			
			
			$pi = "( SELECT purchase_id, product_id, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, ' (', " . $this->db->dbprefix('purchase_items') . ".quantity, ')') SEPARATOR '\n') as item_nane from {$this->db->dbprefix('purchase_items')} ";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('purchase_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('purchase_items')}.purchase_id ) FPI";

            $this->load->library('datatables');

			$this->db->select("
						DATE_FORMAT(".$this->db->dbprefix('purchases').".date, '%Y-%m-%d %T') as date, 
						purchases.reference_no,
						purchases.biller,
						projects.name,
						{$this->db->dbprefix('warehouses')}.name as wname,
						purchases.supplier, 
						(FPI.item_nane) as iname,
						purchases.grand_total,
						abs(IFNULL(cus_purchases.return_purchase_total,0)) as return_purchase_total,
						(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0)) as paid, 
						round((cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(cus_purchases.return_purchase_total)),".$this->Settings->decimals.") as balance, 
						purchases.status, 
						IF(
							(round((cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(cus_purchases.return_purchase_total)),".$this->Settings->decimals."))=0,'paid',
							IF(
								(abs(IFNULL(cus_purchases.return_purchase_total,0)) + IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))<>0,'partial',
								'pending'
							)
						) as payment_status,
						purchases.attachment,
						purchases.id as id")
						->join('(select purchase_id,abs(paid) as return_paid from cus_purchases WHERE purchase_id > 0 AND status <> "draft" AND status <> "freight") as pur_return','pur_return.purchase_id = purchases.id','left')
						->join($pi, 'FPI.purchase_id=purchases.id', 'left')
						->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
						->join("projects","projects.id=purchases.project_id","left")
						->from('purchases');
			$this->db->where('purchases.status !=', 'returned');	
            $this->datatables->where('purchases.status !=', 'freight');    
			if ($biller) {
                $this->db->where('purchases.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('purchases.project_id', $project);
            }
            if ($user) {
                $this->db->where('purchases.created_by', $user);
            }
            if ($product) {
                $this->db->where('FPI.product_id', $product, FALSE);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
				$this->db->where('purchases.date >=', $start_date);
            }
			if ($end_date) {
				$this->db->where('purchases.date <=', $end_date);
            }
			if($purchase_tax){
				if($purchase_tax=="yes"){
					$this->db->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0) !=', 0);
				}else if($purchase_tax=="no"){
					$this->db->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0)', 0);
				}
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('purchases.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('purchases.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
				
				if($pdf){
					$this->combine_purchases_pdf($data);
				}
		
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('project'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('returned'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('purchase_status'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('payment_status'));

                $row = 2;
                $total = 0;
				$return = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->return_purchase_total));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->balance));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->status);
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->payment_status);
                    $total += $data_row->grand_total;
					$return += $data_row->return_purchase_total;
                    $paid += $data_row->paid;
                    $balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("H" . $row . ":K" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total));
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($return));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($paid));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($balance));

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
              
				$filename = 'purchase_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $pi = "( SELECT purchase_id, product_id, (GROUP_CONCAT(CONCAT({$this->db->dbprefix('purchase_items')}.product_name, '__', {$this->db->dbprefix('purchase_items')}.quantity) SEPARATOR '___')) as item_nane from {$this->db->dbprefix('purchase_items')} ";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('purchase_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('purchase_items')}.purchase_id ) FPI";

            $this->load->library('datatables');

			$this->datatables
						->select("
						purchases.id,
						DATE_FORMAT(".$this->db->dbprefix('purchases').".date, '%Y-%m-%d %T') as date, 
						purchases.reference_no,
						purchases.biller,
						projects.name,
						{$this->db->dbprefix('warehouses')}.name as wname,
						purchases.supplier, 
						(FPI.item_nane) as iname,
						purchases.grand_total,
						abs(IFNULL(cus_purchases.return_purchase_total,0)) as return_purchase_total,
						(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0)) as paid, 
						round((cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(cus_purchases.return_purchase_total)),".$this->Settings->decimals.") as balance, 
						purchases.status, 
						IF(
							(round((cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(cus_purchases.return_purchase_total)),".$this->Settings->decimals."))=0,'paid',
							IF(
								(abs(IFNULL(cus_purchases.return_purchase_total,0)) + IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))<>0,'partial',
								'pending'
							)
						) as payment_status,
						purchases.attachment,
						purchases.id as id")
						->join('(select purchase_id,abs(paid) as return_paid from cus_purchases WHERE purchase_id > 0 AND status <> "draft" AND status <> "freight") as pur_return','pur_return.purchase_id = purchases.id','left')
						->join($pi, 'FPI.purchase_id=purchases.id', 'left')
						->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
						->join("projects","projects.id=purchases.project_id","left")
						->from('purchases');
			$this->datatables->where('purchases.status !=', 'returned');	
            $this->datatables->where('purchases.status !=', 'freight');    
			if ($biller) {
                $this->datatables->where('purchases.biller_id', $biller);
            }
			if ($project) {
                $this->datatables->where('purchases.project_id', $project);
            }
            if ($user) {
                $this->datatables->where('purchases.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FPI.product_id', $product, FALSE);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('purchases.reference_no', $reference_no, 'both');
            }
			if ($start_date) {
				$this->datatables->where('purchases.date >=', $start_date);
            }
			if ($end_date) {
				$this->datatables->where('purchases.date <=', $end_date);
            }
			if($purchase_tax){
				if($purchase_tax=="yes"){
					$this->datatables->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0) !=', 0);
				}else if($purchase_tax=="no"){
					$this->datatables->where('IFNULL('.$this->db->dbprefix("purchases").'.order_tax,0)', 0);
				}
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('purchases.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('purchases.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();

        }

    }

    function getPurchasesFreightReport($pdf = NULL, $xls = NULL)
    {

        $this->cus->checkPermissions('purchases', TRUE);

        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        
        if ($xls) {
            
            
            
            $pi = "( SELECT purchase_id, product_id, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, ' (', " . $this->db->dbprefix('purchase_items') . ".quantity, ')') SEPARATOR '\n') as item_nane from {$this->db->dbprefix('purchase_items')} ";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('purchase_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('purchase_items')}.purchase_id ) FPI";

            $this->load->library('datatables');

            $this->db->select("
                        DATE_FORMAT(b.date, '%Y-%m-%d %T') as date, 
                        b.reference_no,
                        purchases.reference_no as pur_ref,
                        b.biller,
                        projects.name,
                        {$this->db->dbprefix('warehouses')}.name as wname,
                        b.supplier, 
                        (FPI.item_nane) as iname,
                        b.grand_total,
                        (IFNULL(b.paid,0) - IFNULL(return_paid,0)) as paid, 
                        round((b.grand_total-(IFNULL(b.paid,0) - IFNULL(return_paid,0))-abs(b.return_purchase_total)),".$this->Settings->decimals.") as balance, 
                        IF(
                            (round((b.grand_total-(IFNULL(b.paid,0) - IFNULL(return_paid,0))-abs(b.return_purchase_total)),".$this->Settings->decimals."))=0,'paid',
                            IF(
                                (abs(IFNULL(b.return_purchase_total,0)) + IFNULL(b.paid,0) - IFNULL(return_paid,0))<>0,'partial',
                                'pending'
                            )
                        ) as payment_status,
                        b.attachment,
                        b.id as id")
                        ->join('(select purchase_id,abs(paid) as return_paid from cus_purchases WHERE purchase_id > 0 AND status <> "draft" AND status <> "freight") as pur_return','pur_return.purchase_id = purchases.id','left')
                        ->join($pi, 'FPI.purchase_id=purchases.id', 'left')
                        ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                        ->join("projects","projects.id=purchases.project_id","left")
                        ->join("purchases AS b","b.purchase_id=purchases.id")
                        ->from('purchases');
            $this->db->where('b.status', 'freight');    
            if ($biller) {
                $this->db->where('b.biller_id', $biller);
            }
            if ($project) {
                $this->db->where('b.project_id', $project);
            }
            if ($user) {
                $this->db->where('b.created_by', $user);
            }
            if ($product) {
                $this->db->where('FPI.product_id', $product, FALSE);
            }
            if ($supplier) {
                $this->db->where('b.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('b.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('b.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where('b.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('b.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('b.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                
                if($pdf){
                    $this->combine_purchases_pdf($data);
                }
        
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('pur_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('payment_status'));

                $row = 2;
                $total = 0;
                $return = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->pur_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->balance));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->payment_status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("H" . $row . ":J" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($paid));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($balance));

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
             
				$filename = 'purchase_freight_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $pi = "( SELECT purchase_id, product_id, (GROUP_CONCAT(CONCAT({$this->db->dbprefix('purchase_items')}.product_name, '__', {$this->db->dbprefix('purchase_items')}.quantity) SEPARATOR '___')) as item_nane from {$this->db->dbprefix('purchase_items')} ";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('purchase_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('purchase_items')}.purchase_id ) FPI";

            $this->load->library('datatables');

            $this->datatables
                        ->select("
                        DATE_FORMAT(b.date, '%Y-%m-%d %T') as date, 
                        b.reference_no,
                        purchases.reference_no as pur_ref,
                        b.biller,
                        projects.name,
                        {$this->db->dbprefix('warehouses')}.name as wname,
                        b.supplier, 
                        (FPI.item_nane) as iname,
                        b.grand_total,
                        (IFNULL(b.paid,0) - IFNULL(return_paid,0)) as paid, 
                        round((b.grand_total-(IFNULL(b.paid,0) - IFNULL(return_paid,0))-abs(b.return_purchase_total)),".$this->Settings->decimals.") as balance, 
                        IF(
                            (round((b.grand_total-(IFNULL(b.paid,0) - IFNULL(return_paid,0))-abs(b.return_purchase_total)),".$this->Settings->decimals."))=0,'paid',
                            IF(
                                (abs(IFNULL(b.return_purchase_total,0)) + IFNULL(b.paid,0) - IFNULL(return_paid,0))<>0,'partial',
                                'pending'
                            )
                        ) as payment_status,
                        b.attachment,
                        b.id as id")
                        ->join('(select purchase_id,abs(paid) as return_paid from cus_purchases WHERE purchase_id > 0 AND status <> "draft" AND status <> "freight") as pur_return','pur_return.purchase_id = purchases.id','left')
                        ->join($pi, 'FPI.purchase_id=purchases.id', 'left')
                        ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                        ->join("projects","projects.id=purchases.project_id","left")
                        ->join("purchases AS b","b.purchase_id=purchases.id")
                        ->from('purchases');
            $this->datatables->where('b.status', 'freight');    
            if ($biller) {
                $this->datatables->where('b.biller_id', $biller);
            }
            if ($project) {
                $this->datatables->where('b.project_id', $project);
            }
            if ($user) {
                $this->datatables->where('b.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FPI.product_id', $product, FALSE);
            }
            if ($supplier) {
                $this->datatables->where('b.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('b.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('b.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where('b.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('b.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('b.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();

        }

    }
	
	public function combine_purchases_pdf($data = NULL)
    {
        $this->cus->checkPermissions('pdf');
		$this->data['rows'] = $data;
		$this->data['supplier'] = $this->site->getCompanyByID($this->data['rows'][0]->supplier_id);
        $inv_html = $this->load->view($this->theme . 'reports/combine_purchases_pdf', $this->data, true);
        $name = lang("purchases_report").time() . ".pdf";
		$html[] = array(
                'content' => $inv_html,
                'footer' => '',
            );
        $file = $this->cus->generate_pdf($html, $name, "S");
		if($file){
			redirect(base_url($file));
		}
    }
	
	public function combine_sales_pdf($data = NULL)
    {
        $this->cus->checkPermissions('pdf');
		$this->data['rows'] = $data;
		$this->data['customer'] = $this->site->getCompanyByID($this->data['rows'][0]->customer_id);
        $inv_html = $this->load->view($this->theme . 'reports/combine_sales_pdf', $this->data, true);
        $name = lang("sales_report").time() . ".pdf";
		
        $html[] = array(
                'content' => $inv_html,
                'footer' => '',
            );
        $file = $this->cus->generate_pdf($html, $name, "S");
		if($file){
			redirect(base_url($file));
		}
    }

    function payments()
    {
        $this->cus->checkPermissions('payments');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['pos_settings'] = POS ? $this->reports_model->getPOSSetting('biller') : FALSE;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('payments_report')));
        $meta = array('page_title' => lang('payments_report'), 'bc' => $bc);
        $this->core_page('reports/payments', $meta, $this->data);
    }

	function getPaymentsReportCus($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('payments', TRUE);

        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
        $sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $purchase_ref = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : NULL;
        $card = $this->input->get('card') ? $this->input->get('card') : NULL;
        $cheque = $this->input->get('cheque') ? $this->input->get('cheque') : NULL;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                ->select("" . $this->db->dbprefix('payments') . ".date, 
				" . $this->db->dbprefix('payments') . ".reference_no as payment_ref, 
				" . $this->db->dbprefix('sales') . ".reference_no as sale_ref, 
				" . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, 
				" . $this->db->dbprefix('expenses') . ".reference as expense_ref, 
				DATE_FORMAT(IFNULL(IFNULL({$this->db->dbprefix('sales')}.date,{$this->db->dbprefix('purchases')}.date),{$this->db->dbprefix('expenses')}.date),'%Y-%m-%d %T') as reference_date,
				IFNULL(IFNULL({$this->db->dbprefix('sales')}.customer,{$this->db->dbprefix('purchases')}.supplier),{$this->db->dbprefix('expenses')}.supplier) as cust_name,
				CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				abs(IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) + IFNULL(cus_payments.penalty_paid,0)) as amount,
				IFNULL(cus_payments.discount,0) as discount, 
				payments.type")
                ->from('payments')
				->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
				->join('expenses', 'payments.expense_id=expenses.id', 'left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->where('payments.installment_id IS NULL')
                ->where('sales.rental_id IS NULL')
                ->where('IFNULL(transaction,"") !="RentalDeposit"')
                ->where('IFNULL(transaction,"") !="ReturnRentalDeposit"')
                ->where('IFNULL(transaction,"") !="AgencyPayment"')
                ->group_by('payments.id')
                ->order_by('sales.reference_no desc');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
				$this->db->where('purchases.supplier_id="'.$supplier.'" OR expenses.supplier_id="'.$supplier.'"');
            }
            if ($biller) {
                $this->db->where('(sales.biller_id = "'.$biller.'" OR purchases.biller_id = "'.$biller.'" OR expenses.biller_id = "'.$biller.'")');
            }
			if ($project) {
                $this->db->where('sales.project_id', $project);
				$this->db->or_where('purchases.project_id', $project);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(sales.warehouse_id IN '.$warehouse_ids.' OR purchases.warehouse_id IN '.$warehouse_ids.' OR expenses.warehouse_id IN '.$warehouse_ids.')');
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('expense_reference'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('date_ref'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('name'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('amount'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('type'));

                $row = 2;
                $total = 0;
				$discount = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->expense_ref);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->hrld($data_row->reference_date));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->cust_name);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->amount);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->discount);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->type);
					
                    if ($data_row->type == 'returned' || $data_row->type == 'sent' || $data_row->type == 'pawn_sent') {
                        $total -= abs($data_row->amount);
                    } else {
                        $total += $data_row->amount;
                    }
					$discount += $data_row->discount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":K" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $total);
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $discount);
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
               
				$filename = 'payments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
				".$this->db->dbprefix('payments').".reference_no as payment_ref, 
				".$this->db->dbprefix('sales').".reference_no as sale_ref, 
				IFNULL(".$this->db->dbprefix('purchases').".reference_no," . $this->db->dbprefix('expenses') . ".reference) as purchase_ref,
				" . $this->db->dbprefix('expenses') . ".reference as expense_ref, 
				DATE_FORMAT(IFNULL(IFNULL({$this->db->dbprefix('sales')}.date,{$this->db->dbprefix('purchases')}.date),{$this->db->dbprefix('expenses')}.date),'%Y-%m-%d %T') as reference_date,
				IFNULL(IFNULL({$this->db->dbprefix('sales')}.customer,{$this->db->dbprefix('purchases')}.supplier),{$this->db->dbprefix('expenses')}.supplier) as cust_name,
				CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				abs(IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) + IFNULL(cus_payments.penalty_paid,0)) as amount,
				abs(IFNULL(cus_payments.discount,0)) as discount, 
				payments.type, 
				{$this->db->dbprefix('payments')}.id as id,
				{$this->db->dbprefix('payments')}.sale_id as sale_id,
				{$this->db->dbprefix('payments')}.transaction")
                ->from('payments')
				->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
				->join('expenses', 'payments.expense_id=expenses.id', 'left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->where('payments.installment_id IS NULL')
                ->where('sales.rental_id IS NULL')
                ->where('IFNULL(transaction,"") !="RentalDeposit"')
                ->where('IFNULL(transaction,"") !="ReturnRentalDeposit"')
                ->where('IFNULL(transaction,"") !="AgencyPayment"')
                ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
				$this->datatables->where('purchases.supplier_id="'.$supplier.'" OR expenses.supplier_id="'.$supplier.'"');
            }
            if ($biller) {
                $this->datatables->where('(sales.biller_id = "'.$biller.'" OR purchases.biller_id = "'.$biller.'" OR expenses.biller_id = "'.$biller.'")');
            }
			if ($project) {
                $this->datatables->where('sales.project_id', $project);
				$this->datatables->or_where('purchases.project_id', $project);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(sales.warehouse_id IN '.$warehouse_ids.' OR purchases.warehouse_id IN '.$warehouse_ids.' OR expenses.warehouse_id IN '.$warehouse_ids.')');
			}

            echo $this->datatables->generate();

        }

    }
	
    function getPaymentsReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('payments', TRUE);

        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
        $sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $purchase_ref = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : NULL;
        $card = $this->input->get('card') ? $this->input->get('card') : NULL;
        $cheque = $this->input->get('cheque') ? $this->input->get('cheque') : NULL;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
			
			$this->db
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date,
					".$this->db->dbprefix('payments').".reference_no as payment_ref,
					" . $this->db->dbprefix('sales') . ".reference_no as sale_ref,
					IFNULL(".$this->db->dbprefix('purchases').".reference_no,".$this->db->dbprefix('expenses').".reference) as purchase_ref,
					DATE_FORMAT(IFNULL({$this->db->dbprefix('expenses')}.date,IFNULL({$this->db->dbprefix('sales')}.date,{$this->db->dbprefix('purchases')}.date)),'%Y-%m-%d %T') AS reference_date,
					IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by, IFNULL({$this->db->dbprefix('payments')}.amount,0) as amount , IFNULL(discount,0) as discount, payments.type")
                ->from('payments')
				->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
				->join('expenses', 'payments.expense_id=expenses.id', 'left')
				->where('payments.installment_id IS NULL')
                ->group_by('payments.id');
			
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
				$this->db->where('purchases.supplier_id="'.$supplier.'" OR expenses.supplier_id="'.$supplier.'"');
            }
            if ($biller) {
				$this->db->where('purchases.biller_id="'.$biller.'" OR purchases.biller_id="'.$biller.'" OR expenses.biller_id="'.$biller.'"');
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(sales.warehouse_id IN '.$warehouse_ids.' OR purchases.warehouse_id IN '.$warehouse_ids.' OR expenses.warehouse_id IN '.$warehouse_ids.')');
			}
			

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('date_ref'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('amount'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('type'));

                $row = 2;
                $total = 0;
				$discount = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->hrld($data_row->reference_date));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->amount);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->discount);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= abs($data_row->amount);
                    } else {
                        $total += $data_row->amount;
                    }
					$discount += $data_row->discount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $discount);
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
            
				$filename = 'payments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date,
					".$this->db->dbprefix('payments').".reference_no as payment_ref,
					" . $this->db->dbprefix('sales') . ".reference_no as sale_ref,
					IFNULL(".$this->db->dbprefix('purchases').".reference_no,".$this->db->dbprefix('expenses').".reference) as purchase_ref,
					DATE_FORMAT(IFNULL({$this->db->dbprefix('expenses')}.date,IFNULL({$this->db->dbprefix('sales')}.date,{$this->db->dbprefix('purchases')}.date)),'%Y-%m-%d %T') AS reference_date,
					IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by, IFNULL({$this->db->dbprefix('payments')}.amount,0) as amount , IFNULL(discount,0) as discount, payments.type, {$this->db->dbprefix('payments')}.id as id")
                ->from('payments')
				->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
				->join('expenses', 'payments.expense_id=expenses.id', 'left')
				->where('payments.installment_id IS NULL')
                ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
				$this->datatables->where('purchases.supplier_id="'.$supplier.'" OR expenses.supplier_id="'.$supplier.'"');
            }
            if ($biller) {
				$this->datatables->where('purchases.biller_id="'.$biller.'" OR purchases.biller_id="'.$biller.'" OR expenses.biller_id="'.$biller.'"');
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(sales.warehouse_id IN '.$warehouse_ids.' OR purchases.warehouse_id IN '.$warehouse_ids.' OR expenses.warehouse_id IN '.$warehouse_ids.')');
			}

            echo $this->datatables->generate();

        }

    }
    
    function customers()
    {
        $this->cus->checkPermissions('customers');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();		
		$this->data['salemans'] = $this->site->getSalemans();		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->core_page('reports/customers', $meta, $this->data);
    }

    function getCustomers($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('customers', TRUE);
		
        if ($pdf || $xls) {

			$where = 'WHERE 1=1';
			if ($this->input->get('start_date')) {
				$where .= ' AND date(date) >= "'.$this->cus->fld($this->input->get('start_date')).'"';
			}
			if ($this->input->get('end_date')) {
				$where .= ' AND date(date) <= "'.$this->cus->fld($this->input->get('end_date'),false,1).'"';
			}
			
			if($this->input->get('saleman')){
				$where .= ' AND saleman_id = '.$this->input->get('saleman');
			}
			
			if($this->input->get('created_by')){
				$where .= ' AND created_by = '.$this->input->get('created_by');
			}
			
			if($this->input->get('biller')){
				$where .= ' AND biller_id = '.$this->input->get('biller');
			}
			
			if($this->input->get('warehouse')){
				$where .= ' AND warehouse_id = '.$this->input->get('warehouse');
			}
			
			if($this->input->get('customer')){
				$where .= ' AND customer_id = '.$this->input->get('customer');
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$where .= ' AND cus_sales.created_by = '.$this->session->userdata('user_id');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$where .= ' AND biller_id = '.$this->session->userdata('biller_id');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$where .= " AND warehouse_id IN ".$warehouse_ids;
			}
            
			$s = "( SELECT customer_id, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid_amount), 0) as paid, COALESCE(sum(discount_amount), 0) as discount, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid_amount), 0) - COALESCE(sum(discount_amount), 0)) as balance from {$this->db->dbprefix('sales')} 
					LEFT JOIN (
						SELECT
							sale_id,
							IFNULL(sum(amount), 0) AS paid_amount,
							IFNULL(sum(discount), 0) AS discount_amount
						FROM
							".$this->db->dbprefix('payments')."
						GROUP BY
							sale_id
					) AS cus_payments ON `cus_payments`.`sale_id` = ".$this->db->dbprefix('sales').".`id`
					
					{$where} GROUP BY {$this->db->dbprefix('sales')}.customer_id ) FS";

            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, code, FS.total, FS.total_amount, FS.paid, FS.discount, FS.balance", FALSE)
                ->from("companies")
                ->join($s, 'FS.customer_id=companies.id')
				->where('companies.group_name', 'customer')
				->group_by('companies.id');
				
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));

                $row = 2;
				$grand_total = 0;
				$grand_paid = 0;
				$grand_discount = 0;
				$grand_balance = 0;
                foreach ($data as $data_row) {
					$grand_total += $data_row->total_amount;
					$grand_paid += $data_row->paid;
					$grand_discount += $data_row->discount;
					$grand_balance += $data_row->balance;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->discount));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->balance));
                    $row++;
                }
				
				$this->excel->getActiveSheet()->getStyle("F" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($grand_total));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($grand_paid));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($grand_discount));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($grand_balance));

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
			
				$filename = 'customers_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			
			$where = 'WHERE 1=1';
			if ($this->input->get('start_date')) {
				$where .= ' AND date(date) >= "'.$this->cus->fld($this->input->get('start_date')).'"';
			}
			
			if ($this->input->get('end_date')) {
				$where .= ' AND date(date) <= "'.$this->cus->fld($this->input->get('end_date'),false,1).'"';
			}
			
			if($this->input->get('saleman')){
				$where .= ' AND saleman_id = '.$this->input->get('saleman');
			}
			
			if($this->input->get('created_by')){
				$where .= ' AND created_by = '.$this->input->get('created_by');
			}
			
			if($this->input->get('biller')){
				$where .= ' AND biller_id = '.$this->input->get('biller');
			}
			
			if($this->input->get('warehouse')){
				$where .= ' AND warehouse_id = '.$this->input->get('warehouse');
			}
			
			if($this->input->get('customer')){
				$where .= ' AND customer_id = '.$this->input->get('customer');
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$where .= ' AND cus_sales.created_by = '.$this->session->userdata('user_id');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$where .= ' AND biller_id = '.$this->session->userdata('biller_id');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$where .= " AND warehouse_id IN ".$warehouse_ids;
			}

			$s = "( SELECT customer_id, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid_amount), 0) as paid, COALESCE(sum(discount_amount), 0) as discount, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid_amount), 0) - COALESCE(sum(discount_amount), 0)) as balance from {$this->db->dbprefix('sales')} 
					LEFT JOIN (
						SELECT
							sale_id,
							IFNULL(sum(amount), 0) AS paid_amount,
							IFNULL(sum(discount), 0) AS discount_amount
						FROM
							".$this->db->dbprefix('payments')."
						GROUP BY
							sale_id
					) AS cus_payments ON `cus_payments`.`sale_id` = ".$this->db->dbprefix('sales').".`id`
					
					{$where} GROUP BY {$this->db->dbprefix('sales')}.customer_id ) FS";

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as id,code, company, name, phone,  FS.total, FS.total_amount, FS.paid, FS.discount, FS.balance", FALSE)
                ->from("companies")
                ->join($s, 'FS.customer_id=companies.id')
				->where('companies.group_name', 'customer')
				->group_by('companies.id');
                $this->datatables->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/customer_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id");
            echo $this->datatables->generate();
        }
    }
	
	public function print_customer_sales()
    {
		$this->cus->checkPermissions('customers', TRUE);
		$this->data['biller'] = $this->site->getCompanyByID($this->Settings->default_biller);
        $this->load->view($this->theme . 'reports/print_customer_sales', $this->data);
    }
	
	public function ar_customer()
	{
		$this->cus->checkPermissions('ar_customer');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['customers'] = $this->site->getAllCompanies('customer');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('ar_customer')));
		$meta = array('page_title' => lang('ar_customer'), 'bc' => $bc);	
		$this->core_page('reports/ar_customer',$meta,$this->data);
	}

	public function ap_supplier()
	{
		$this->cus->checkPermissions('ap_supplier');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['suppliers'] = $this->site->getAllCompanies('supplier');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('ap_supplier')));
		$meta = array('page_title' => lang('ap_supplier'), 'bc' => $bc);	
		$this->core_page('reports/ap_supplier',$meta,$this->data);
	}

    function customer_report($user_id = NULL)
    {
        $this->cus->checkPermissions('customers', TRUE);
        if (!$user_id) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/customers');
        }

        $this->data['sales'] = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales'] = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes'] = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');

        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');

        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customers_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->core_page('reports/customer_report', $meta, $this->data);

    }

    function suppliers()
    {
        $this->cus->checkPermissions('suppliers');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('suppliers_report')));
        $meta = array('page_title' => lang('suppliers_report'), 'bc' => $bc);
        $this->core_page('reports/suppliers', $meta, $this->data);
    }

    function getSuppliers($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('suppliers', TRUE);
        if ($xls) {
			$where = '';
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$where .= ' AND created_by = '.$this->session->userdata('user_id');
			}
			if ($this->input->get('start_date')) {
				$where .= ' AND date(date) >= "'.$this->cus->fld($this->input->get('start_date')).'"';
			}
			if ($this->input->get('end_date')) {
				$where .= ' AND date(date) <= "'.$this->cus->fld($this->input->get('end_date'),false,1).'"';
			}
			if($this->input->get('created_by')){
				$where .= ' AND created_by = '.$this->input->get('created_by');
			}
			if($this->input->get('biller')){
				$where .= ' AND biller_id = '.$this->input->get('biller');
			}
			if($this->input->get('warehouse')){
				$where .= ' AND warehouse_id = '.$this->input->get('warehouse');
			}
			if($this->input->get('supplier')){
				$where .= ' AND supplier_id = '.$this->input->get('supplier');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$where .= ' AND biller_id = '.$this->session->userdata('biller_id');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$where .= " AND warehouse_id IN ".$warehouse_ids;
			}
			
            $p = "( SELECT supplier_id, count(" . $this->db->dbprefix('purchases') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance from {$this->db->dbprefix('purchases')} WHERE 1=1 {$where} GROUP BY {$this->db->dbprefix('purchases')}.supplier_id ) FP";
			
            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, code, (IFNULL(FP.total,0) + IFNULL(cus_expenses.expense_total,0)) as total, (IFNULL(FP.total_amount,0) + IFNULL(cus_expenses.expense_amount,0)) as total_amount, (IFNULL(FP.paid,0) + IFNULL(cus_expenses.expense_paid,0)) as paid, (IFNULL(FP.balance,0) + IFNULL(cus_expenses.expense_balance,0)) as balance", FALSE)
                ->from("companies")
				->join("(select supplier_id,count(id) AS expense_total,sum(grand_total) AS expense_amount,sum(IFNULL(paid,0)) AS expense_paid,sum(grand_total - IFNULL(paid,0)) AS expense_balance FROM ".$this->db->dbprefix('expenses')." WHERE status = 'approved' GROUP BY supplier_id) as cus_expenses","cus_expenses.supplier_id = companies.id","left")
				->join($p, 'FP.supplier_id=companies.id','left')
                ->where('companies.group_name', 'supplier')
                ->where('(IFNULL(FP.total,0) + IFNULL(cus_expenses.expense_total,0)) >',0)
                ->order_by('companies.company asc')
                ->group_by('companies.id');
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where('purchases.created_by', $this->session->userdata('user_id'));
			}
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
            if (!empty($data)) {
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('suppliers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_purchases'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->total_amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->balance);
                    $row++;
                }
			
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
             
				$filename = 'suppliers_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			$where = '';
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$where .= ' AND created_by = '.$this->session->userdata('user_id');
			}
			if ($this->input->get('start_date')) {
				$where .= ' AND date(date) >= "'.$this->cus->fld($this->input->get('start_date')).'"';
			}
			if ($this->input->get('end_date')) {
				$where .= ' AND date(date) <= "'.$this->cus->fld($this->input->get('end_date'),false,1).'"';
			}
			if($this->input->get('created_by')){
				$where .= ' AND created_by = '.$this->input->get('created_by');
			}
			if($this->input->get('biller')){
				$where .= ' AND biller_id = '.$this->input->get('biller');
			}
			if($this->input->get('warehouse')){
				$where .= ' AND warehouse_id = '.$this->input->get('warehouse');
			}
			if($this->input->get('supplier')){
				$where .= ' AND supplier_id = '.$this->input->get('supplier');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$where .= ' AND biller_id = '.$this->session->userdata('biller_id');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$where .= " AND warehouse_id IN ".$warehouse_ids;
			}
			
            $p = "( SELECT supplier_id, count(" . $this->db->dbprefix('purchases') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance from {$this->db->dbprefix('purchases')} WHERE 1=1 {$where} GROUP BY {$this->db->dbprefix('purchases')}.supplier_id ) FP";

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies').".id as id, code, company, name, phone,  (IFNULL(FP.total,0) + IFNULL(cus_expenses.expense_total,0)) as total, (IFNULL(FP.total_amount,0) + IFNULL(cus_expenses.expense_amount,0)) as total_amount, (IFNULL(FP.paid,0) + IFNULL(cus_expenses.expense_paid,0)) as paid, (IFNULL(FP.balance,0) + IFNULL(cus_expenses.expense_balance,0)) as balance", FALSE)
                ->from("companies")
                ->join($p, 'FP.supplier_id=companies.id','left')
				->join("(select supplier_id,count(id) AS expense_total,sum(grand_total) AS expense_amount,sum(IFNULL(paid,0)) AS expense_paid,sum(grand_total - IFNULL(paid,0)) AS expense_balance FROM ".$this->db->dbprefix('expenses')." WHERE status = 'approved' GROUP BY supplier_id) as cus_expenses","cus_expenses.supplier_id = companies.id","left")
                ->where('companies.group_name', 'supplier')
                ->where('(IFNULL(FP.total,0) + IFNULL(cus_expenses.expense_total,0)) >',0)
				->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/supplier_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id");
				
            echo $this->datatables->generate();

        }

    }
	
	public function print_supplier_purchases()
    {
		$this->cus->checkPermissions('suppliers', TRUE);
		$this->data['biller'] = $this->site->getCompanyByID($this->Settings->default_biller);
        $this->load->view($this->theme . 'reports/print_supplier_purchases', $this->data);
    }
	
    function supplier_report($user_id = NULL)
    {
        $this->cus->checkPermissions('suppliers', TRUE);
        if (!$user_id) {
            $this->session->set_flashdata('error', lang("no_supplier_selected"));
            redirect('reports/suppliers');
        }

        $this->data['grandtotal_purchases'] = $this->reports_model->getPurchasesGrandTotals($user_id);
        $this->data['purchases'] = $this->reports_model->getPurchasesTotals($user_id);
        $this->data['purchases_return'] = $this->reports_model->getReturnPurchasesTotals($user_id);
		$this->data['expenses'] = $this->reports_model->getExpensesTotals($user_id);
        $this->data['total_purchases'] = $this->reports_model->getSupplierPurchases($user_id);
        $this->data['total_expense'] = $this->reports_model->getSupplierExpenses($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');

        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');

        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('suppliers_report')));
        $meta = array('page_title' => lang('suppliers_report'), 'bc' => $bc);
        $this->core_page('reports/supplier_report', $meta, $this->data);

    }
	
	public function combine_supplier_pdf($data = NULL)
    {
        $this->cus->checkPermissions('pdf');
		$this->data['rows'] = $data;
		
        $inv_html = $this->load->view($this->theme . 'reports/combine_suppliers_pdf', $this->data, true);
        $name = lang("suppliers_report").time() . ".pdf";
		$html[] = array(
                'content' => $inv_html,
                'footer' => '',
            );
        $file = $this->cus->generate_pdf($html, $name, "S");
		if($file){
			redirect(base_url($file));
		}
    }
	
    function users()
    {
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('staff_report')));
        $meta = array('page_title' => lang('staff_report'), 'bc' => $bc);
        $this->core_page('reports/users', $meta, $this->data);
    }

    function getUsers()
    {
        $this->load->library('datatables');
        $this->datatables
            ->select($this->db->dbprefix('users').".id as id, first_name, last_name, email, company, ".$this->db->dbprefix('groups').".name, active")
            ->from("users")
            ->join('groups', 'users.group_id=groups.id', 'left')
            ->group_by('users.id')
			->where('users.saleman',0)
            ->where('company_id', NULL);
        if (!$this->Owner) {
            $this->datatables->where('group_id !=', 1);
        }
        $this->datatables
            ->edit_column('active', '$1__$2', 'active, id')
            ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . site_url('reports/staff_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id")
            ->unset_column('id');
        echo $this->datatables->generate();
    }

    function staff_report($user_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $cal = 0)
    {

        if (!$user_id) {
            $this->session->set_flashdata('error', lang("no_user_selected"));
            redirect('reports/users');
        }
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['purchases'] = $this->reports_model->getStaffPurchases($user_id);
        $this->data['sales'] = $this->reports_model->getStaffSales($user_id);
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getWarehouses();

        if (!$year) {
            $year = date('Y');
        }
        if (!$month || $month == '#monthly-con') {
            $month = date('m');
        }
        if ($pdf) {
            if ($cal) {
                $this->monthly_sales($year, $pdf, $user_id);
            } else {
                $this->daily_sales($year, $month, $pdf, $user_id);
            }
        }
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/staff_report/'.$user_id),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<div class="table-responsive"><table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable reports-table">{/table_open}
		{heading_row_start}<tr>{/heading_row_start}
		{heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
		{heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
		{heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
		{heading_row_end}</tr>{/heading_row_end}
		{week_row_start}<tr>{/week_row_start}
		{week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
		{week_row_end}</tr>{/week_row_end}
		{cal_row_start}<tr class="days">{/cal_row_start}
		{cal_cell_start}<td class="day">{/cal_cell_start}
		{cal_cell_content}
		<div class="day_num">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content}
		{cal_cell_content_today}
		<div class="day_num highlight">{day}</div>
		<div class="content">{content}</div>
		{/cal_cell_content_today}
		{cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
		{cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
		{cal_cell_blank}&nbsp;{/cal_cell_blank}
		{cal_cell_end}</td>{/cal_cell_end}
		{cal_row_end}</tr>{/cal_row_end}
		{table_close}</table></div>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $this->reports_model->getStaffDailySales($user_id, $year, $month);

        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("discount") . "</td><td>" . $this->cus->formatMoney($sale->discount) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->cus->formatMoney($sale->tax1) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->cus->formatMoney($sale->tax2) . "</td></tr><tr><td>" . lang("total") . "</td><td>" . $this->cus->formatMoney($sale->total) . "</td></tr></table>";
            }
        } else {
            $daily_sale = array();
        }
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        if ($this->input->get('pdf')) {

        }
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        $this->data['msales'] = $this->reports_model->getStaffMonthlySales($user_id, $year);
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('staff_report')));
        $meta = array('page_title' => lang('staff_report'), 'bc' => $bc);
        $this->core_page('reports/staff_report', $meta, $this->data);

    }

    function getUserLogins($id = NULL, $pdf = NULL, $xls = NULL)
    {
        if ($this->input->get('start_date')) {
            $login_start_date = $this->input->get('start_date');
        } else {
            $login_start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $login_end_date = $this->input->get('end_date');
        } else {
            $login_end_date = NULL;
        }
        if ($login_start_date) {
            $login_start_date = $this->cus->fld($login_start_date);
            $login_end_date = $login_end_date ? $this->cus->fld($login_end_date) : date('Y-m-d H:i:s');
        }
        if ($xls) {

            $this->db
                ->select("login, ip_address, time")
                ->from("user_logins")
                ->where('user_id', $id)
                ->order_by('time desc');
            if ($login_start_date) {
                $this->db->where("time BETWEEN '{$login_start_date}' and '{$login_end_date}'", NULL, FALSE);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('staff_login_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('ip_address'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('time'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->login);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->ip_address);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->hrld($data_row->time));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);

              
				$filename = 'staff_login_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("login, ip_address, DATE_FORMAT(time, '%Y-%m-%d %T') as time")
                ->from("user_logins")
                ->where('user_id', $id);
            if ($login_start_date) {
                $this->datatables->where("time BETWEEN '{$login_start_date}' and '{$login_end_date}'", NULL, FALSE);
            }
            echo $this->datatables->generate();

        }

    }

    function getCustomerLogins($id = NULL)
    {
        if ($this->input->get('login_start_date')) {
            $login_start_date = $this->input->get('login_start_date');
        } else {
            $login_start_date = NULL;
        }
        if ($this->input->get('login_end_date')) {
            $login_end_date = $this->input->get('login_end_date');
        } else {
            $login_end_date = NULL;
        }
        if ($login_start_date) {
            $login_start_date = $this->cus->fld($login_start_date);
            $login_end_date = $login_end_date ? $this->cus->fld($login_end_date) : date('Y-m-d H:i:s');
        }
        $this->load->library('datatables');
        $this->datatables
            ->select("login, ip_address, time")
            ->from("user_logins")
            ->where('customer_id', $id);
        if ($login_start_date) {
            $this->datatables->where('time BETWEEN "' . $login_start_date . '" and "' . $login_end_date . '"');
        }
        echo $this->datatables->generate();
    }

    function profit_loss()
    {
        $this->cus->checkPermissions('profit_loss');
		
		
		if($this->input->post('start_date')){
			$start_date =  $this->cus->fld($this->input->post('start_date'));
		}else{
			$start_date = date('Y-m-d');
		}
		
		if($this->input->post('end_date')){
			$end_date =  $this->cus->fld($this->input->post('end_date'),false,1);
		}else{
			$end_date = date('Y-m-d');
		}
		
		if($this->input->post('warehouse')){
			$warehouse =  $this->input->post('warehouse');
		}else{
			$warehouse = false;
		}
		
		if($this->input->post('biller')){
			$biller =  $this->input->post('biller');
		}else{
			$biller = false;
		}
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
		if($this->input->post('project')){
			$project =  $this->input->post('project');
		}else{
			$project = false;
		}

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['total_purchases'] = $this->reports_model->getTotalPurchases($start_date, $end_date, $warehouse, $biller, $project);
		$this->data['total_freight'] = $this->reports_model->getTotalFreights($start_date, $end_date, $warehouse, $biller, $project);
        $this->data['total_sales'] = $this->reports_model->getTotalSales($start_date, $end_date, $warehouse, $biller, $project);
		$this->data['total_gross_margin'] = $this->reports_model->getTotalGrossMargin($start_date, $end_date, $warehouse, $biller, $project);
        $this->data['total_expenses'] = $this->reports_model->getTotalExpenses($start_date, $end_date, $warehouse, $biller, $project);
		$this->data['total_expenses_amount'] = $this->reports_model->getTotalExpensesAmount($start_date, $end_date, $warehouse, $biller, $project);
        $this->data['total_paid'] = $this->reports_model->getTotalPaidAmount($start_date, $end_date, $warehouse, $biller, $project);
        $this->data['total_received'] = $this->reports_model->getTotalReceivedAmount($start_date, $end_date, $warehouse, $biller, $project);
        $this->data['total_returned'] = $this->reports_model->getTotalReturnedAmount($start_date, $end_date, $warehouse, $biller, $project);
		$this->data['total_purchase_returned'] = $this->reports_model->getTotalPurchaseReturnedAmount($start_date, $end_date, $warehouse, $biller, $project);
		
		if($this->config->item('pawn')){
			$this->data['pawn_payment'] = $this->reports_model->getTotalPawnsAmount($start_date, $end_date, $warehouse, $biller, $project);
			$this->data['pawn_return_payment'] = $this->reports_model->getTotalPawnReturnsAmount($start_date, $end_date, $warehouse, $biller, $project);
			$this->data['pawn_rate_payment'] = $this->reports_model->getTotalPawnRatesAmount($start_date, $end_date, $warehouse, $biller, $project);
		}
		
		if($this->config->item('saleman_commission')){
			$this->data['total_commission'] = $this->reports_model->getTotalPaymentCommission($start_date, $end_date, $warehouse, $biller, $project);
		}
		
		if($this->Settings->installment==1){
			$this->data['installment_payment'] = $this->reports_model->getTotalReceivedInstallment($start_date, $end_date, $warehouse, $biller, $project);
		}
		
		$this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('profit_loss')));
        $meta = array('page_title' => lang('profit_loss'), 'bc' => $bc);
        $this->core_page('reports/profit_loss', $meta, $this->data);
    }

    function profit_loss_pdf($start_date = NULL, $end_date = NULL)
    {
        $this->cus->checkPermissions('profit_loss');
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }

        $this->data['total_purchases'] = $this->reports_model->getTotalPurchases($start, $end);
        $this->data['total_sales'] = $this->reports_model->getTotalSales($start, $end);
        $this->data['total_gross_margin'] = $this->reports_model->getTotalGrossMargin($start, $end);
		$this->data['total_expenses'] = $this->reports_model->getTotalExpenses($start, $end);
		$this->data['total_expenses_amount'] = $this->reports_model->getTotalExpensesAmount($start, $end);
        $this->data['total_paid'] = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received'] = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash'] = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc'] = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp'] = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned'] = $this->reports_model->getTotalReturnedAmount($start, $end);
		$this->data['total_purchase_returned'] = $this->reports_model->getTotalPurchaseReturnedAmount($start, $end);
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);

        $warehouses = $this->site->getWarehouses();
        foreach ($warehouses as $warehouse) {
            $total_purchases = $this->reports_model->getTotalPurchases($start, $end, $warehouse->id);
            $total_sales = $this->reports_model->getTotalSales($start, $end, $warehouse->id);
			$total_gross_margin = $this->reports_model->getTotalGrossMargin($start, $end, $warehouse->id);
            $warehouses_report[] = array(
                'warehouse' => $warehouse,
                'total_purchases' => $total_purchases,
                'total_sales' => $total_sales,
				'total_gross_margin' => $total_gross_margin,
                );
        }
        $this->data['warehouses_report'] = $warehouses_report;

        $html = $this->load->view($this->theme . 'reports/profit_loss_pdf', $this->data, true);
        $name = lang("profit_loss") . "-" . str_replace(array('-', ' ', ':'), '_', $this->data['start']) . "-" . str_replace(array('-', ' ', ':'), '_', $this->data['end']) . ".pdf";
        $this->cus->generate_pdf($html, $name, false, false, false, false, false, 'L');
    }

    function register()
    {
        $this->cus->checkPermissions('register');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('register_report')));
        $meta = array('page_title' => lang('register_report'), 'bc' => $bc);
        $this->core_page('reports/register', $meta, $this->data);
    }

    function getRrgisterlogs($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('register', TRUE);
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
		
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
			$user = $this->session->userdata('user_id');
		}

        if ($xls) {

            $this->db
                ->select("date, closed_at, 
						CONCAT(" . $this->db->dbprefix('users') . ".last_name, ' ', " . $this->db->dbprefix('users') . ".first_name) as user, 
						cash_in_hand, 
						total_cc_slips, 
						total_cheques, 
						total_cash, 
						total_cc_slips_submitted, 
						total_cheques_submitted,
						total_cash_submitted, 
						note", FALSE)
                ->from("pos_register")
                ->join('users', 'users.id=pos_register.user_id', 'left')
                ->order_by('closed_at desc');
            //->where('status', 'close');

            if ($user) {
                $this->db->where('pos_register.user_id', $user);
            }
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('register_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('open_time'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('close_time'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('cash_in_hand'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_cash'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_cash_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->closed_at);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->cash_in_hand);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total_cash);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->total_cash_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->note);
                    if($this->cus->formatDecimal($data_row->total_cash_submitted) != $this->cus->formatDecimal($data_row->total_cash)) {
                        $this->excel->getActiveSheet()->getStyle('A'.$row.':G'.$row)->applyFromArray(
                                array( 'fill' => array('type' => PHPExcel_Style_Fill::FILL_SOLID, 'color' => array('rgb' => 'F2DEDE')) )
                                );
                    }
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);


                
				$filename = 'register_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("pos_register.id as ids, 
							date, closed_at, 
							CONCAT(" . $this->db->dbprefix('users') . ".last_name, ' ', " . $this->db->dbprefix('users') . ".first_name) as user, 
							cash_in_hand, 
							CONCAT(total_cash, ' (', total_cash_submitted, ')'), 
							note, 
							IFNULL(quantity,0) as quantity", FALSE)
                ->from("pos_register")
				->join("(SELECT register_id, sum(quantity) as quantity FROM ".$this->db->dbprefix('pos_register_items')." GROUP BY register_id) as register_items","register_items.register_id = pos_register.id","LEFT")
                ->join('users', 'users.id=pos_register.user_id', 'left');

            if ($user) {
                $this->datatables->where('pos_register.user_id', $user);
            }
            if ($start_date) {
                $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }

    public function expenses($id = null)
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('expenses')));
        $meta = array('page_title' => lang('expenses'), 'bc' => $bc);
        $this->core_page('reports/expenses', $meta, $this->data);
    }
	
	public function combine_expenses_pdf($data = NULL)
    {
        $this->cus->checkPermissions('pdf');
		$this->data['rows'] = $data;
		
        $inv_html = $this->load->view($this->theme . 'reports/combine_expenses_pdf', $this->data, true);
        $name = lang("expenses_report").time() . ".pdf";
		$html[] = array(
                'content' => $inv_html,
                'footer' => '',
            );
        $file = $this->cus->generate_pdf($html, $name, "S");
		if($file){
			redirect(base_url($file));
		}
    }
    
	public function getExpensesReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('expenses');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {

            $this->db
                ->select("date, reference, biller, supplier, grand_total, paid, expenses.note, CONCAT({$this->db->dbprefix('users')}.last_name, ' ', {$this->db->dbprefix('users')}.first_name) as user, attachment, {$this->db->dbprefix('expenses')}.id as id", false)
            ->from('expenses')
            ->join('users', 'users.id=expenses.created_by', 'left')
            ->group_by('expenses.id');
			$this->db->where("expenses.status","approved");
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('created_by', $this->session->userdata('user_id'));
            }
			if ($biller) {
                $this->db->where('expenses.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('expenses.project_id', $project);
            }
			if ($supplier) {
                $this->db->where('expenses.supplier_id', $supplier);
            }
            if ($reference_no) {
                $this->db->like('reference', $reference_no, 'both');
            }
            if ($user) {
                $this->db->where('created_by', $user);
            }
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('expenses.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('expenses.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
					
				if($pdf){
					$this->combine_expenses_pdf($data);
				}
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('expenses_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('amount'));
				if($this->Settings->accounting==1){
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('note'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('created_by'));
				}else{
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('note'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('created_by'));
				}
				

                $row = 2; $total = 0;
                foreach ($data as $data_row) {
					$user = $this->site->getUser($expense->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->grand_total));
					if($this->Settings->accounting==1){
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->paid));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->grand_total - $data_row->paid));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->remove_tag($data_row->note));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $user->last_name . ' ' . $user->first_name);
                    }else{
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->remove_tag($data_row->note));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $user->last_name . ' ' . $user->first_name);
					}
					$total += $data_row->grand_total;
                    $row++;
                }
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				if($this->Settings->accounting==1){
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				}else{
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				}
                
				$filename = 'expenses_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
            ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference, biller, supplier,  grand_total, paid , (grand_total- ifnull(paid,0)) as balance, expenses.note as enote, CONCAT({$this->db->dbprefix('users')}.last_name, ' ', {$this->db->dbprefix('users')}.first_name) as user, attachment, payment_status,{$this->db->dbprefix('expenses')}.id as id", false)
            ->from('expenses')
            ->join('users', 'users.id=expenses.created_by', 'left')
            ->group_by('expenses.id');
			$this->datatables->where("expenses.status","approved");
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            }
			if ($biller) {
                $this->datatables->where('expenses.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('expenses.project_id', $project);
            }
			if ($supplier) {
                $this->datatables->where('expenses.supplier_id', $supplier);
            }
            if ($reference_no) {
                $this->datatables->like('reference', $reference_no, 'both');
            }
            if ($user) {
                $this->datatables->where('created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('expenses.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('expenses.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();
        }
    }
	
	public function expense_details($id = null)
    {
        $this->cus->checkPermissions('expenses');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['categories'] = $this->site->getExpenseCategories();
		$this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('expense_details_report')));
        $meta = array('page_title' => lang('expense_details_report'), 'bc' => $bc);
        $this->core_page('reports/expense_details_report', $meta, $this->data);
    }
	
	public function getExpenseDetailsReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('expenses');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$category = $this->input->get('category') ? $this->input->get('category') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }

        if ($xls) {
            $this->db->select("
								".$this->db->dbprefix('expenses').".date,
								".$this->db->dbprefix('expenses').".reference,
								".$this->db->dbprefix('expenses').".supplier,
								".$this->db->dbprefix('expense_items').".category_name,
								".$this->db->dbprefix('expense_items').".description,
								".$this->db->dbprefix('expense_items').".unit_cost,
								".$this->db->dbprefix('expense_items').".quantity,
								".$this->db->dbprefix('expense_items').".subtotal,
								( ".$this->db->dbprefix('expense_items').".subtotal * ( ( ".$this->db->dbprefix('expenses').".order_tax * 110 ) / ".$this->db->dbprefix('expenses').".grand_total ) / 100 ) AS tax_amount,
								subtotal + ( ".$this->db->dbprefix('expense_items').".subtotal * ( ( ".$this->db->dbprefix('expenses').".order_tax * 110 ) / ".$this->db->dbprefix('expenses').".grand_total ) / 100 ) AS grand_total,
								")
            ->from('expense_items')
            ->join('expenses', 'expenses.id=expense_items.expense_id', 'left');
			
			$this->db->where("expenses.status","approved");
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('created_by', $this->session->userdata('user_id'));
            }
			if ($biller) {
                $this->db->where('expenses.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('expenses.project_id', $project);
            }
			if ($category) {
                $this->db->where('expense_items.category_id', $category);
            }
			if ($supplier) {
                $this->db->where('expenses.supplier_id', $supplier);
            }
            if ($reference_no) {
                $this->db->like('reference', $reference_no, 'both');
            }
            if ($user) {
                $this->db->where('created_by', $user);
            }
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('expenses.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('expenses.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
					
				if($pdf){
					$this->combine_expenses_pdf($data);
				}
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('expense_details_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('supplier'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('category'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('description'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('unit_cost'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('subtotal'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('tax'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('grand_total'));

                $row = 2; $total_qty = 0; $total_sub = 0; $total_tax = 0; $total_grand = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->supplier);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->category_name);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->description);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->unit_cost));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatQuantity($data_row->quantity));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->subtotal));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->tax_amount));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->grand_total));
					
					$total_qty += $data_row->quantity;
					$total_sub += $data_row->subtotal;
					$total_tax += $data_row->tax_amount;
					$total_grand += $data_row->grand_total;
                    $row++;
                }
				$this->excel->getActiveSheet()->getStyle("G" . $row . ":J" . $row)->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);

                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatQuantity($total_qty));
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total_sub));
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($total_tax));
				$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($total_grand));
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(35);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				
            
				$filename = 'expense_details_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
            ->select("
						".$this->db->dbprefix('expenses').".date,
						".$this->db->dbprefix('expenses').".reference,
						".$this->db->dbprefix('expenses').".supplier,
						".$this->db->dbprefix('expense_items').".category_name,
						".$this->db->dbprefix('expense_items').".description,
						".$this->db->dbprefix('expense_items').".unit_cost,
						".$this->db->dbprefix('expense_items').".quantity,
						".$this->db->dbprefix('expense_items').".subtotal,
						( ".$this->db->dbprefix('expense_items').".subtotal * ( ( ".$this->db->dbprefix('expenses').".order_tax * 110 ) / ".$this->db->dbprefix('expenses').".grand_total ) / 100 ) AS tax_amount,
						subtotal + ( ".$this->db->dbprefix('expense_items').".subtotal * ( ( ".$this->db->dbprefix('expenses').".order_tax * 110 ) / ".$this->db->dbprefix('expenses').".grand_total ) / 100 ) AS grand_total,
						".$this->db->dbprefix('expense_items').".expense_id as id", false)
            ->from('expense_items')
            ->join('expenses', 'expenses.id=expense_items.expense_id', 'left');
            
			$this->datatables->where("expenses.status","approved");
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            }
			if ($biller) {
                $this->datatables->where('expenses.biller_id', $biller);
            }
			if ($project) {
                $this->datatables->where('expenses.project_id', $project);
            }
			if ($category) {
                $this->datatables->where('expense_items.category_id', $category);
            }
			if ($supplier) {
                $this->datatables->where('expenses.supplier_id', $supplier);
            }
            if ($reference_no) {
                $this->datatables->like('expenses.reference', $reference_no, 'both');
            }
            if ($user) {
                $this->datatables->where('expenses.created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('expenses.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('expenses.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('expenses.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();
        }
    }
	
    function daily_purchases($warehouse_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->cus->checkPermissions();
        if (!$year) {
            $year = date('Y');
        }
        if (!$month) {
            $month = date('m');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => site_url('reports/daily_purchases/'.($warehouse_id ? $warehouse_id : 0)),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<div class="table-responsive"><table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table></div>{/table_close}';

        $this->load->library('calendar', $config);
        $purchases = $user_id ? $this->reports_model->getStaffDailyPurchases($user_id, $year, $month, $warehouse_id) : $this->reports_model->getDailyPurchases($year, $month, $warehouse_id);

        if (!empty($purchases)) {
            foreach ($purchases as $purchase) {
                $daily_purchase[$purchase->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("discount") . "</td><td>" . $this->cus->formatMoney($purchase->discount) . "</td></tr><tr><td>" . lang("shipping") . "</td><td>" . $this->cus->formatMoney($purchase->shipping) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->cus->formatMoney($purchase->tax1) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->cus->formatMoney($purchase->tax2) . "</td></tr><tr><td>" . lang("total") . "</td><td>" . $this->cus->formatMoney($purchase->total) . "</td></tr><tr><td>" . lang("returned") . "</td><td>" . $this->cus->formatMoney($purchase->return_total) . "</td></tr></table>";
            }
        } else {
            $daily_purchase = array();
        }

        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_purchase);
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/daily', $this->data, true);
            $name = lang("daily_purchases") . "_" . $year . "_" . $month . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->cus->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['sel_warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_purchases_report')));
        $meta = array('page_title' => lang('daily_purchases_report'), 'bc' => $bc);
        $this->core_page('reports/daily_purchases', $meta, $this->data);

    }

    function monthly_purchases($warehouse_id = NULL, $year = NULL, $pdf = NULL, $user_id = NULL)
    {
        $this->cus->checkPermissions();
        if (!$year) {
            $year = date('Y');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->load->language('calendar');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['year'] = $year;
        $this->data['purchases'] = $user_id ? $this->reports_model->getStaffMonthlyPurchases($user_id, $year, $warehouse_id) : $this->reports_model->getMonthlyPurchases($year, $warehouse_id);
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/monthly', $this->data, true);
            $name = lang("monthly_purchases") . "_" . $year . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_calendar_text") . '</p>', '', $html);
            $this->cus->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['sel_warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_purchases_report')));
        $meta = array('page_title' => lang('monthly_purchases_report'), 'bc' => $bc);
        $this->core_page('reports/monthly_purchases', $meta, $this->data);

    }
	
	function cost_adjustments($warehouse_id = NULL)
    {
        $this->cus->checkPermissions('cost_adjustments');

        $this->data['users'] = $this->reports_model->getStaff();
		$this->data['billers'] = $this->site->getBillers();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('cost_adjustments_report')));
        $meta = array('page_title' => lang('cost_adjustments_report'), 'bc' => $bc);
        $this->core_page('reports/cost_adjustments', $meta, $this->data);
    }

    public function getCostAdjustmentReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('cost_adjustments', TRUE);

        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;


        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($xls) {
			$ai = "( SELECT adjustment_id, product_id,  GROUP_CONCAT({$this->db->dbprefix('products')}.name SEPARATOR '\n') as item_nane from {$this->db->dbprefix('cost_adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('cost_adjustment_items')}.product_id ";
            if ($product) {
                $ai .= " WHERE {$this->db->dbprefix('cost_adjustment_items')}.product_id = {$product} ";
            }
            $ai .= " GROUP BY {$this->db->dbprefix('cost_adjustment_items')}.adjustment_id ) FAI";

            $this->db->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, companies.company as biller_name, CONCAT({$this->db->dbprefix('users')}.last_name, ' ', {$this->db->dbprefix('users')}.first_name) as created_by, note, FAI.item_nane as iname, {$this->db->dbprefix('cost_adjustments')}.id as id", FALSE)
            ->from('cost_adjustments')
            ->join($ai, 'FAI.adjustment_id=cost_adjustments.id', 'left')
            ->join('users', 'users.id=cost_adjustments.created_by', 'left')
			->join('companies', 'cost_adjustments.biller_id=companies.id', 'left');
			

            if ($user) {
                $this->db->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->db->where('FAI.product_id', $product, FALSE);
            }
            if ($biller) {
                $this->db->where('adjustments.biller_id', $biller);
            }
            if ($reference_no) {
                $this->db->like('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('cost_adjustments.biller_id', $this->session->userdata('biller_id'));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('adjustments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('products'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->remove_tag($data_row->note));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iname);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                
				$filename = 'cost_adjustments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $ai = "( SELECT adjustment_id, product_id,  GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', {$this->db->dbprefix('cost_adjustment_items')}.new_cost) SEPARATOR '___') as item_nane from {$this->db->dbprefix('cost_adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('cost_adjustment_items')}.product_id ";
            if ($product) {
                $ai .= " WHERE {$this->db->dbprefix('cost_adjustment_items')}.product_id = {$product} ";
            }
            $ai .= " GROUP BY {$this->db->dbprefix('cost_adjustment_items')}.adjustment_id ) FAI";
            $this->load->library('datatables');
            $this->datatables
            ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, companies.company as biller_name, CONCAT({$this->db->dbprefix('users')}.last_name, ' ', {$this->db->dbprefix('users')}.first_name) as created_by, note, FAI.item_nane as iname, {$this->db->dbprefix('cost_adjustments')}.id as id", FALSE)
            ->from('cost_adjustments')
            ->join($ai, 'FAI.adjustment_id=cost_adjustments.id', 'left')
            ->join('users', 'users.id=cost_adjustments.created_by', 'left')
			->join('companies', 'cost_adjustments.biller_id=companies.id', 'left');

            if ($user) {
                $this->datatables->where('cost_adjustments.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FAI.product_id', $product, FALSE);
            }
            if ($biller) {
                $this->datatables->where('cost_adjustments.biller_id', $biller);
            }
            if ($reference_no) {
                $this->datatables->like('cost_adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('cost_adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('cost_adjustments.biller_id', $this->session->userdata('biller_id'));
			}

            echo $this->datatables->generate();
        }

    }
	
    function adjustments($warehouse_id = NULL)
    {
        $this->cus->checkPermissions('adjustments');

        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('adjustments_report')));
        $meta = array('page_title' => lang('adjustments_report'), 'bc' => $bc);
        $this->core_page('reports/adjustments', $meta, $this->data);
    }

    public function getAdjustmentReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('adjustments', TRUE);

        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $serial = $this->input->get('serial') ? $this->input->get('serial') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($xls) {

            $ai = "( SELECT adjustment_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, ' (', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END), ')') SEPARATOR '\n') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";

            $this->db->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, warehouses.name as wh_name, CONCAT({$this->db->dbprefix('users')}.last_name, ' ', {$this->db->dbprefix('users')}.first_name) as created_by, note, FAI.item_nane as iname,adjustments.status, {$this->db->dbprefix('adjustments')}.id as id", FALSE)
            ->from('adjustments')
            ->join($ai, 'FAI.adjustment_id=adjustments.id', 'left')
            ->join('users', 'users.id=adjustments.created_by', 'left')
            ->join('warehouses', 'warehouses.id=adjustments.warehouse_id', 'left');

            if ($user) {
                $this->db->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->db->where('FAI.product_id', $product, FALSE);
            }
            if ($serial) {
                $this->db->like('FAI.serial_no', $serial, FALSE);
            }
            if ($warehouse) {
                $this->db->where('adjustments.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('adjustments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('adjustments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('adjustments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('products'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wh_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->remove_tag($data_row->note));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iname);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($data_row->status));	
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
            
				$filename = 'adjustments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $ai = "( SELECT adjustment_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END)) SEPARATOR '___') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id ";
            if ($product) {
                $ai .= " WHERE {$this->db->dbprefix('adjustment_items')}.product_id = {$product} ";
            }
            $ai .= " GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";
            $this->load->library('datatables');
            $this->datatables
            ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, warehouses.name as wh_name, CONCAT({$this->db->dbprefix('users')}.last_name, ' ', {$this->db->dbprefix('users')}.first_name) as created_by, note, FAI.item_nane as iname,adjustments.status, {$this->db->dbprefix('adjustments')}.id as id", FALSE)
            ->from('adjustments')
            ->join($ai, 'FAI.adjustment_id=adjustments.id', 'left')
            ->join('users', 'users.id=adjustments.created_by', 'left')
            ->join('warehouses', 'warehouses.id=adjustments.warehouse_id', 'left');

            if ($user) {
                $this->datatables->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FAI.product_id', $product, FALSE);
            }
            if ($serial) {
                $this->datatables->like('FAI.serial_no', $serial, FALSE);
            }
            if ($warehouse) {
                $this->datatables->where('adjustments.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('adjustments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('adjustments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();
        }

    }
	
	
	
	
	public function adjustment_details ()
	{
		$this->cus->checkPermissions('adjustments', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('adjustment_details_report')));
        $meta = array('page_title' => lang('adjustment_details_report'), 'bc' => $bc);
        $this->core_page('reports/adjustment_details', $meta, $this->data);
	}
	
	public function getAdjustmentDetailsReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('adjustments', TRUE);	
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
		if ($xls) {
			$this->db->select("
								adjustments.date,
								adjustments.reference_no,
								warehouses.name as warehouse,
								CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
								products.name as product_name,
								adjustment_items.type,
								convert_qty(".$this->db->dbprefix('products').".id,".$this->db->dbprefix('adjustment_items').".quantity) as qty,
								(".$this->db->dbprefix('adjustment_items').".quantity * IFNULL(".$this->db->dbprefix('adjustment_items').".real_unit_cost,0)) as total_cost,
								adjustments.status,
								adjustments.id", FALSE)
						->from('adjustments')
						->join('adjustment_items','adjustment_items.adjustment_id = adjustments.id','INNER')
						->join('warehouses','warehouses.id = adjustments.warehouse_id','LEFT')
						->join('products','products.id = adjustment_items.product_id','LEFT')
						->join('users','users.id = adjustments.created_by','LEFT')
						->group_by('adjustment_items.id');

			if ($user) {
				$this->db->where('adjustments.created_by', $user);
			}
			if ($product) {
				$this->db->where('adjustment_items.product_id', $product);
			}			
			if ($warehouse) {
				$this->db->where('adjustments.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->where('adjustments.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where($this->db->dbprefix('adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('adjustments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('adjustments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
	
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('adjustment_details_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('type'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));
				
				if($this->Owner || $this->Admin || $this->session->userdata('show_cost')){ 
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('total_cost'));
				}
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
				
				$row = 2;
				$grand_cost = 0;
				foreach ($data as $data_row){

					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang($data_row->type));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->remove_tag($data_row->qty));
					if($this->Owner || $this->Admin || $this->session->userdata('show_cost')){ 
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->total_cost));
						$grand_cost += $data_row->total_cost;
					}
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
					$row++;
				}
				if($this->Owner || $this->Admin || $this->session->userdata('show_cost')){ 
					$this->excel->getActiveSheet()->getStyle("H" . $row . ":H" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($grand_cost));
				}
				
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

				$filename = 'adjustment_details_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables
							->select("
									adjustments.date,
									adjustments.reference_no,
									warehouses.name as warehouse,
									CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
									products.name as product_name,
									adjustment_items.type,
									convert_qty(".$this->db->dbprefix('products').".id,".$this->db->dbprefix('adjustment_items').".quantity) as qty,
									(".$this->db->dbprefix('adjustment_items').".quantity * IFNULL(".$this->db->dbprefix('adjustment_items').".real_unit_cost,0)) as total_cost,
									adjustments.status,
									adjustments.id", FALSE)
							->from('adjustments')
							->join('adjustment_items','adjustment_items.adjustment_id = adjustments.id','INNER')
							->join('warehouses','warehouses.id = adjustments.warehouse_id','LEFT')
							->join('products','products.id = adjustment_items.product_id','LEFT')
							->join('users','users.id = adjustments.created_by','LEFT')
							->group_by('adjustment_items.id');

			if ($user) {
				$this->datatables->where('adjustments.created_by', $user);
			}
			if ($product) {
				$this->datatables->where('adjustment_items.product_id', $product);
			}			
			if ($warehouse) {
				$this->datatables->where('adjustments.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('adjustments.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where($this->db->dbprefix('adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('adjustments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('adjustments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	

    public function get_deposits($company_id = NULL)
    {
        $this->cus->checkPermissions('customers', TRUE);
        $this->load->library('datatables');
        $this->datatables
            ->select("date, amount, paid_by, CONCAT({$this->db->dbprefix('users')}.last_name, ' ', {$this->db->dbprefix('users')}.first_name) as created_by, note", false)
            ->from("deposits")
            ->join('users', 'users.id=deposits.created_by', 'left')
            ->where($this->db->dbprefix('deposits').'.company_id', $company_id);
        echo $this->datatables->generate();
    }
	
	public function audit_trails()
	{
		$this->cus->checkPermissions('audit_trails');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('audit_trails')));
		$meta = array('page_title' => lang('audit_trails'), 'bc' => $bc);	
		$this->core_page('reports/audit_trails',$meta,$this->data);
	}
	
	public function audit_trail_view($id = false)
	{
		$row = $this->reports_model->getAuditTrailByID($id);
        $this->data['row'] = $row;
		$this->data['user'] = $this->site->getUser($row->user_id);
        $this->load->view($this->theme . 'reports/audit_trail_view', $this->data);
	}
	
	public function getAuditTrails($id = false)
	{		
        $this->load->library('datatables');			
		$this->datatables->select("
							concat(cus_users.last_name,' ',cus_users.first_name) as username, 
							event, 
							table_name, 
							old_values, 
							new_values, 
							url, 
							created_at,
							audit_trails.id")
		->from("audit_trails")
		->join("users","users.id = audit_trails.user_id","left");
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
			$this->datatables->where('audit_trails.user_id', $this->session->userdata('user_id'));
		} 
        echo $this->datatables->generate();
	}
	
	public function inventory_in_out_expiry()
	{
		$this->cus->checkPermissions('inventory_in_out');
		$category = $this->input->post("category");
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('inventory_in_out_expiry')));
		$meta = array('page_title' => lang('inventory_in_out_expiry'), 'bc' => $bc);	
		$this->core_page('reports/inventory_in_out_expiry',$meta,$this->data);
	}
	
	public function getInventoryInOutExpiry($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('inventory_in_out', TRUE);
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
		$category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
            $start_date = $this->cus->fsd($start_date);
        }else{
			$start_date = date('Y-m-d');
		}
		if($end_date){
			$end_date = $this->cus->fsd($end_date);
		}else{
			$end_date = date('Y-m-d');
		}		
		$allow_category = $this->site->getCategoryByProject();
		$where = "";
		$where_begin = "";
		$where_balance = "";
		if($warehouse){
			$where .= " AND warehouse_id='".$warehouse."'";
			$where_begin .= " AND warehouse_id='".$warehouse."'";
			$where_balance .= " AND warehouse_id='".$warehouse."'";
		}
		
		if(!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')){
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$where .= " AND warehouse_id IN ".$warehouse_ids;
			$where_begin .= " AND warehouse_id IN ".$warehouse_ids;
			$where_balance .= " AND warehouse_id IN ".$warehouse_ids;

		}
		
		if ($start_date) {
			$where .= " AND DATE(date) >= '".$start_date."'";
			$where_begin .= " AND DATE(date) < '".$start_date."'";
		}
		if ($end_date) {
			$where .= " AND DATE(date) <= '".$end_date."'";
			$where_balance .= " AND DATE(date) <= '".$end_date."'";
		}
		$modal_view_begin = "<span transaction=begin class=transaction_link>";
		$modal_view_balance = "<span transaction=balance class=transaction_link>";
		
		$select_begin = " , CONCAT('".$modal_view_begin."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND product_id = ".$this->db->dbprefix('products').".id ".$where_begin." ),0)),'</span>') AS begin_qty";
		$select_balance = " , CONCAT('".$modal_view_balance."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND product_id = ".$this->db->dbprefix('products').".id ".$where_balance." ),0)),'</span>') AS balance_qty";
		if($this->Settings->accounting==1){
			$transactions = array('OpeningBalance','Purchases','Sale','QuantityAdjustment');
		}else{
			$transactions = array('Purchases','Sale','QuantityAdjustment');
		}
		if(!$this->config->item('one_warehouse')){
			array_push($transactions, 'Transfer');
		}
		if($this->config->item('deliveries')){
			array_push($transactions, 'Delivery');
		}
		if($this->config->item('using_stocks')){
			array_push($transactions, 'UsingStock');
		}
		if($this->config->item('convert')){
			array_push($transactions, 'Convert');
		}
		if($this->config->item('consignments')){
			array_push($transactions, 'Consignment');
		}
		if($this->config->item('concretes')){
			array_push($transactions, 'CDelivery');
		}
		if($this->config->item('pawn')){
			array_push($transactions, 'Pawns');
		}
		$select_in = '';
		$select_out = '';
		foreach($transactions as $transaction){
			$modal_view_out = "<span opt=minus transaction=".$transaction." class=transaction_link>";
			$modal_view_in = "<span opt=add transaction=".$transaction." class=transaction_link>";
			if($transaction=='CDelivery'){
				$select_in .=" , CONCAT('".$modal_view_in."', convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND (`transaction` = '".$transaction."' || `transaction` = 'CFuel' || `transaction` = 'CError' || `transaction` = 'CAdjustment') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND (`transaction` = '".$transaction."' || `transaction` = 'CFuel' || `transaction` = 'CError' || `transaction` = 'CAdjustment') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
			}else if($transaction=='Purchases'){
				$select_in .=" , CONCAT('".$modal_view_in."', convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND (`transaction` = '".$transaction."' || `transaction` = 'Receives') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND (`transaction` = '".$transaction."' || `transaction` = 'Receives') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
			}else if($transaction=='UsingStock'){
				$select_in .=" , CONCAT('".$modal_view_in."', convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND (`transaction` = '".$transaction."' || `transaction` = 'FuelSale') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND (`transaction` = '".$transaction."' || `transaction` = 'FuelSale') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
			}else{
				if($transaction != 'Delivery'){
					$select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND `transaction` = '".$transaction."' AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				}
				if($transaction=="Sale"){
					$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND (`transaction` = '".$transaction."' || `transaction` = 'FuelCustomer') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
				} else if($transaction != 'Pawns' && $transaction != 'OpeningBalance'){
					$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE IFNULL(expiry,'0000-00-00') = stm.expiry AND `transaction` = '".$transaction."' AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
				}
			}
		}
		
        if ($xls) {
			
            $this->db->select("categories.name as category,products.code,products.name,stm.expiry ".$select_begin.$select_in.$select_out.$select_balance)
							->from("products")
							->join("categories","categories.id = products.category_id","inner")
							->join("(SELECT product_id, IFNULL( expiry, '0000-00-00' ) AS expiry  FROM cus_stockmoves GROUP BY product_id, IFNULL( expiry, '0000-00-00' )) as stm","stm.product_id = products.id","inner");
			$this->db->where("products.type NOT IN ('combo','bom','service')");
			$this->db->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity, IFNULL(expiry,'0000-00-00') as expiry FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_begin." GROUP BY product_id, IFNULL(expiry,'0000-00-00')) as stock_begin", "stock_begin.product_id = products.id AND stock_begin.expiry = stm.expiry","LEFT");
			$this->db->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity, IFNULL(expiry,'0000-00-00') as expiry FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_balance." GROUP BY product_id, IFNULL(expiry,'0000-00-00')) as stock_ending", "stock_ending.product_id = products.id AND stock_ending.expiry = stm.expiry","LEFT");
			$this->db->join("(SELECT product_id, count(id) AS quantity, IFNULL(expiry,'0000-00-00') as expiry FROM ".$this->db->dbprefix('stockmoves')." WHERE transaction != 'CostAdjustment' ".$where." GROUP BY product_id, IFNULL(expiry,'0000-00-00')) as stock_processing", "stock_processing.product_id = products.id AND stock_processing.expiry = stm.expiry","left");
			$this->db->where("(IFNULL(stock_processing.quantity,0) <> 0 OR IFNULL(stock_begin.quantity,0) <> 0 OR IFNULL(stock_ending.quantity,0) <> 0)");
			$this->db->group_by('products.id,stm.expiry');
			if($product){
				$this->db->where('products.id',$product);
			}
			if($category){
				$this->db->where('categories.id',$category);
			}
			if ($allow_category) {
				$this->datatables->where_in("categories.id", $allow_category);
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
				
				$this->excel->getActiveSheet()->mergeCells('A1:A2');
				$this->excel->getActiveSheet()->mergeCells('B1:B2');
				$this->excel->getActiveSheet()->mergeCells('C1:C2');
				$this->excel->getActiveSheet()->mergeCells('D1:D2');
				$this->excel->getActiveSheet()->mergeCells('E1:E2');
				$this->excel->getActiveSheet()->mergeCells('F1:O1');
				$this->excel->getActiveSheet()->mergeCells('P1:X1');
				$this->excel->getActiveSheet()->mergeCells('Y1:Y2');
				
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('code'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('name'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('expiry'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('begin'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('in'));
				$this->excel->getActiveSheet()->SetCellValue('P1', lang('out'));
				
				$this->excel->getActiveSheet()->SetCellValue('F2', lang('opening'));
				$this->excel->getActiveSheet()->SetCellValue('G2', lang('purchase'));
				$this->excel->getActiveSheet()->SetCellValue('H2', lang('sale'));
				$this->excel->getActiveSheet()->SetCellValue('I2', lang('adjustment'));
				$this->excel->getActiveSheet()->SetCellValue('J2', lang('transfer'));
				$this->excel->getActiveSheet()->SetCellValue('K2', lang('using'));
				$this->excel->getActiveSheet()->SetCellValue('L2', lang('convert'));
				$this->excel->getActiveSheet()->SetCellValue('M2', lang('consignment'));
				$this->excel->getActiveSheet()->SetCellValue('N2', lang('concrete'));
				$this->excel->getActiveSheet()->SetCellValue('O2', lang('pawn'));
				$this->excel->getActiveSheet()->SetCellValue('P2', lang('purchase'));
				$this->excel->getActiveSheet()->SetCellValue('Q2', lang('sale'));
				$this->excel->getActiveSheet()->SetCellValue('R2', lang('adjustment'));
				$this->excel->getActiveSheet()->SetCellValue('S2', lang('transfer'));
				$this->excel->getActiveSheet()->SetCellValue('T2', lang('delivery'));
				$this->excel->getActiveSheet()->SetCellValue('U2', lang('using'));
				$this->excel->getActiveSheet()->SetCellValue('V2', lang('convert'));
				$this->excel->getActiveSheet()->SetCellValue('W2', lang('consignment'));
				$this->excel->getActiveSheet()->SetCellValue('X2', lang('concrete'));
				$this->excel->getActiveSheet()->SetCellValue('Y1', lang('balance'));
				
				$this->excel->getActiveSheet()->getStyle('F1:O1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
				$this->excel->getActiveSheet()->getStyle('P1:X1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

				$row = 3;
                $total_sale = 0;
				$total_qty = 0;
				$total_grand = 0;
				$total_cost = 0;
				$total_margin = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->category);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, ($data_row->expiry != '0000-00-00' ? $this->cus->hrsd($data_row->expiry) : ''));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->remove_tag($data_row->begin_qty));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->remove_tag($data_row->OpeningBalance_in));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->remove_tag($data_row->Purchases_in));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->remove_tag($data_row->Sale_in));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->remove_tag($data_row->QuantityAdjustment_in));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->remove_tag($data_row->Transfer_in));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->remove_tag($data_row->UsingStock_in));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->remove_tag($data_row->Convert_in));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->remove_tag($data_row->Consignment_in));
					$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->remove_tag($data_row->CDelivery_in));
					$this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->remove_tag($data_row->Pawns_in));
					$this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->cus->remove_tag($data_row->Purchases_out));
					$this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->cus->remove_tag($data_row->Sale_out));
					$this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->cus->remove_tag($data_row->QuantityAdjustment_out));
					$this->excel->getActiveSheet()->SetCellValue('S' . $row, $this->cus->remove_tag($data_row->Transfer_out));
					$this->excel->getActiveSheet()->SetCellValue('T' . $row, $this->cus->remove_tag($data_row->Delivery_out));
					$this->excel->getActiveSheet()->SetCellValue('U' . $row, $this->cus->remove_tag($data_row->UsingStock_out));
					$this->excel->getActiveSheet()->SetCellValue('V' . $row, $this->cus->remove_tag($data_row->Convert_out));
					$this->excel->getActiveSheet()->SetCellValue('W' . $row, $this->cus->remove_tag($data_row->Consignment_out));
					$this->excel->getActiveSheet()->SetCellValue('X' . $row, $this->cus->remove_tag($data_row->CDelivery_out));
					$this->excel->getActiveSheet()->SetCellValue('Y' . $row, $this->cus->remove_tag($data_row->balance_qty));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);


				$filename = 'inventory_in_out_expiry_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
			$this->datatables->select("products.id as id, categories.name as category,products.code,products.name,stm.expiry ".$select_begin.$select_in.$select_out.$select_balance)
							->from("products")
							->join("categories","categories.id = products.category_id","inner")
							->join("(SELECT product_id, IFNULL( expiry, '0000-00-00' ) AS expiry  FROM cus_stockmoves GROUP BY product_id, IFNULL( expiry, '0000-00-00' )) as stm","stm.product_id = products.id","inner");
			$this->datatables->where("products.type NOT IN ('combo','bom','service')");	
			$this->datatables->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity, IFNULL(expiry,'0000-00-00') as expiry FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_begin." GROUP BY product_id, IFNULL(expiry,'0000-00-00')) as stock_begin", "stock_begin.product_id = products.id AND stock_begin.expiry = stm.expiry","LEFT");
			$this->datatables->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity, IFNULL(expiry,'0000-00-00') as expiry FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_balance." GROUP BY product_id, IFNULL(expiry,'0000-00-00')) as stock_ending", "stock_ending.product_id = products.id AND stock_ending.expiry = stm.expiry","LEFT");
			$this->datatables->join("(SELECT product_id, count(id) AS quantity, IFNULL(expiry,'0000-00-00') as expiry FROM ".$this->db->dbprefix('stockmoves')." WHERE transaction != 'CostAdjustment' ".$where." GROUP BY product_id, IFNULL(expiry,'0000-00-00')) as stock_processing", "stock_processing.product_id = products.id AND stock_processing.expiry = stm.expiry","left");
			$this->datatables->where("(IFNULL(stock_processing.quantity,0) <> 0 OR IFNULL(stock_begin.quantity,0) <> 0 OR IFNULL(stock_ending.quantity,0) <> 0)");
			
			$this->datatables->group_by('products.id,stm.expiry');

			if($product){
				$this->datatables->where('products.id',$product);
			}
			if($category){
				$this->datatables->where('categories.id',$category);
			}	
			if ($allow_category) {
				$this->datatables->where_in("categories.id", $allow_category);
			}	
            echo $this->datatables->generate();
        }
    }
	
	public function inventory_in_out()
	{
		$this->cus->checkPermissions();	
		$category = $this->input->post("category");
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('inventory_in_out')));
		$meta = array('page_title' => lang('inventory_in_out'), 'bc' => $bc);	
		$this->core_page('reports/inventory_in_out',$meta,$this->data);
	}
	
	public function getInventoryInOut($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('inventory_in_out', TRUE);
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
		$category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
            $start_date = $this->cus->fsd($start_date);
        }else{
			$start_date = date('Y-m-d');
		}
		if($end_date){
			$end_date = $this->cus->fsd($end_date);
		}else{
			$end_date = date('Y-m-d');
		}		
		$allow_category = $this->site->getCategoryByProject();
		$where = "";
		$where_begin = "";
		$where_balance = "";
		if($warehouse){
			$where .= " AND warehouse_id='".$warehouse."'";
			$where_begin .= " AND warehouse_id='".$warehouse."'";
			$where_balance .= " AND warehouse_id='".$warehouse."'";
		}
		
		if(!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')){
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$where .= " AND warehouse_id IN ".$warehouse_ids;
			$where_begin .= " AND warehouse_id IN ".$warehouse_ids;
			$where_balance .= " AND warehouse_id IN ".$warehouse_ids;

		}
		
		if ($start_date) {
			$where .= " AND DATE(date) >= '".$start_date."'";
			$where_begin .= " AND DATE(date) < '".$start_date."'";
		}
		if ($end_date) {
			$where .= " AND DATE(date) <= '".$end_date."'";
			$where_balance .= " AND DATE(date) <= '".$end_date."'";
		}
		
		$modal_view_begin = "<span transaction=begin class=transaction_link>";
		$modal_view_balance = "<span transaction=balance class=transaction_link>";
		
		$select_begin = " , CONCAT('".$modal_view_begin."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE product_id = ".$this->db->dbprefix('products').".id ".$where_begin." ),0)),'</span>') AS begin_qty";
		$select_balance = " , CONCAT('".$modal_view_balance."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE product_id = ".$this->db->dbprefix('products').".id ".$where_balance." ),0)),'</span>') AS balance_qty";
		
		
		if($this->Settings->accounting==1){
			$transactions = array('OpeningBalance','Purchases','Sale','QuantityAdjustment');
		}else{
			$transactions = array('Purchases','Sale','QuantityAdjustment');
		}
		if(!$this->config->item('one_warehouse')){
			array_push($transactions, 'Transfer');
		}
		if($this->config->item('deliveries')){
			array_push($transactions, 'Delivery');
		}
		if($this->config->item('using_stocks')){
			array_push($transactions, 'UsingStock');
		}
		if($this->config->item('convert')){
			array_push($transactions, 'Convert');
		}
		if($this->config->item('consignments')){
			array_push($transactions, 'Consignment');
		}
		if($this->config->item('concretes')){
			array_push($transactions, 'CDelivery');
		}
		if($this->config->item('pawn')){
			array_push($transactions, 'Pawns');
		}
		$select_in = '';
		$select_out = '';
		foreach($transactions as $transaction){
			$modal_view_out = "<span opt=minus transaction=".$transaction." class=transaction_link>";
			$modal_view_in = "<span opt=add transaction=".$transaction." class=transaction_link>";
			if($transaction=='CDelivery'){
				$select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'CFuel' || `transaction` = 'CError' || `transaction` = 'CAdjustment') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'CFuel' || `transaction` = 'CError' || `transaction` = 'CAdjustment') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
			}else if($transaction=='Purchases'){
				$select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'Receives') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'Receives') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
			}else if($transaction=='UsingStock'){
				$select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'FuelSale') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'FuelSale') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
			}else{
				if($transaction != 'Delivery'){
					$select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE `transaction` = '".$transaction."' AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
				}
				if($transaction=='Sale'){
					$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'FuelCustomer') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
				}else if($transaction != 'Pawns' && $transaction != 'OpeningBalance'){
					$select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE `transaction` = '".$transaction."' AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
				}
			}
			
		}
		
        if ($xls) {
			
            $this->db->select("categories.name as category,products.code,products.name ".$select_begin.$select_in.$select_out.$select_balance)
							->from("products")
							->join("categories","categories.id = products.category_id","inner");
			$this->db->where("products.type NOT IN ('combo','bom','service')");
			$this->db->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_begin." GROUP BY product_id) as stock_begin", "stock_begin.product_id = products.id","left");
			$this->db->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_balance." GROUP BY product_id) as stock_ending", "stock_ending.product_id = products.id","left");
			$this->db->join("(SELECT product_id, count(id) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE transaction != 'CostAdjustment' ".$where." GROUP BY product_id) as stock_processing", "stock_processing.product_id = products.id","left");
			$this->db->where("(IFNULL(stock_processing.quantity,0) <> 0 OR IFNULL(stock_begin.quantity,0) <> 0 OR IFNULL(stock_ending.quantity,0) <> 0)");
			if($product){
				$this->db->where('products.id',$product);
			}
			if($category){
				$this->db->where('categories.id',$category);
			}
			if ($allow_category) {
				$this->db->where_in("categories.id", $allow_category);
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
				
				$this->excel->getActiveSheet()->mergeCells('A1:A2');
				$this->excel->getActiveSheet()->mergeCells('B1:B2');
				$this->excel->getActiveSheet()->mergeCells('C1:C2');
				$this->excel->getActiveSheet()->mergeCells('D1:D2');
				$this->excel->getActiveSheet()->mergeCells('E1:N1');
				$this->excel->getActiveSheet()->mergeCells('O1:W1');
				$this->excel->getActiveSheet()->mergeCells('X1:X2');
				
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('code'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('name'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('begin'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('in'));
				$this->excel->getActiveSheet()->SetCellValue('O1', lang('out'));
				
				$this->excel->getActiveSheet()->SetCellValue('E2', lang('opening'));
				$this->excel->getActiveSheet()->SetCellValue('F2', lang('purchase'));
				$this->excel->getActiveSheet()->SetCellValue('G2', lang('sale'));
				$this->excel->getActiveSheet()->SetCellValue('H2', lang('adjustment'));
				$this->excel->getActiveSheet()->SetCellValue('I2', lang('transfer'));
				$this->excel->getActiveSheet()->SetCellValue('J2', lang('using'));
				$this->excel->getActiveSheet()->SetCellValue('K2', lang('convert'));
				$this->excel->getActiveSheet()->SetCellValue('L2', lang('consignment'));
				$this->excel->getActiveSheet()->SetCellValue('M2', lang('concrete'));
				$this->excel->getActiveSheet()->SetCellValue('N2', lang('pawn'));
				
				$this->excel->getActiveSheet()->SetCellValue('O2', lang('purchase'));
				$this->excel->getActiveSheet()->SetCellValue('P2', lang('sale'));
				$this->excel->getActiveSheet()->SetCellValue('Q2', lang('adjustment'));
				$this->excel->getActiveSheet()->SetCellValue('R2', lang('transfer'));
				$this->excel->getActiveSheet()->SetCellValue('S2', lang('delivery'));
				$this->excel->getActiveSheet()->SetCellValue('T2', lang('using'));
				$this->excel->getActiveSheet()->SetCellValue('U2', lang('convert'));
				$this->excel->getActiveSheet()->SetCellValue('V2', lang('consignment'));
				$this->excel->getActiveSheet()->SetCellValue('W2', lang('concrete'));
				
				$this->excel->getActiveSheet()->SetCellValue('X1', lang('balance'));
				
				$this->excel->getActiveSheet()->getStyle('E1:N1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
				$this->excel->getActiveSheet()->getStyle('O1:W1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

				$row = 3;
                $total_sale = 0;
				$total_qty = 0;
				$total_grand = 0;
				$total_cost = 0;
				$total_margin = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->category);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->remove_tag($data_row->begin_qty));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->remove_tag($data_row->OpeningBalance_in));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->remove_tag($data_row->Purchases_in));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->remove_tag($data_row->Sale_in));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->remove_tag($data_row->QuantityAdjustment_in));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->remove_tag($data_row->Transfer_in));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->remove_tag($data_row->UsingStock_in));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->remove_tag($data_row->Convert_in));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->remove_tag($data_row->Consignment_in));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->remove_tag($data_row->CDelivery_in));
					$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->remove_tag($data_row->Pawns_in));
					$this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->remove_tag($data_row->Purchases_out));
					$this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->cus->remove_tag($data_row->Sale_out));
					$this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->cus->remove_tag($data_row->QuantityAdjustment_out));
					$this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->cus->remove_tag($data_row->Transfer_out));
					$this->excel->getActiveSheet()->SetCellValue('S' . $row, $this->cus->remove_tag($data_row->Delivery_out));
					$this->excel->getActiveSheet()->SetCellValue('T' . $row, $this->cus->remove_tag($data_row->UsingStock_out));
					$this->excel->getActiveSheet()->SetCellValue('U' . $row, $this->cus->remove_tag($data_row->Convert_out));
					$this->excel->getActiveSheet()->SetCellValue('V' . $row, $this->cus->remove_tag($data_row->Consignment_out));
					$this->excel->getActiveSheet()->SetCellValue('W' . $row, $this->cus->remove_tag($data_row->CDelivery_out));
					$this->excel->getActiveSheet()->SetCellValue('X' . $row, $this->cus->remove_tag($data_row->balance_qty));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);

				$filename = 'inventory_in_out_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
			$this->datatables->select("products.id, categories.name as category,products.code,products.name ".$select_begin.$select_in.$select_out.$select_balance)
							->from("products")
							->join("categories","categories.id = products.category_id","inner");
			$this->datatables->where("products.type NOT IN ('combo','bom','service')");
			$this->datatables->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_begin." GROUP BY product_id) as stock_begin", "stock_begin.product_id = products.id","left");
			$this->datatables->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE 1=1 ".$where_balance." GROUP BY product_id) as stock_ending", "stock_ending.product_id = products.id","left");
			$this->datatables->join("(SELECT product_id, count(id) AS quantity FROM ".$this->db->dbprefix('stockmoves')." WHERE transaction != 'CostAdjustment' ".$where." GROUP BY product_id) as stock_processing", "stock_processing.product_id = products.id","left");
			$this->datatables->where("(IFNULL(stock_processing.quantity,0) <> 0 OR IFNULL(stock_begin.quantity,0) <> 0 OR IFNULL(stock_ending.quantity,0) <> 0)");
			if($product){
				$this->datatables->where('products.id',$product);
			}
			if($category){
				$this->datatables->where('categories.id',$category);
			}			
			if ($allow_category) {
				$this->datatables->where_in("categories.id", $allow_category);
			}
            echo $this->datatables->generate();
        }
    }

	public function product_sales_report()
	{
		$product = $this->input->post("product");
		$category = $this->input->post("category");
		$warehouse_id = $this->input->post("warehouse");
		$start_date = $this->input->post("start_date");
		$end_date = $this->input->post("end_date");
		$saleman = $this->input->post("saleman");
		$biller = $this->input->post("biller");
		$customer = $this->input->post("customer");
		$project = $this->input->post("project");
		
		$allow_category = $this->site->getCategoryByProject();
		if($allow_category){
			$this->db->where_in("categories.id",$allow_category);
		}
		($category ? $this->db->where('id',$category) : " ");
		$q = $this->db->get('categories');
		if($q->num_rows() > 0){
			foreach($q->result() as $row){
				$categories[] = $row;
			}
		
		}else{
			$categories = null;
		}
		if(isset($_POST['xls']) || isset($_POST['pdf'])){

			if (!empty($categories)) {
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('product_type'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
				
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('sold'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('unit_price'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('cost'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('subtotal'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('net_profit'));
	
				$total = 0;
				if($categories){
					$row = 2;
					foreach($categories as $category_row){
						$data = $this->reports_model->getProductBySales($category_row->id, $start_date, $end_date, $product, $warehouse_id, $saleman, $biller, $project, $customer);
						if($data){
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, $category_row->name);
							$row +=1;
							$total_quantity 	=0;	
							$total_unit_price	=0;
							$total_discount		=0;
							$total_cost 		=0;
							$total_subtotal 	=0;
							$total_net_profit	=0;
							foreach ($data as $data_row) {
								$unit_price = 0;
								if($data_row->item_discount > 0){
									$unit_price = $data_row->unit_price + ($data_row->item_discount / $data_row->quantity) ;
								
								}else{
									$unit_price = $data_row->unit_price;
								}
								$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->product_code);
								$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->product_name);
								$this->excel->getActiveSheet()->SetCellValue('C' . $row, ucfirst($data_row->product_type));
								$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
								$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
								$this->excel->getActiveSheet()->SetCellValue('F' . $row, strip_tags(html_entity_decode($this->cus->convertQty($data_row->product_id,$data_row->quantity))));
								$this->excel->getActiveSheet()->SetCellValue('G' . $row, $unit_price);
								$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->item_discount));
								$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->cost));
								$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->subtotal));
								$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->subtotal-$data_row->cost));
								$total_quantity += $data_row->quantity;
								$total_unit_price += $unit_price;
								$total_discount += $data_row->item_discount;
								$total_cost += $data_row->cost;
								$total_subtotal += $data_row->subtotal;
								$total_net_profit += $data_row->subtotal-$data_row->cost;
								$row++;
							}
							$style = array(
								'font'  => array(
									'bold'  => true,
								)
							);
				
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($total_quantity));
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($total_unit_price));
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total_discount));
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($total_cost));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($total_subtotal));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($total_net_profit));
							
							$grand_total_quantity 	+= $total_quantity;
							$grand_total_unit_price += $total_unit_price;
							$grand_total_cost		+= $total_cost;
							$grand_total_discount 	+= $total_discount;
							$grand_total_subtotal 	+= $total_subtotal;
							$grand_total_net_profit += $total_net_profit;
							$row++;
						}
					}
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
							$style = array(
									'font'  => array(
										'bold'  => true,
										'color' => array('rgb' => 'FF0000')
									)
								);
							$this->excel->getActiveSheet()->getStyle("E" . $row . ":K" . $row)->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('total'));
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($grand_total_quantity));
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($grand_total_unit_price));
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($grand_total_discount));
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($grand_total_cost));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($grand_total_subtotal));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($grand_total_net_profit));
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

				$filename = 'product_sales_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
		}
		
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['result_categories'] = $this->reports_model->getAllCategoriesByInventoryInOut($category);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('product_sales_report')));
		$meta = array('page_title' => lang('product_sales_report'), 'bc' => $bc);	
		$this->core_page('reports/product_sales_report',$meta,$this->data);
	}
	
		public function close_night_audit_report()
	{
		$product = $this->input->post("product");
		$category = $this->input->post("category");
		$warehouse_id = $this->input->post("warehouse");
		$start_date = $this->input->post("start_date");
		$end_date = $this->input->post("end_date");
		$saleman = $this->input->post("saleman");
		$biller = $this->input->post("biller");
		$customer = $this->input->post("customer");
		$project = $this->input->post("project");
		
		$allow_category = $this->site->getCategoryByProject();
		if($allow_category){
			$this->db->where_in("categories.id",$allow_category);
		}
		($category ? $this->db->where('id',$category) : " ");
		$q = $this->db->get('categories');
		if($q->num_rows() > 0){
			foreach($q->result() as $row){
				$categories[] = $row;
			}
		
		}else{
			$categories = null;
		}
		if(isset($_POST['xls']) || isset($_POST['pdf'])){

			if (!empty($categories)) {
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('product_type'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
				
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('sold'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('unit_price'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('cost'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('subtotal'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('net_profit'));
	
				$total = 0;
				if($categories){
					$row = 2;
					foreach($categories as $category_row){
						$data = $this->reports_model->getProductBySales($category_row->id, $start_date, $end_date, $product, $warehouse_id, $saleman, $biller, $project, $customer);
						if($data){
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, $category_row->name);
							$row +=1;
							$total_quantity 	=0;	
							$total_unit_price	=0;
							$total_discount		=0;
							$total_cost 		=0;
							$total_subtotal 	=0;
							$total_net_profit	=0;
							foreach ($data as $data_row) {
								$unit_price = 0;
								if($data_row->item_discount > 0){
									$unit_price = $data_row->unit_price + ($data_row->item_discount / $data_row->quantity) ;
								
								}else{
									$unit_price = $data_row->unit_price;
								}
								$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->product_code);
								$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->product_name);
								$this->excel->getActiveSheet()->SetCellValue('C' . $row, ucfirst($data_row->product_type));
								$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
								$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
								$this->excel->getActiveSheet()->SetCellValue('F' . $row, strip_tags(html_entity_decode($this->cus->convertQty($data_row->product_id,$data_row->quantity))));
								$this->excel->getActiveSheet()->SetCellValue('G' . $row, $unit_price);
								$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->item_discount));
								$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->cost));
								$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->subtotal));
								$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->subtotal-$data_row->cost));
								$total_quantity += $data_row->quantity;
								$total_unit_price += $unit_price;
								$total_discount += $data_row->item_discount;
								$total_cost += $data_row->cost;
								$total_subtotal += $data_row->subtotal;
								$total_net_profit += $data_row->subtotal-$data_row->cost;
								$row++;
							}
							$style = array(
								'font'  => array(
									'bold'  => true,
								)
							);
				
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($total_quantity));
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($total_unit_price));
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total_discount));
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($total_cost));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($total_subtotal));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($total_net_profit));
							
							$grand_total_quantity 	+= $total_quantity;
							$grand_total_unit_price += $total_unit_price;
							$grand_total_cost		+= $total_cost;
							$grand_total_discount 	+= $total_discount;
							$grand_total_subtotal 	+= $total_subtotal;
							$grand_total_net_profit += $total_net_profit;
							$row++;
						}
					}
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
							$style = array(
									'font'  => array(
										'bold'  => true,
										'color' => array('rgb' => 'FF0000')
									)
								);
							$this->excel->getActiveSheet()->getStyle("E" . $row . ":K" . $row)->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('total'));
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($grand_total_quantity));
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($grand_total_unit_price));
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($grand_total_discount));
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($grand_total_cost));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($grand_total_subtotal));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($grand_total_net_profit));
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

				$filename = 'product_sales_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
		}
		
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['result_categories'] = $this->reports_model->getAllCategoriesByInventoryInOut($category);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('close_night_audit_report')));
		$meta = array('page_title' => lang('close_night_audit_report'), 'bc' => $bc);	
		$this->core_page('reports/rental_close_night_audit',$meta,$this->data);
	}

	public function product_purchases_report()
	{
		$product = $this->input->post("product");
		$category = $this->input->post("category");
		$warehouse_id = $this->input->post("warehouse");
		$start_date = $this->input->post("start_date");
		$end_date = $this->input->post("end_date");
		$biller = $this->input->post("biller");
		$supplier = $this->input->post("supplier");
		$project = $this->input->post("project");
		
		($category ? $this->db->where('id',$category) : " ");
		$q = $this->db->get('categories');
		if($q->num_rows() > 0){
			foreach($q->result() as $row){
				$categories[] = $row;
			}
		
		}else{
			$categories = null;
		}
		if(isset($_POST['xls']) || isset($_POST['pdf'])){

			if (!empty($categories)) {
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_purchases_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('product_type'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('supplier'));
				
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('sold'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('unit_price'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('cost'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('subtotal'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('net_profit'));
	
				$total = 0;
				if($categories){
					$row = 2;
					foreach($categories as $category_row){
						$data = $this->reports_model->getProductBySales($category_row->id, $start_date, $end_date, $product, $warehouse_id, $saleman, $biller, $project, $supplier);
						if($data){
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, $category_row->name);
							$row +=1;
							$total_quantity 	=0;	
							$total_unit_price	=0;
							$total_discount		=0;
							$total_cost 		=0;
							$total_subtotal 	=0;
							$total_net_profit	=0;
							foreach ($data as $data_row) {
								$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->product_code);
								$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->product_name);
								$this->excel->getActiveSheet()->SetCellValue('C' . $row, ucfirst($data_row->product_type));
								$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
								$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->supplier);
								$this->excel->getActiveSheet()->SetCellValue('F' . $row, strip_tags(html_entity_decode($this->cus->convertQty($data_row->product_id,$data_row->quantity))));
								$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->unit_price);
								$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->item_discount));
								$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->cost));
								$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->subtotal));
								$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->subtotal-$data_row->cost));
								$total_quantity += $data_row->quantity;
								$total_unit_price += $data_row->unit_price;
								$total_discount += $data_row->item_discount;
								$total_cost += $data_row->cost;
								$total_subtotal += $data_row->subtotal;
								$total_net_profit += $data_row->subtotal-$data_row->cost;
								$row++;
							}
							$style = array(
								'font'  => array(
									'bold'  => true,
								)
							);
				
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($total_quantity));
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($total_unit_price));
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total_discount));
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($total_cost));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($total_subtotal));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($total_net_profit));
							
							$grand_total_quantity 	+= $total_quantity;
							$grand_total_unit_price += $total_unit_price;
							$grand_total_cost		+= $total_cost;
							$grand_total_discount 	+= $total_discount;
							$grand_total_subtotal 	+= $total_subtotal;
							$grand_total_net_profit += $total_net_profit;
							$row++;
						}
					}
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
							$style = array(
									'font'  => array(
										'bold'  => true,
										'color' => array('rgb' => 'FF0000')
									)
								);
							$this->excel->getActiveSheet()->getStyle("E" . $row . ":K" . $row)->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
							$this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('total'));
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($grand_total_quantity));
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($grand_total_unit_price));
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($grand_total_discount));
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($grand_total_cost));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($grand_total_subtotal));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($grand_total_net_profit));
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

				$filename = 'product_purchases_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
		}
		
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['result_categories'] = $this->reports_model->getAllCategoriesByInventoryInOut($category);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('product_purchases_report')));
		$meta = array('page_title' => lang('product_purchases_report'), 'bc' => $bc);	
		$this->core_page('reports/product_purchases_report',$meta,$this->data);
	}
	
	public function saleman_detail_report()
	{		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();		
		$this->data['salemans'] = $this->site->getSalemans();		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('saleman_detail_report')));
        $meta = array('page_title' => lang('saleman_detail_report'), 'bc' => $bc);
        $this->core_page('reports/saleman_detail_report', $meta, $this->data);
	}
	
	public function salesman_commission_report()
	{		
		$this->cus->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('salesman_commission_report')));
        $meta = array('page_title' => lang('salesman_commission_report'), 'bc' => $bc);
        $this->core_page('reports/salesman_commission_report', $meta, $this->data);
	}
	
	public function getSalesmanCommissionReports($pdf = NULL, $xls = NULL)
    {	
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
		$end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$commission_type = $this->input->get('commission_type') ? $this->input->get('commission_type') : NULL;	
		if ($xls) {
			$this->db->select("
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".date, '%Y-%m-%d %T') as date,
						salesman_commissions.commission_type,
						salesman_commissions.salesman_group,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".from_date, '%Y-%m-%d') as from_date,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".to_date, '%Y-%m-%d') as to_date,
						IFNULL(".$this->db->dbprefix('salesman_commissions').".total_commission,0) as total_commission,
						IFNULL(".$this->db->dbprefix('salesman_commissions').".paid,0) as paid,
						(".$this->db->dbprefix('salesman_commissions').".total_commission - ".$this->db->dbprefix('salesman_commissions').".paid) as balance,
						salesman_commissions.status
					")
			->from("salesman_commissions");	
			if ($start_date) {
				$this->db->where('date('.$this->db->dbprefix("salesman_commissions").'.date) >=', $this->cus->fld($start_date));
			}
			if ($end_date) {
				$this->db->where('date('.$this->db->dbprefix("salesman_commissions").'.date) <=', $this->cus->fld($end_date,false,1));
			}
			if($user){
				$this->db->where('salesman_commissions.created_by', $user);
			}
			if($biller){
				$this->db->where('salesman_commissions.biller_id', $biller);
			}
			if($project){
				$this->db->where('salesman_commissions.project_id', $project);
			}
			if($commission_type){
				$this->db->where('salesman_commissions.commission_type', $commission_type);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('salesman_commissions.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where('salesman_commissions.created_by', $user);
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('salesman_commission_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('commission_type'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('salesman_group'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('from_date'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('to_date'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('commission'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
                $row = 2;
				$total_commission = 0;
				$total_paid = 0;
				$total_balance = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->commission_type);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->salesman_group);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->total_commission));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->balance));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));

					$total_commission += $data_row->total_commission;
					$total_paid += $data_row->paid;
					$total_balance += $data_row->balance;
					$row++;
                }
				$this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);

				$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($total_commission));
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($total_paid));
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total_balance));
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				
				$filename = 'salesman_commission_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
			
		} else{
			
			$this->load->library('datatables');
			$this->datatables->select("
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".date, '%Y-%m-%d %T') as date,
						salesman_commissions.commission_type,
						salesman_commissions.salesman_group,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".from_date, '%Y-%m-%d') as from_date,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".to_date, '%Y-%m-%d') as to_date,
						IFNULL(".$this->db->dbprefix('salesman_commissions').".total_commission,0) as total_commission,
						IFNULL(".$this->db->dbprefix('salesman_commissions').".paid,0) as paid,
						(".$this->db->dbprefix('salesman_commissions').".total_commission - ".$this->db->dbprefix('salesman_commissions').".paid) as balance,
						attachment,
						salesman_commissions.status,
						salesman_commissions.id as id
					")
			->from("salesman_commissions");	
			if ($start_date) {
				$this->datatables->where('date('.$this->db->dbprefix("salesman_commissions").'.date) >=', $this->cus->fld($start_date));
			}
			if ($end_date) {
				$this->datatables->where('date('.$this->db->dbprefix("salesman_commissions").'.date) <=', $this->cus->fld($end_date,false,1));
			}
			if($user){
				$this->datatables->where('salesman_commissions.created_by', $user);
			}
			if($biller){
				$this->datatables->where('salesman_commissions.biller_id', $biller);
			}
			if($project){
				$this->datatables->where('salesman_commissions.project_id', $project);
			}
			if($commission_type){
				$this->datatables->where('salesman_commissions.commission_type', $commission_type);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('salesman_commissions.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('salesman_commissions.created_by', $user);
			}
			echo $this->datatables->generate();
		}
    }
	
	public function salesman_commission_detail()
	{	
		$this->cus->checkPermissions('salesman_commission_report');	
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
		$this->data['salesmans'] = $this->site->getSalemans();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('salesman_commission_detail')));
        $meta = array('page_title' => lang('salesman_commission_detail'), 'bc' => $bc);
        $this->core_page('reports/salesman_commission_detail', $meta, $this->data);
	}
	
	public function getSalesmanCommissionDetails($pdf = NULL, $xls = NULL)
    {	
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
		$end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$commission_type = $this->input->get('commission_type') ? $this->input->get('commission_type') : NULL;	
		$salesman = $this->input->get('salesman') ? $this->input->get('salesman') : NULL;
		if ($xls) {
			$this->db->select("
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".date, '%Y-%m-%d %T') as date,
						salesman_commissions.commission_type,
						CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as salesman,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".from_date, '%Y-%m-%d') as from_date,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".to_date, '%Y-%m-%d') as to_date,
						SUM(IFNULL(".$this->db->dbprefix('salesman_commision_items').".grand_total,0)) as grand_total,
						SUM(IFNULL(".$this->db->dbprefix('salesman_commision_items').".amount,0)) as amount,
						IFNULL(".$this->db->dbprefix('salesman_commision_items').".rate,0) as rate,
						SUM(IFNULL(".$this->db->dbprefix('salesman_commision_items').".commission,0)) as commission,
						salesman_commissions.id as id
					")
			->join("salesman_commision_items","salesman_commision_items.commission_id = salesman_commissions.id","inner")
			->join("users","salesman_commision_items.salesman_id = users.id","left")
			->group_by("salesman_commision_items.salesman_id,salesman_commision_items.rate,salesman_commissions.commission_type,salesman_commissions.from_date,salesman_commissions.to_date")
			->from("salesman_commissions");	
			if ($start_date) {
				$this->db->where('date('.$this->db->dbprefix("salesman_commissions").'.date) >=', $this->cus->fld($start_date));
			}
			if ($end_date) {
				$this->db->where('date('.$this->db->dbprefix("salesman_commissions").'.date) <=', $this->cus->fld($end_date,false,1));
			}
			if($user){
				$this->db->where('salesman_commissions.created_by', $user);
			}
			if($biller){
				$this->db->where('salesman_commissions.biller_id', $biller);
			}
			if($salesman){
				$this->db->where('salesman_commision_items.salesman_id', $salesman);
			}
			if($project){
				$this->db->where('salesman_commissions.project_id', $project);
			}
			if($commission_type){
				$this->db->where('salesman_commissions.commission_type', $commission_type);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('salesman_commissions.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where('salesman_commissions.created_by', $user);
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('salesman_commission_detail'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('commission_type'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('salesman'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('from_date'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('to_date'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('amount'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('rate'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('commission'));

                $row = 2;
                $grand_total = 0;
				$amount = 0;
				$commission = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->commission_type);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->salesman);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->amount));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->rate);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->commission));
					$grand_total += $data_row->grand_total;
					$amount += $data_row->amount;
					$commission += $data_row->commission;
					$row++;
                }
				$this->excel->getActiveSheet()->getStyle("F" . $row . ":I" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($grand_total));
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($amount));
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($commission));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$filename = 'salesman_commission_detail_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
			
		} else{
			$this->load->library('datatables');
			$this->datatables->select("
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".date, '%Y-%m-%d %T') as date,
						salesman_commissions.commission_type,
						CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as salesman,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".from_date, '%Y-%m-%d') as from_date,
						DATE_FORMAT(".$this->db->dbprefix('salesman_commissions').".to_date, '%Y-%m-%d') as to_date,
						SUM(IFNULL(".$this->db->dbprefix('salesman_commision_items').".grand_total,0)) as grand_total,
						SUM(IFNULL(".$this->db->dbprefix('salesman_commision_items').".amount,0)) as amount,
						IFNULL(".$this->db->dbprefix('salesman_commision_items').".rate,0) as rate,
						SUM(IFNULL(".$this->db->dbprefix('salesman_commision_items').".commission,0)) as commission,
						salesman_commissions.id as id
					")
			->join("salesman_commision_items","salesman_commision_items.commission_id = salesman_commissions.id","inner")
			->join("users","salesman_commision_items.salesman_id = users.id","left")
			->group_by("salesman_commision_items.salesman_id,salesman_commision_items.rate,salesman_commissions.commission_type,salesman_commissions.from_date,salesman_commissions.to_date")
			->from("salesman_commissions");	
			if ($start_date) {
				$this->datatables->where('date('.$this->db->dbprefix("salesman_commissions").'.date) >=', $this->cus->fld($start_date));
			}
			if ($end_date) {
				$this->datatables->where('date('.$this->db->dbprefix("salesman_commissions").'.date) <=', $this->cus->fld($end_date,false,1));
			}
			if($user){
				$this->datatables->where('salesman_commissions.created_by', $user);
			}
			if($biller){
				$this->datatables->where('salesman_commissions.biller_id', $biller);
			}
			if($salesman){
				$this->datatables->where('salesman_commision_items.salesman_id', $salesman);
			}
			if($project){
				$this->datatables->where('salesman_commissions.project_id', $project);
			}
			if($commission_type){
				$this->datatables->where('salesman_commissions.commission_type', $commission_type);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('salesman_commissions.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('salesman_commissions.created_by', $user);
			}
			echo $this->datatables->generate();
		}
    }
	
	public function saleman_report()
	{		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();		
		$this->data['salemans'] = $this->site->getSalemans();		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('saleman_report')));
        $meta = array('page_title' => lang('saleman_report'), 'bc' => $bc);
        $this->core_page('reports/saleman_report', $meta, $this->data);
	}
		
	public function getSalemanReports($pdf = NULL, $xls = NULL)
    {	
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
		$end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
			
		if ($xls) {
			
			$this->db->select("
						users.saleman_group as group_name, 
						IFNULL(concat(last_name,' ', first_name),'N/A') as username, 
						IFNULL(email,'N/A') as email,
						IFNULL(phone,'N/A') as phone,
						biller,
						COUNT(cus_sales.id) as total_sale,
						SUM(grand_total) as amount,
						IFNULL(SUM(cus_payments.paid),0) as paid, 
						IFNULL(SUM(cus_payments.discount),0) as discount,
						(SUM(grand_total) - (IFNULL(SUM(cus_payments.paid),0) + IFNULL(SUM(cus_payments.discount),0))) AS balance")
			 ->from('sales')
			 ->join("users","users.id = saleman_id AND users.saleman=1","inner")
			 ->join('(SELECT
							sale_id,
							IFNULL(sum(amount),0) AS paid,
							IFNULL(sum(discount),0) AS discount
						FROM
							'.$this->db->dbprefix('payments').'
						GROUP BY
							sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
			 ->join('groups','groups.id=users.group_id','left')
			 ->where("saleman_id <>", 0)			 
			 ->group_by("users.id");
			
			if ($start_date) {
				$this->db->where('date(date) >=', $this->cus->fld($start_date));
				$this->db->where('date(date) <=', $this->cus->fld($end_date,false,1));
			}
			if($saleman){
				$this->db->where('sales.saleman_id', $saleman);
			}
			if($user){
				$this->db->where('sales.created_by', $user);
			}
			if($biller){
				$this->db->where('sales.biller_id', $biller);
			}
			if($project){
				$this->db->where('sales.project_id', $project);
			}
			if($warehouse){
				$this->db->where('sales.warehouse_id', $warehouse);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
			if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where('created_by='.$this->session->userdata('user_id').' OR saleman_id='.$this->session->userdata('user_id').'', NULL, FALSE); 
				
			} elseif ($this->Customer) {
				$this->db->where('customer_id', $this->session->userdata('user_id'));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('saleman_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('group'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('username'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_sale'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('amount'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('balance'));

                $row 		= 2;
                $total_sale = 0;
				$amount 	= 0;
				$discount 	= 0;
				$balance 	= 0;
				$paid 		= 0;
                foreach ($data as $data_row){
					
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->group_name);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->username);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->email);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->total_sale));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->amount));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->balance));
					$total_sale += $data_row->total_sale;
					$amount 	+= $data_row->amount;
					$paid 		+= $data_row->paid;
					$discount 	+= $data_row->discount;
					$balance 	+= $data_row->balance;
					$row++;
                }
				
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total_sale);
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $amount);
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $discount);
				$this->excel->getActiveSheet()->SetCellValue('J' . $row, $balance);
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

				$filename = 'saleman_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
			
		} else{
			
			$this->load->library('datatables');
			$this->datatables->select("
						users.saleman_group as group_name, 
						IFNULL(concat(last_name,' ', first_name),'N/A') as username, 
						IFNULL(email,'N/A') as email,
						IFNULL(phone,'N/A') as phone,
						biller,
						COUNT(cus_sales.id) as total_sale,
						SUM(grand_total) as amount,
						IFNULL(SUM(cus_payments.paid),0) as paid, 
						IFNULL(SUM(cus_payments.discount),0) as discount,
						(SUM(grand_total) - (IFNULL(SUM(cus_payments.paid),0) + IFNULL(SUM(cus_payments.discount),0))) AS balance")
			 ->from('sales')
			 ->join("users","users.id = saleman_id AND users.saleman=1","inner")
			 ->join('(SELECT
							sale_id,
							IFNULL(sum(amount),0) AS paid,
							IFNULL(sum(discount),0) AS discount
						FROM
							'.$this->db->dbprefix('payments').'
						GROUP BY
							sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
			 ->where("saleman_id <>", 0)			 
			 ->group_by("users.id");
			
			if ($start_date) {
				$this->datatables->where('date(date) >=', $this->cus->fld($start_date));
				$this->datatables->where('date(date) <=', $this->cus->fld($end_date,false,1));
			}
			
			if($saleman){
				$this->datatables->where('sales.saleman_id', $saleman);
			}
			if($user){
				$this->datatables->where('sales.created_by', $user);
			}
			if($biller){
				$this->datatables->where('sales.biller_id', $biller);
			}
			if($project){
				$this->datatables->where('sales.project_id', $project);
			}
			if($warehouse){
				$this->datatables->where('sales.warehouse_id', $warehouse);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('created_by='.$this->session->userdata('user_id').' OR saleman_id='.$this->session->userdata('user_id').'', NULL, FALSE); 
			} elseif ($this->Customer) {
				$this->datatables->where('customer_id', $this->session->userdata('user_id'));
			}
			
			echo $this->datatables->generate();
		}
    }
	
	public function sales_detail()
	{	
		$this->cus->checkPermissions('sales_detail');
		$this->load->model('pos_model');
		if(isset($_POST['form_action']) && $_POST['form_action'] == "export_excel"){
			$this->sales_detail_actions(true);
		}
		$this->data['pos_settings'] = $this->pos_model->getSetting();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
		$this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['sales'] = $this->reports_model->getAllSalesDetail($this->input->post());		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_detail_report')));
        $meta = array('page_title' => lang('sales_detail_report'), 'bc' => $bc);
        $this->core_page('reports/sales_detail', $meta, $this->data);
	}
	
	public function sales_detail_actions($xls = false, $pdf = false)
	{
		if ($xls || $pdf) {
			
			$post = $this->input->post();
			
			if($post['user']){
				$this->db->where('sales.created_by', $post['user']);
			}
			
			if($post['biller']){
				$this->db->where('sales.biller_id', $post['biller']);
			}
			
			if($post['project']){
				$this->db->where('sales.project_id', $post['project']);
			}
			if($post['product']){
				$this->db->where('sale_items.product_id', $post['product']);
			}
			
			if($post['customer']){
				$this->db->where('sales.customer_id', $post['customer']);
			}
			
			if($post['serial_no']){
				$this->db->where('sale_items.serial_no', $post['serial_no']);
			}
			
			if($post['warehouse']){
				$this->db->where('sales.warehouse_id', $post['warehouse']);
			}
			if($post['saleman']){
				$this->db->where('sales.saleman_id', $post['saleman']);
			}
			
			if ($post['start_date']) {
				$this->db->where('date >=', $this->cus->fld($post['start_date']));
			}else{
				$this->db->where('date(date) >=', date('Y-m-d'));
			}
			if ($post['end_date']) {
				$this->db->where('date <=', $this->cus->fld($post['end_date'],false,1));
			}else{
				$this->db->where('date(date) <=', date('Y-m-d'));
			}
			
			if($post['reference_no']){
				$reference_no = trim($post['reference_no']);
				$this->db->where('sales.reference_no', $reference_no);
			}
			if($post['sale_type']){
				if($post['sale_type']=="sale"){
					$this->db->where('sales.pos !=', 1);
				}else if($post['sale_type']=="pos"){
					$this->db->where('sales.pos', 1);
				}
			}
			if($post['sale_tax']){
				if($post['sale_tax']=="yes"){
					$this->db->where('IFNULL('.$this->db->dbprefix("sales").'.order_tax,0)!=', 0);
				}else if($post['sale_tax']=="no"){
					$this->db->where('IFNULL('.$this->db->dbprefix("sales").'.order_tax,0)', 0);
				}
			}
			
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
		
            $this->db->select("sales.*,companies.code as customer_code")
					 ->from('sales')
					 ->join("sale_items","sale_items.sale_id=sales.id","left")
					 ->join("companies","companies.id = sales.customer_id","left")
					 ->group_by('sales.id')
					 ->where(' ( sale_status <> "returned" OR sale_status <> "draft") ')
					 ->order_by('reference_no','asc');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('customer_code'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('unit'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('unit_price'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('subtotal'));
				
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('order_discount'));
				$this->excel->getActiveSheet()->SetCellValue('N1', lang('order_tax'));
				$this->excel->getActiveSheet()->SetCellValue('O1', lang('shipping'));
				$this->excel->getActiveSheet()->SetCellValue('P1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('Q1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('R1', lang('balance'));
				
				$style = array(
								'font'  => array(
									'bold'  => true,
									'size'  => 9,
									'name'  => 'Arial'
								));
				$this->excel->getActiveSheet()->getStyle('A1:R1')->applyFromArray($style);

                $row = 2;
				$total = 0;
                $order_discount = 0;
				$order_tax = 0;
                $shipping = 0;
				$grand_total = 0;
				$paid = 0;
				$balance = 0;
                foreach ($data as $data_row){		
					$total += $data_row->total;
					$order_discount += $data_row->order_discount;
					$order_tax += $data_row->order_tax;
					$shipping += $data_row->shipping;
					$grand_total += $data_row->grand_total;
					$paid += $data_row->paid;
					$balance += ($data_row->grand_total- $data_row->paid);
					
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->customer_code);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->total));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($data_row->order_discount));
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($data_row->order_tax));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->formatDecimal($data_row->shipping));
					$this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->cus->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->cus->formatDecimal($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->cus->formatDecimal($data_row->grand_total- $data_row->paid));
					
					$style = array(
									'font'  => array(
										'size'  => 9,
										'name'  => 'Arial'
									)
								);
								
					$this->excel->getActiveSheet()->getStyle('A'.$row.':R'.$row)->applyFromArray($style);
					
					$sale_items = $this->db->select("sale_items.*", FALSE)
										   ->from("sale_items")
										   ->where("sale_id",$data_row->id)
										   ->group_by("sale_items.id")
										   ->get()
										   ->result();
					
					foreach($sale_items as $i => $item){
						$unit = $this->site->getUnitByID($item->product_unit_id);
						$unit_price = 0;
						if($item->item_discount > 0){
							$unit_price = $item->unit_price + ($item->item_discount / $item->unit_quantity) ;
						}else{
							$unit_price = $item->unit_price;
						}
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $item->product_code);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $item->product_name);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($item->quantity));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $unit->name);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($unit_price));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($item->item_discount));
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($item->subtotal));
						$this->excel->getActiveSheet()->getStyle('A'.$row.':R'.$row)->applyFromArray($style);
						$row++;
					}
					
                    $row++;
                }
				$this->excel->getActiveSheet()->getStyle('E1:G1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
				$this->excel->getActiveSheet()->getStyle('G1:G1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('H1:H1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('I1:I1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('J1:J1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('K1:K1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('L1:L1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('M1:M1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('N1:N1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('O1:O1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('P1:P1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('Q1:Q1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('R1:R1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

	              
				$this->excel->getActiveSheet()->getStyle("L" . $row . ":R" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($total));
				$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($order_discount));
				$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($order_tax));
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->formatDecimal($shipping));
				$this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->cus->formatDecimal($grand_total));
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->cus->formatDecimal($paid));	
				$this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->cus->formatDecimal($balance));		
				  
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(13);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(13);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(13);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(13);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(13);
				
      
				$filename = 'sales_detail_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
			
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
		}
	}
	
	public function purchases_detail()
	{	
		$this->cus->checkPermissions('purchases_detail');
		if(isset($_POST['form_action']) && $_POST['form_action'] == "export_excel"){
			$this->purchases_detail_actions(true);
		}
		$this->data['purchases'] = $this->reports_model->getAllPurchasetail($this->input->post());
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('purchases_detail_report')));
        $meta = array('page_title' => lang('purchases_detail_report'), 'bc' => $bc);
        $this->core_page('reports/purchases_detail', $meta, $this->data);
	}
	
	public function purchases_detail_actions($xls = false, $pdf = false)
	{
		if ($xls || $pdf) {
			
			$post = $this->input->post();
			
			if($post['user']){
				$this->db->where('purchases.created_by', $post['user']);
			}
			
			if($post['biller']){
				$this->db->where('purchases.biller_id', $post['biller']);
			}
			
			if($post['project']){
				$this->db->where('purchases.project_id', $post['project']);
			}
			
			if($post['supplier']){
				$this->db->where('purchases.supplier_id', $post['supplier']);
			}
			

			if($post['warehouse']){
				$this->db->where('purchases.warehouse_id', $post['warehouse']);
			}

			if ($post['start_date']) {
				$this->db->where('date('.$this->db->dbprefix("purchases").'.date) >=', $this->cus->fld($post['start_date']));
				$this->db->where('date('.$this->db->dbprefix("purchases").'.date) <=', $this->cus->fld($post['end_date'],false,1));
			}else{
				$this->db->where('date('.$this->db->dbprefix("purchases").'.date) =', date('Y-m-d'));
			}
			
			if($post['reference_no']){
				$reference_no = trim($post['reference_no']);
				$this->db->where('purchases.reference_no', $reference_no);
			}
			
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('purchases.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('purchases.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
			$this->db->where('purchases.status !=', 'draft');
			$this->db->where('purchases.status !=', 'freight');
		
            $this->db->select("purchases.*")
					 ->from('purchases')
					 ->join("purchase_items","purchase_items.purchase_id=purchases.id","left")
					 ->group_by('purchases.id')
					 ->order_by('reference_no','asc');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('supplier'));
				
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('unit'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('unit_cost'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('subtotal'));
				
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('order_discount'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('order_tax'));
				$this->excel->getActiveSheet()->SetCellValue('N1', lang('shipping'));
				$this->excel->getActiveSheet()->SetCellValue('O1', lang('order_discount'));
				$this->excel->getActiveSheet()->SetCellValue('P1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('Q1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('R1', lang('balance'));
				
				$style = array(
								'font'  => array(
									'bold'  => true,
									'size'  => 9,
									'name'  => 'Arial'
								));
				$this->excel->getActiveSheet()->getStyle('A1:R1')->applyFromArray($style);

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row){					
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->total));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->order_discount));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($data_row->order_tax));
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($data_row->shipping));
					$this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->formatDecimal($data_row->order_discount));
					$this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->cus->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->cus->formatDecimal($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->cus->formatDecimal($data_row->grand_total- $data_row->paid));
					
					$style = array(
									'font'  => array(
										'size'  => 9,
										'name'  => 'Arial'
									)
								);
								
					$this->excel->getActiveSheet()->getStyle('A'.$row.':R'.$row)->applyFromArray($style);
					
					$purchase_items = $this->db->select("purchase_items.*", FALSE)
										   ->from("purchase_items")
										   ->where("purchase_id",$data_row->id)
										   ->group_by("purchase_items.id")
										   ->get()
										   ->result();
					
					foreach($purchase_items as $i => $item){
						$unit = $this->site->getUnitByID($item->product_unit_id);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $item->product_code);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $item->product_name);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($item->quantity));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $unit->name);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($item->unit_cost));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($item->item_discount));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($item->subtotal));
						$this->excel->getActiveSheet()->getStyle('P'.$row.':R'.$row)->applyFromArray($style);
						$row++;
					}
					
                    $row++;
                }
				$this->excel->getActiveSheet()->getStyle('E1:E1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
				$this->excel->getActiveSheet()->getStyle('F1:F1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('G1:G1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('H1:H1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('I1:I1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('J1:J1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('K1:K1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('L1:L1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('M1:M1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('N1:N1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('O1:O1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('P1:P1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				$this->excel->getActiveSheet()->getStyle('Q1:Q1256')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                                   
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(13);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(13);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(13);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(13);
				$this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(13);
				

				$filename = 'purchases_detail_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
               
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
			
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
		}
	}
	
	public function products_promotion_report()
    {        
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');        
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('products_promotion_report')));
        $meta = array('page_title' => lang('products_promotion_report'), 'bc' => $bc);
        $this->core_page('reports/products_promotion_report', $meta, $this->data);
    }
	
	public function getProductsPromotionReport()
    {
		$allow_category = $this->site->getCategoryByProject();
		if ($allow_category) {
			$this->db->where_in($this->db->dbprefix('products') . ".category_id", $allow_category);
		}
        $this->load->library('datatables');
        $this->datatables
            ->select("
				products.code, 
				products.name,
				products.type, 
				categories.name as category,
				promo_price, 
				start_date, 
				end_date,
				")
            ->from('products')
			->join('categories', 'categories.id=category_id', 'left')
			->where('promotion >', 0);	
        if (isset($action)) {
            $this->datatables->add_column("Actions", $action, "id");
        }		
    
        echo $this->datatables->generate();
    }
	
	public function ar_aging()
	{
		$this->cus->checkPermissions('ar_aging');
		$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getWarehouses();		
		$this->data['salesman'] = $this->reports_model->getAllSaleman($this->input->post());		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('ar_aging')));
        $meta = array('page_title' => lang('ar_aging'), 'bc' => $bc);
        $this->core_page('reports/ar_aging', $meta, $this->data);
	}
	
	public function getARAging($pdf = NULL, $xls = NULL, $raw = NULL, $raw_xls = NULL)
	{	
		$customer_id = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$cid = $this->input->get('cid') ? $this->input->get('cid') : NULL;
		$biller_id = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$warehouse_id = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
		$v = "";		
		if($biller_id){
			$v .= " AND biller_id={$biller_id}";
		}
		if($customer_id){
			$v .= " AND customer_id={$customer_id}";
		}
		if($warehouse_id){
			$v .= " AND warehouse_id={$warehouse_id}";
		}
		if($saleman){
			$v .= " AND saleman_id={$saleman}";
		}
		if ($this->input->get('end_date')) {
			$v .= " AND date(date) <= '".$this->cus->fsd($this->input->get('end_date'))."'";
            $cur_date = $this->cus->fsd($this->input->get('end_date'));
        }else{
            $cur_date = date('Y-m-d');
        }		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$v .= " AND biller_id={$this->session->userdata('biller_id')}";
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$v .= " AND warehouse_id IN ".$warehouse_ids;
		}
		
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
			$v .= " AND (saleman_id={$user} OR created_by={$user})";
        }
		

		$balance0 = "IFNULL((SELECT
							(SUM(IFNULL(grand_total,0)) - SUM(IFNULL(ppaid,0) - IFNULL(paid_total_return,0))) - SUM(IFNULL(pdiscount,0)) - SUM(IFNULL(grand_total_return,0))
						FROM
							cus_sales
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(amount),0) AS ppaid,
							IFNULL(sum(discount),0) AS pdiscount
						FROM
							cus_payments
						GROUP BY
							sale_id) as cus_payments ON cus_payments.sale_id=cus_sales.id
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(abs(grand_total)),0) AS grand_total_return,
							IFNULL(sum(abs(paid)),0) AS paid_total_return
						FROM
							cus_sales
						WHERE 
							cus_sales.sale_id > 0
						AND cus_sales.sale_status = 'returned'	
						GROUP BY
							cus_sales.sale_id) as cus_return ON cus_return.sale_id=cus_sales.id	
						WHERE
							customer_id = v.customer_id
						AND (cus_sales.sale_id IS NULL OR cus_sales.sale_id =0)
						AND DATE(cus_sales.date) = '".$cur_date."'
						{$v} ),0)";
						
		$balance1 = "IFNULL((SELECT 
		                    (SUM(IFNULL(grand_total,0)) - SUM(IFNULL(ppaid,0) - IFNULL(paid_total_return,0))) - SUM(IFNULL(pdiscount,0)) - SUM(IFNULL(grand_total_return,0))
						FROM
							cus_sales
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(amount),0) AS ppaid,
							IFNULL(sum(discount),0) AS pdiscount
						FROM
							cus_payments
						GROUP BY
							sale_id) as cus_payments ON cus_payments.sale_id=cus_sales.id
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(abs(grand_total)),0) AS grand_total_return,
							IFNULL(sum(abs(paid)),0) AS paid_total_return
						FROM
							cus_sales
						WHERE 
							cus_sales.sale_id > 0
						AND cus_sales.sale_status = 'returned'	
						GROUP BY
							cus_sales.sale_id) as cus_return ON cus_return.sale_id=cus_sales.id	
						WHERE
							customer_id = v.customer_id
						AND (cus_sales.sale_id IS NULL OR cus_sales.sale_id =0)
						AND DATE(cus_sales.date) BETWEEN '".$cur_date."' - INTERVAL 30 DAY AND '".$cur_date."' - INTERVAL 1 DAY
						{$v}),0)";
		
		$balance2 = "IFNULL((SELECT
							(SUM(IFNULL(grand_total,0)) - SUM(IFNULL(ppaid,0) - IFNULL(paid_total_return,0))) - SUM(IFNULL(pdiscount,0)) - SUM(IFNULL(grand_total_return,0))
						FROM
							cus_sales
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(amount),0) AS ppaid,
							IFNULL(sum(discount),0) AS pdiscount
						FROM
							cus_payments
						GROUP BY
							sale_id) as cus_payments ON cus_payments.sale_id=cus_sales.id
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(abs(grand_total)),0) AS grand_total_return,
							IFNULL(sum(abs(paid)),0) AS paid_total_return
						FROM
							cus_sales
						WHERE 
							cus_sales.sale_id > 0
						AND cus_sales.sale_status = 'returned'	
						GROUP BY
							cus_sales.sale_id) as cus_return ON cus_return.sale_id=cus_sales.id	
						WHERE
							customer_id = v.customer_id
						AND (cus_sales.sale_id IS NULL OR cus_sales.sale_id =0)
						AND DATE(cus_sales.date) BETWEEN '".$cur_date."' - INTERVAL 60 DAY AND '".$cur_date."' - INTERVAL 31 DAY
						{$v} ),0)";
		
		$balance3 = "IFNULL((SELECT
							(SUM(IFNULL(grand_total,0)) - SUM(IFNULL(ppaid,0) - IFNULL(paid_total_return,0))) - SUM(IFNULL(pdiscount,0)) - SUM(IFNULL(grand_total_return,0))
						FROM
							cus_sales
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(amount),0) AS ppaid,
							IFNULL(sum(discount),0) AS pdiscount
						FROM
							cus_payments
						GROUP BY
							sale_id) as cus_payments ON cus_payments.sale_id=cus_sales.id
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(abs(grand_total)),0) AS grand_total_return,
							IFNULL(sum(abs(paid)),0) AS paid_total_return
						FROM
							cus_sales
						WHERE 
							cus_sales.sale_id > 0
						AND cus_sales.sale_status = 'returned'	
						GROUP BY
							cus_sales.sale_id) as cus_return ON cus_return.sale_id=cus_sales.id	
						WHERE
							customer_id = v.customer_id
						AND (cus_sales.sale_id IS NULL OR cus_sales.sale_id =0)
						AND DATE(cus_sales.date) BETWEEN '".$cur_date."' - INTERVAL 90 DAY AND '".$cur_date."' - INTERVAL 61 DAY
						{$v} ),0)";
		
		$balance4 = "IFNULL((SELECT
							(SUM(IFNULL(grand_total,0)) - SUM(IFNULL(ppaid,0) - IFNULL(paid_total_return,0))) - SUM(IFNULL(pdiscount,0)) - SUM(IFNULL(grand_total_return,0))
						FROM
							cus_sales
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(amount),0) AS ppaid,
							IFNULL(sum(discount),0) AS pdiscount
						FROM
							cus_payments
						GROUP BY
							sale_id) as cus_payments ON cus_payments.sale_id=cus_sales.id
						LEFT JOIN (SELECT
						    sale_id,
							IFNULL(sum(abs(grand_total)),0) AS grand_total_return,
							IFNULL(sum(abs(paid)),0) AS paid_total_return
						FROM
							cus_sales
						WHERE 
							cus_sales.sale_id > 0
						AND cus_sales.sale_status = 'returned'	
						GROUP BY
							cus_sales.sale_id) as cus_return ON cus_return.sale_id=cus_sales.id	
						WHERE
							customer_id = v.customer_id
						AND (cus_sales.sale_id IS NULL OR cus_sales.sale_id =0)
						AND DATE(cus_sales.date) BETWEEN '".$cur_date."' - INTERVAL 20 YEAR AND '".$cur_date."' - INTERVAL 91 DAY
						{$v} ),0)";
		
		if ($pdf || $xls || $raw) {
			if (!$this->Owner && !$this->GP['bulk_actions']) {
				$this->session->set_flashdata('warning', lang('access_denied'));
				redirect($_SERVER["HTTP_REFERER"]);
			}
			$query = "(SELECT 
							customer_id as id,
							IFNULL(customer,'') as customer,
							{$balance0} as balance0,
							{$balance1} as balance1,
							{$balance2} as balance2,
							{$balance3} as balance3,
							{$balance4} as balance4,
							IFNULL({$balance0},0)+IFNULL({$balance1},0)+IFNULL({$balance2},0)+IFNULL({$balance3},0)+IFNULL({$balance4},0) as total
						FROM ".$this->db->dbprefix('sales')." as v
						WHERE payment_status != 'paid'
						AND sale_status != 'returned'
						".$v."
						GROUP BY customer_id) as ar_arging";
			$this->db->select("id,customer,balance0,balance1,balance2,balance3,balance4,total")
				->where('total >','0')
				->order_by('customer')
				->from($query);				
			if ($cid) {
                $this->db->where('id IN ('.$cid.')');
                $this->db->group_by('id');
            }			
            $q = $this->db->get();			
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row){
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
				
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
				$style = array(
								'font'  => array(
									'bold'  => true,
								));
				$this->excel->getActiveSheet()->getStyle('A1:R1')->applyFromArray($style);
                $this->excel->getActiveSheet()->setTitle(lang('ar_aging_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('current'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('0 - 30 Days'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('31 - 60 Days'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('61 - 90 Days'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('> 90 Days'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('total'));
                $balance0 = 0; $balance1 = 0; $balance2 = 0; $balance3 = 0; $balance4 = 0; $g_total = 0;
				$row = 2;
                foreach ($data as $data_row) {
					if($data_row->total > 0){
						$style = array(
								'font'  => array(
									'bold'  => false,
								));
						$this->excel->getActiveSheet()->getStyle('A'.$row.':R'.$row.'')->applyFromArray($style);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->customer);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->formatDecimal($data_row->balance0));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatDecimal($data_row->balance1));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->balance2));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->balance3));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->balance4));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->total));
						
						// Export Raw Data AR Aging Details
						if($raw_xls){
							$row += 1;
							$style = array(
								'font'  => array(
									'bold'  => false,
								));
							$this->excel->getActiveSheet()->getStyle('A'.$row.':R'.$row.'')->applyFromArray($style);
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, lang('reference_no'));
							$this->excel->getActiveSheet()->SetCellValue('B' . $row, lang('saleman'));
							$this->excel->getActiveSheet()->SetCellValue('C' . $row, lang('grand_total'));
							$this->excel->getActiveSheet()->SetCellValue('D' . $row, lang('return'));
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('paid'));
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang('discount'));
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang('balance'));
							$parents = $this->reports_model->getARAgingByCustomerID($data_row->id,"total");
							if($parents){
								$row += 1;
								foreach($parents as $parent){
									$balance = $parent->grand_total - ($parent->amount) - ($parent->discount)- ($parent->grand_total_return);
									if($balance !=0){
										$this->excel->getActiveSheet()->getStyle('A'.$row.':R'.$row.'')->applyFromArray($style);
										$this->excel->getActiveSheet()->SetCellValue('A' . $row, $parent->reference_no);
										$this->excel->getActiveSheet()->SetCellValue('B' . $row, ucfirst($parent->saleman));
										$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatDecimal($parent->grand_total));
										$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($parent->grand_total_return));
										$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($parent->paid));
										$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($parent->discount));
										$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($parent->grand_total-($parent->paid+$parent->discount+$parent->grand_total_return)));
										$row++;
									}
								}
							}
							$row += 0;
						}
						// End Raw Data AR Aging Details
						$balance0 += $data_row->balance0;
						$balance1 += $data_row->balance1;
						$balance2 += $data_row->balance2;
						$balance3 += $data_row->balance3;
						$balance4 += $data_row->balance4;
						$g_total += $data_row->total;
						$row++;
					}
                }
				$style = array(
								'font'  => array(
									'bold'  => false,
								));
				$this->excel->getActiveSheet()->getStyle('A'.$row.':R'.$row.'')->applyFromArray($style);
                $this->excel->getActiveSheet()->getStyle("B" . $row . ":G" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->formatDecimal($balance0));
				$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatDecimal($balance1));
				$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($balance2));
				$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($balance3));
				$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($balance4));
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($g_total));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
 
				$filename = 'ar_aging_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
			
			// Return with Raw Data
			if($raw){
				return $data;
			}
			// End Return with Raw Data
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
		}else{
			$this->load->library('datatables');
			$query = "(SELECT 
							customer_id as id,
							IFNULL(customer,'') as customer,
							{$balance0} as balance0,
							{$balance1} as balance1,
							{$balance2} as balance2,
							{$balance3} as balance3,
							{$balance4} as balance4,
							IFNULL({$balance0},0)+IFNULL({$balance1},0)+IFNULL({$balance2},0)+IFNULL({$balance3},0)+IFNULL({$balance4},0) as total
						FROM ".$this->db->dbprefix('sales')." as v
						WHERE payment_status != 'paid'
						AND sale_status != 'returned'
						".$v."
						GROUP BY customer_id) as ar_arging";
			$this->datatables->select("id,customer,balance0,balance1,balance2,balance3,balance4,total")
				->where('total >','0')
				->from($query);
			echo $this->datatables->generate();		
		}
	}
	
	public function ar_aging_view($id = null, $end_date, $biller_id = false)
    {        
        if ($this->input->get('p')) {
            $type_id = $this->input->get('p');
        }
		if($biller_id > 0){
			$biller_id = $biller_id;
			$where_biller = $biller_id;
		}else if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller_id = $this->session->userdata('biller_id');
			$where_biller = $biller_id;	
		}else{
			$company = $this->site->getAllCompanies('biller');
			$biller_id = $company[0]->id;
			$where_biller = false;
		}
		$this->data['biller'] = $this->site->getCompanyByID($biller_id);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['rows'] = $this->reports_model->getARAgingByCustomerID($id, $type_id, $end_date, $where_biller);
		$this->data['customer'] = $this->site->getCompanyByID($id);
		$this->data['modal_js'] = $this->site->modal_js();
        $this->load->view($this->theme . 'reports/ar_aging_view', $this->data);
    }
	
	public function ap_aging()
	{
		$this->cus->checkPermissions('ap_aging');
		$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();		
		$this->data['salesman'] = $this->reports_model->getAllSaleman($this->input->post());		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('ap_aging')));
        $meta = array('page_title' => lang('ap_aging'), 'bc' => $bc);
        $this->core_page('reports/ap_aging', $meta, $this->data);
	}
	
	public function getAPAging($pdf = NULL, $xls = NULL)
	{	
		$supplier_id = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
		$cid = $this->input->get('cid') ? $this->input->get('cid') : NULL;
		$biller_id = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$warehouse_id = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
		
		$v = "";		
		if($biller_id){
			$v .= " AND biller_id={$biller_id}";
		}
		if($supplier_id){
			$v .= " AND supplier_id={$supplier_id}";
		}
		if($warehouse_id){
			$v .= " AND warehouse_id={$warehouse_id}";
		}
        if ($this->input->get('end_date')) {
            $v .= " AND date(date) <= '".$this->cus->fsd($this->input->get('end_date'))."'";
            $cur_date = $this->cus->fsd($this->input->get('end_date'));
        }else{
            $cur_date = date('Y-m-d');
        }
		
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
			$v .= " AND created_by={$user}";
        }
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$v .= " AND biller_id={$this->session->userdata('biller_id')}";
		}

		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse = "";
			$warehouse_ids = json_decode($this->session->userdata('warehouse_id'));
			if($warehouse_ids){
				$i = 1;
				foreach($warehouse_ids as $warehouse_id){
					if($i==1){
						$warehouse .= "IFNULL(".$warehouse_id.",0)";
						$i = 2;
					}else{
						$warehouse .= ",IFNULL(".$warehouse_id.",0)";
					}
				}
			}
			$v .= " AND warehouse_id IN (".$warehouse.")";
		}

		$balance0 = "IFNULL((SELECT
							sum(cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(IFNULL(cus_purchases.return_purchase_total,0)))
						FROM
							cus_purchases
						LEFT JOIN (
								SELECT 
									purchase_id,
									abs(paid) as return_paid 
								FROM 
									cus_purchases 
								WHERE 
									purchase_id > 0 
								AND status <> 'draft' 
								AND status <> 'freight'
						) as pur_return ON pur_return.purchase_id = cus_purchases.id
						WHERE
							supplier_id = v.supplier_id
						AND status != 'returned'				
						AND DATE(cus_purchases.date) = '".$cur_date."'
						{$v} ),0)";
					
		$balance1 = "IFNULL((SELECT
							sum(cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(IFNULL(cus_purchases.return_purchase_total,0)))
						FROM
							cus_purchases
						LEFT JOIN (
								SELECT 
									purchase_id,
									abs(paid) as return_paid 
								FROM 
									cus_purchases 
								WHERE 
									purchase_id > 0 
								AND status <> 'draft' 
								AND status <> 'freight'
						) as pur_return ON pur_return.purchase_id = cus_purchases.id
						WHERE
							supplier_id = v.supplier_id
						AND status != 'returned'	
						AND DATE(cus_purchases.date) BETWEEN '".$cur_date."' - INTERVAL 30 DAY AND '".$cur_date."' - INTERVAL 1 DAY
						{$v}),0)";
		
		$balance2 = "IFNULL((SELECT
							sum(cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(IFNULL(cus_purchases.return_purchase_total,0)))
						FROM
							cus_purchases
						LEFT JOIN (
								SELECT 
									purchase_id,
									abs(paid) as return_paid 
								FROM 
									cus_purchases 
								WHERE 
									purchase_id > 0 
								AND status <> 'draft' 
								AND status <> 'freight'
						) as pur_return ON pur_return.purchase_id = cus_purchases.id
						WHERE
							supplier_id = v.supplier_id
						AND status != 'returned'	
						AND DATE(cus_purchases.date) BETWEEN '".$cur_date."' - INTERVAL 60 DAY AND '".$cur_date."' - INTERVAL 31 DAY
						{$v} ),0)";
		
		$balance3 = "IFNULL((SELECT
							sum(cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(IFNULL(cus_purchases.return_purchase_total,0)))
						FROM
							cus_purchases
						LEFT JOIN (
								SELECT 
									purchase_id,
									abs(paid) as return_paid 
								FROM 
									cus_purchases 
								WHERE 
									purchase_id > 0 
								AND status <> 'draft' 
								AND status <> 'freight'
						) as pur_return ON pur_return.purchase_id = cus_purchases.id
						WHERE
							supplier_id = v.supplier_id
						AND status != 'returned'	
						AND DATE(cus_purchases.date) BETWEEN '".$cur_date."' - INTERVAL 90 DAY AND '".$cur_date."' - INTERVAL 61 DAY
						{$v} ),0)";
		
		$balance4 = "IFNULL((SELECT
							sum(cus_purchases.grand_total-(IFNULL(cus_purchases.paid,0) - IFNULL(return_paid,0))-abs(IFNULL(cus_purchases.return_purchase_total,0)))
						FROM
							cus_purchases
						LEFT JOIN (
								SELECT 
									purchase_id,
									abs(paid) as return_paid 
								FROM 
									cus_purchases 
								WHERE 
									purchase_id > 0 
								AND status <> 'draft' 
								AND status <> 'freight'
						) as pur_return ON pur_return.purchase_id = cus_purchases.id
						WHERE
							supplier_id = v.supplier_id
						AND status != 'returned'	
						AND DATE(cus_purchases.date) BETWEEN '".$cur_date."' - INTERVAL 20 YEAR AND '".$cur_date."' - INTERVAL 91 DAY
						{$v} ),0)";
		
		$balance0_1 = 0;
		$balance1_1 = 0;
		$balance2_1 = 0;
		$balance3_1 = 0;
		$balance4_1 = 0;
		$union 		= "";
		if($this->Settings->payment_expense ==1){
			
			$balance0_1 = "IFNULL((SELECT
							sum(cus_expenses.grand_total- IFNULL(cus_expenses.paid,0))
						FROM
							cus_expenses
						WHERE
							supplier_id = v.supplier_id				
						AND DATE(cus_expenses.date) = '".$cur_date."'
						{$v} ),0)";
		
			$balance1_1 = "IFNULL((SELECT
								sum(cus_expenses.grand_total- IFNULL(cus_expenses.paid,0))
							FROM
								cus_expenses
							WHERE
								supplier_id = v.supplier_id				
							AND DATE(cus_expenses.date) BETWEEN '".$cur_date."' - INTERVAL 30 DAY AND '".$cur_date."' - INTERVAL 1 DAY
							{$v}),0)";
			
			$balance2_1 = "IFNULL((SELECT
								sum(cus_expenses.grand_total- IFNULL(cus_expenses.paid,0))
							FROM
								cus_expenses
							WHERE
								supplier_id = v.supplier_id	
							AND DATE(cus_expenses.date) BETWEEN '".$cur_date."' - INTERVAL 60 DAY AND '".$cur_date."' - INTERVAL 31 DAY
							{$v} ),0)";
			
			$balance3_1 = "IFNULL((SELECT
								sum(cus_expenses.grand_total- IFNULL(cus_expenses.paid,0))
							FROM
								cus_expenses
							WHERE
								supplier_id = v.supplier_id	
							AND DATE(cus_expenses.date) BETWEEN '".$cur_date."' - INTERVAL 90 DAY AND '".$cur_date."' - INTERVAL 61 DAY
							{$v} ),0)";
			
			$balance4_1 = "IFNULL((SELECT
								sum(cus_expenses.grand_total- IFNULL(cus_expenses.paid,0))
							FROM
								cus_expenses
							WHERE
								supplier_id = v.supplier_id
							AND DATE(cus_expenses.date) BETWEEN '".$cur_date."' - INTERVAL 20 YEAR AND '".$cur_date."' - INTERVAL 91 DAY
							{$v} ),0)";
			
			$union = " UNION SELECT 
							supplier_id as id,
							IFNULL(supplier,'') as supplier,
							{$balance0_1} as balance0,
							{$balance1_1} as balance1,
							{$balance2_1} as balance2,
							{$balance3_1} as balance3,
							{$balance4_1} as balance4,
							IFNULL({$balance0_1},0)+IFNULL({$balance1_1},0)+IFNULL({$balance2_1},0)+IFNULL({$balance3_1},0)+IFNULL({$balance4_1},0) as total
						FROM ".$this->db->dbprefix('expenses')." as v
						WHERE v.supplier_id > 0 ".$v." GROUP BY supplier_id";
		}
		
		if ($xls) {
			
			if (!$this->Owner && !$this->GP['bulk_actions']) {
				$this->session->set_flashdata('warning', lang('access_denied'));
				redirect($_SERVER["HTTP_REFERER"]);
			}
			
			$query = "(SELECT 
							supplier_id as id,
							IFNULL(supplier,'') as supplier,
							{$balance0} as balance0,
							{$balance1} as balance1,
							{$balance2} as balance2,
							{$balance3} as balance3,
							{$balance4} as balance4,
							IFNULL({$balance0},0)+IFNULL({$balance1},0)+IFNULL({$balance2},0)+IFNULL({$balance3},0)+IFNULL({$balance4},0) as total
						FROM ".$this->db->dbprefix('purchases')." as v
						WHERE payment_status != 'paid' AND status != 'returned' ".$v."
						GROUP BY supplier_id {$union} ) as ap_arging";
						
			$this->db->select("id,
								supplier,
								SUM(balance0) AS balance0,
								SUM(balance1) AS balance1,
								SUM(balance2) AS balance2,
								SUM(balance3) AS balance3,
								SUM(balance4) AS balance4,
								SUM(total) AS total")
					 ->where('total >','0')
					 ->from($query);
				
			if ($cid) {
                $this->db->where('id IN ('.$cid.')');
                $this->db->group_by('id');
            }			
            $q = $this->db->get();			
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row){
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {			
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('ap_aging_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('supplier'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('current'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('0 - 30 Days'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('31 - 60 Days'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('61 - 90 Days'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('> 90 Days'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('total'));
                $balance0 = 0; $balance1 = 0; $balance2 = 0; $balance3 = 0; $balance4 = 0; $g_total = 0;
				$row = 2;
                foreach ($data as $data_row) {
					if($data_row->total > 0){
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->supplier);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->formatDecimal($data_row->balance0));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatDecimal($data_row->balance1));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->balance2));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->balance3));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->balance4));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->total));
						$balance0 += $data_row->balance0;
						$balance1 += $data_row->balance1;
						$balance2 += $data_row->balance2;
						$balance3 += $data_row->balance3;
						$balance4 += $data_row->balance4;
						$g_total += $data_row->total;
						$row++;
					}
                }
				
                $this->excel->getActiveSheet()->getStyle("B" . $row . ":G" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->formatDecimal($balance0));
				$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatDecimal($balance1));
				$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($balance2));
				$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($balance3));
				$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($balance4));
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($g_total));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

				$filename = 'ap_aging_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
				
		}else{
			$this->load->library('datatables');
			$query = "(SELECT 
							supplier_id as id,
							IFNULL(supplier,'') as supplier,
							{$balance0} as balance0,
							{$balance1} as balance1,
							{$balance2} as balance2,
							{$balance3} as balance3,
							{$balance4} as balance4,
							IFNULL({$balance0},0)+IFNULL({$balance1},0)+IFNULL({$balance2},0)+IFNULL({$balance3},0)+IFNULL({$balance4},0) as total
						FROM ".$this->db->dbprefix('purchases')." as v
						WHERE payment_status != 'paid' AND status != 'returned' ".$v."
						GROUP BY supplier_id {$union} ) as ap_arging";
						
			$this->datatables->select("id,
										supplier,
										SUM(balance0) AS balance0,
										SUM(balance1) AS balance1,
										SUM(balance2) AS balance2,
										SUM(balance3) AS balance3,
										SUM(balance4) AS balance4,
										SUM(total) AS total")
 							 ->where('total >','0')
 							 ->from($query)
							 ->group_by("id");
			echo $this->datatables->generate();		
		}
	}
	
	public function ap_aging_view($id = null, $end_date , $biller_id = false)
    {        
        if ($this->input->get('p')) {
            $type_id = $this->input->get('p');
        }		
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		if($biller_id > 0){
			$biller_id = $biller_id;
			$where_biller = $biller_id;
		}else if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller_id = $this->session->userdata('biller_id');
			$where_biller = $biller_id;
		}else{
			$company = $this->site->getAllCompanies('biller');
			$biller_id = $company[0]->id;
			$where_biller = false;	
		}
		$this->data['biller'] = $this->site->getCompanyByID($biller_id);
		$this->data['rows'] = $this->reports_model->getAPAgingBySupplierID($id, $type_id, $end_date, $where_biller);
		$this->data['row_expenses'] = $this->reports_model->getExpensesAPAgingBySupplierID($id, $type_id, $end_date, $where_biller);
		$this->data['supplier'] = $this->site->getCompanyByID($id);
		$this->data['modal_js'] = $this->site->modal_js();
        $this->load->view($this->theme . 'reports/ap_aging_view', $this->data);
    }
	
	public function saleman_group_report()
	{
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();		
		$this->data['salemans'] = $this->site->getSalemans();		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('saleman_group_report')));
        $meta = array('page_title' => lang('saleman_group_report'), 'bc' => $bc);
        $this->core_page('reports/saleman_group_report', $meta, $this->data);
	}
	
	public function getSalemanGroupReports($pdf = NULL, $xls = NULL)
    {	
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
		$end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
			
		if ($xls) {

            $this->db
                ->select("saleman_group as group_name,
						  biller,
						  COUNT(cus_sales.id) as total_sale,
						  SUM(grand_total) as amount,
						  IFNULL(SUM(cus_payments.paid),0) as paid, 
						  IFNULL(SUM(cus_payments.discount),0) as discount,
						  (SUM(grand_total) - (IFNULL(SUM(cus_payments.paid),0) + IFNULL(SUM(cus_payments.discount),0))) AS balance")
				 ->from('sales')
				 ->join("users","users.id = saleman_id","inner")
				 ->join('(SELECT
								sale_id,
								IFNULL(sum(amount),0) AS paid,
								IFNULL(sum(discount),0) AS discount
							FROM
								'.$this->db->dbprefix('payments').'
							GROUP BY
								sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')
				 ->where("saleman_id <>", 0)			 
				 ->group_by("users.saleman_group");
			
			if ($start_date) {
				$this->db->where('date(date) >=', $this->cus->fld($start_date));
				$this->db->where('date(date) <=', $this->cus->fld($end_date,false,1));
			}
			
			if($saleman){
				$this->db->where('sales.saleman_id', $saleman);
			}
			if($user){
				$this->db->where('sales.created_by', $user);
			}
			if($biller){
				$this->db->where('sales.biller_id', $biller);
			}
			if($project){
				$this->db->where('sales.project_id', $project);
			}
			if($warehouse){
				$this->db->where('sales.warehouse_id', $warehouse);
			}
			
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
			if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where('created_by='.$this->session->userdata('user_id').' OR saleman_id='.$this->session->userdata('user_id').'', NULL, FALSE); 
				
			} elseif ($this->Customer) {
				$this->db->where('customer_id', $this->session->userdata('user_id'));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('saleman_group_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('group'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('total_sale'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('amount'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('balance'));

                $row 		= 2;
                $total_sale = 0;
				$amount 	= 0;
				$discount 	= 0;
				$balance 	= 0;
				$paid 		= 0;
                foreach ($data as $data_row) 
				{
					
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->group_name);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatDecimal($data_row->total_sale));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->amount));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->balance));
                    
					$total_sale += $data_row->total_sale;
					$amount 	+= $data_row->amount;
					$paid 		+= $data_row->paid;
					$discount 	+= $data_row->discount;
					$balance 	+= $data_row->balance;
					
					$row++;
                }
				
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $total_sale);
				$this->excel->getActiveSheet()->SetCellValue('D' . $row, $amount);
				$this->excel->getActiveSheet()->SetCellValue('E' . $row, $paid);
				$this->excel->getActiveSheet()->SetCellValue('F' . $row, $discount);
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $balance);
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				

				$filename = 'saleman_group_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
			$this->datatables->select("
							saleman_group as group_name,						
							biller,
							COUNT(cus_sales.id) as total_sale,
							SUM(grand_total) as grand_total,
							IFNULL(SUM(cus_payments.paid),0) as paid, 
							IFNULL(SUM(cus_payments.discount),0) as discount,
							(SUM(grand_total) - (IFNULL(SUM(cus_payments.paid),0) + IFNULL(SUM(cus_payments.discount),0))) AS balance")
				 ->from('sales')
				 ->join("users","users.id = saleman_id","inner")
				 ->join('(SELECT
								sale_id,
								IFNULL(sum(amount),0) AS paid,
								IFNULL(sum(discount),0) AS discount
							FROM
								'.$this->db->dbprefix('payments').'
							GROUP BY
								sale_id) as cus_payments', 'cus_payments.sale_id=sales.id', 'left')

				 ->where("saleman_id <>", 0)			 
				 ->group_by("users.saleman_group");
			
			if ($start_date) {
				$this->datatables->where('date(date) >=', $this->cus->fld($start_date));
				$this->datatables->where('date(date) <=', $this->cus->fld($end_date,false,1));
			}
			
			if($saleman){
				$this->datatables->where('sales.saleman_id', $saleman);
			}
			if($user){
				$this->datatables->where('sales.created_by', $user);
			}
			if($biller){
				$this->datatables->where('sales.biller_id', $biller);
			}
			if($project){
				$this->datatables->where('sales.project_id', $project);
			}
			if($warehouse){
				$this->datatables->where('sales.warehouse_id', $warehouse);
			}
			
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
			if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('created_by='.$this->session->userdata('user_id').' OR saleman_id='.$this->session->userdata('user_id').'', NULL, FALSE); 
				
			} elseif ($this->Customer) {
				$this->datatables->where('customer_id', $this->session->userdata('user_id'));
			}
			
			echo $this->datatables->generate();
		}
    }
				
	public function view_stock_modal()
    {        
		$product_id = false;
		$warehouse_id = false;
		$start_date = false;
		$end_date = false;
		$expiry = false;
		$type = false;
		$opt = false;
        if ($this->input->get('p')) {
            $product_id = $this->input->get('p');
        }
		if ($this->input->get('w')) {
            $warehouse_id = $this->input->get('w');
        }
		if ($this->input->get('s')) {
            $start_date = $this->input->get('s');
        }
		if ($this->input->get('e')) {
            $end_date = $this->input->get('e');
        }
		if ($this->input->get('r')) {
            $expiry = $this->input->get('r');
        }
		if ($this->input->get('t')) {
            $transaction = $this->input->get('t');
        }
		if($this->input->get('o')){
			$type = $this->input->get('o');
		}
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller_id = $this->session->userdata('biller_id');
		}else{
			$company = $this->site->getAllCompanies('biller');
			$biller_id = $company[0]->id;
		}
		$this->data['warehouse'] = $this->site->getWarehouseByID($warehouse_id);
		$this->data['expiry'] = $expiry;
		$this->data['start_date'] = $start_date;
		$this->data['end_date'] = $end_date;
		$this->data['type'] = $type;
		$this->data['transaction'] = $transaction;
		$this->data['user'] = $this->site->getUserByID($this->session->userdata('user_id'));
		$this->data['biller'] = $this->site->getCompanyByID($biller_id);
		$this->data['product'] = $this->site->getProductByID($product_id);
		$this->data['rows'] = $this->reports_model->getAllStockQuantity($transaction,$type,$warehouse_id,$product_id,$start_date,$end_date, $expiry);
		$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');		
		$this->data['modal_js'] = $this->site->modal_js();
        $this->load->view($this->theme . 'reports/view_stock_modal', $this->data);
    }
	
	function count_money_report()
    {
        $this->cus->checkPermissions('register');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('count_money_report')));
        $meta = array('page_title' => lang('count_money_report'), 'bc' => $bc);
        $this->core_page('reports/count_money_report', $meta, $this->data);
    }
	
	function getCountMoney($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('register', TRUE);
		
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }

        if ($xls) {

            $this->db
                ->select("count_money.id as ids,
							count_money.counted_at,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as counted_by,
							count_money.total_amount,
							count_money.total_money_us,
							count_money.total_money_kh,
							count_money.100_riel as m_100_riel,
							count_money.500_riel as m_500_riel,
							count_money.1k_riel as m_1k_riel,
							count_money.2k_riel as m_2k_riel,
							count_money.5k_riel as m_5k_riel,
							count_money.10k_riel as m_10k_riel,
							count_money.20k_riel as m_20k_riel,
							count_money.50k_riel as m_50k_riel,
							count_money.100k_riel as m_100k_riel,
							count_money.1_use as m_1_use,
							count_money.2_use as m_2_use,
							count_money.5_use as m_5_use,
							count_money.10_use as m_10_use,
							count_money.20_use as m_20_use,
							count_money.50_use as m_50_use,
							count_money.100_use as m_100_use,
							count_money.500_use as m_500_use,
							count_money.1k_use as m_1k_use,
				", FALSE)
                ->from("count_money")
                ->join('users', 'users.id=count_money.user_id', 'left')
                ->order_by('counted_at desc');
            
            if ($user) {
                $this->db->where('count_money.user_id', $user);
            }
            if ($start_date) {
                $this->db->where('counted_at BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where('count_money.user_id', $this->session->userdata('user_id'));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('count_money_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('counted_at'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('counted_by'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('total_amount_us'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_amount_kh'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('100_riel'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('500_riel'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('1k_riel'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('2k_riel'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('5k_riel'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('10k_riel'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('20k_riel'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('50k_riel'));
				$this->excel->getActiveSheet()->SetCellValue('N1', lang('100k_riel'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('1_use'));
                $this->excel->getActiveSheet()->SetCellValue('P1', lang('2_use'));
                $this->excel->getActiveSheet()->SetCellValue('Q1', lang('5_use'));
                $this->excel->getActiveSheet()->SetCellValue('R1', lang('10_use'));
                $this->excel->getActiveSheet()->SetCellValue('S1', lang('20_use'));
				$this->excel->getActiveSheet()->SetCellValue('T1', lang('50_use'));
                $this->excel->getActiveSheet()->SetCellValue('U1', lang('100_use'));
                $this->excel->getActiveSheet()->SetCellValue('V1', lang('500_use'));
                $this->excel->getActiveSheet()->SetCellValue('W1', lang('1k_use'));
                $row = 2;
                foreach ($data as $data_row) {
                       $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->counted_at));
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->counted_by);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatDecimal($data_row->total_amount));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->total_money_us));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->total_money_kh));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->m_100_riel);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->m_500_riel);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->m_1k_riel);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->m_2k_riel);
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->m_5k_riel);
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->m_10k_riel);
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->m_20k_riel);
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->m_50k_riel);
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->m_100k_riel);
						$this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->m_1_use);
						$this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->m_2_use);
						$this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->m_5_use);
						$this->excel->getActiveSheet()->SetCellValue('R' . $row, $data_row->m_10_use);
						$this->excel->getActiveSheet()->SetCellValue('S' . $row, $data_row->m_20_use);
						$this->excel->getActiveSheet()->SetCellValue('T' . $row, $data_row->m_50_use);
						$this->excel->getActiveSheet()->SetCellValue('U' . $row, $data_row->m_100_use);
						$this->excel->getActiveSheet()->SetCellValue('V' . $row, $data_row->m_500_use);
						$this->excel->getActiveSheet()->SetCellValue('W' . $row, $data_row->m_1k_use);
                    $row++;
                }

                

				$filename = 'count_money_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("	count_money.id as ids,
							count_money.counted_at,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as counted_by,
							count_money.total_amount,
							count_money.total_money_us,
							count_money.total_money_kh,
							count_money.100_riel,
							count_money.500_riel,
							count_money.1k_riel,
							count_money.2k_riel,
							count_money.5k_riel,
							count_money.10k_riel,
							count_money.20k_riel,
							count_money.50k_riel,
							count_money.100k_riel,
							count_money.1_use,
							count_money.2_use,
							count_money.5_use,
							count_money.10_use,
							count_money.20_use,
							count_money.50_use,
							count_money.100_use,
							count_money.500_use,
							count_money.1k_use,			
				", FALSE)
                ->from("count_money")
                ->join('users', 'users.id=count_money.user_id', 'left');


            if ($user) {
                $this->datatables->where('count_money.user_id', $user);
            }
            if ($start_date) {
                $this->datatables->where('counted_at BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('count_money.user_id', $this->session->userdata('user_id'));
			}

            echo $this->datatables->generate();

        }

    }
	
	function cash_register_report()
    {
        $this->cus->checkPermissions('register');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('cash_register_report')));
        $meta = array('page_title' => lang('cash_register_report'), 'bc' => $bc);
        $this->core_page('reports/cash_register_report', $meta, $this->data);
    }
	
	function getCashRrgisterlogs($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('register', TRUE);
		
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
			$user = $this->session->userdata('user_id');
		}

        if ($xls) {

            $this->db
                ->select("pos_register.id as ids, 
				date, 
				closed_at, 
				CONCAT(" . $this->db->dbprefix('users') . ".last_name, ' ', " . $this->db->dbprefix('users') . ".first_name) as user,				
				IFNULL(cash_in_hand,0) as cash_in_hand,
				IFNULL((total_cash - cash_in_hand),0) as total_payment,				
				IFNULL(total_cash,0) as total_cash,
				IFNULL(total_cash_submitted,0) as total_cash_submitted, 
				CONCAT(closed.last_name,' ',closed.first_name) as closed_by,
				", FALSE)
                ->from("pos_register")
                ->join('users', 'users.id=pos_register.user_id', 'left')
				->join('users as closed', 'closed.id=closed_by', 'left')
                ->order_by('closed_at desc');
            
            if ($user) {
                $this->db->where('pos_register.user_id', $user);
            }
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('register_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('open_time'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('close_time'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('cash_in_hand'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('cash'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_cash'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_cash_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('closed_by'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->closed_at);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->cash_in_hand);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total_payment);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->total_cash);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->total_cash_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->closed_by);
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				
    
				$filename = 'cash_register_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("pos_register.id as ids, 
				date, 
				closed_at, 
				CONCAT(" . $this->db->dbprefix('users') . ".last_name, ' ', " . $this->db->dbprefix('users') . ".first_name) as user,				
				IFNULL(cash_in_hand,0) as cash_in_hand,
				IFNULL((total_cash - cash_in_hand),0) as total_payment,				
				IFNULL(total_cash,0) as total_cash,
				IFNULL(total_cash_submitted,0) as total_cash_submitted, 			
				CONCAT(closed.last_name,' ',closed.first_name) as closed_by,
				", FALSE)
                ->from("pos_register")
                ->join('users', 'users.id=pos_register.user_id', 'left')
				->join('users as closed', 'closed.id=closed_by', 'left');

            if ($user) {
                $this->datatables->where('pos_register.user_id', $user);
            }
            if ($start_date) {
                $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }

	public function get_project()
	{
		$id = $this->input->get("biller");
		$project_id = $this->input->get("project");
		$rows = $this->site->getAllProjectByBillerID($id);
		$user = $this->site->getUser($this->session->userdata("user_id"));
		$project = json_decode($user->project_ids);
			
		$pl = array(lang("select")." ".lang("project"));
		if ($this->Owner || $this->Admin || $project[0] === 'all') {
			foreach($rows as $row){
				$pl[$row->id] = $row->name;
			}
		}else{
			$pl = array();
			foreach($rows as $row){
				if(in_array($row->id, $project)){
					$pl[$row->id] = $row->name;
				}
			}
		}
		$opt = form_dropdown('project', $pl, (isset($_POST['project']) ? $_POST['project'] : $project_id), 'id="project" class="form-control select"');
		echo json_encode(array("result" => $opt));
	}
	
	public function getReceivesReport($pdf = NULL, $xls = NULL)
	{
		if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
		
		if ($xls) {
			$this->db
				->select("{$this->db->dbprefix('receives')}.date, re_reference_no, pu_reference_no, warehouses.name, GROUP_CONCAT(CONCAT({$this->db->dbprefix('receive_items')}.product_name, ' ( ', {$this->db->dbprefix('receive_items')}.quantity), ' )') as iname,concat(last_name,' ',first_name) as user, receives.note", FALSE)
				->from('receives')
				->join('receive_items', 'receive_items.receive_id=receives.id', 'left')
				->join('warehouses','warehouses.id = receives.warehouse_id','left')
				->join('users','users.id = receives.created_by','left')
				->group_by('receives.id');
			if ($product) {
				$this->db->where(" (({$this->db->dbprefix('receive_items')}.product_id = {$product})) ", NULL, FALSE);
			}	
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('receive_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('purchase'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('quantity'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->re_reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->pu_reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->user);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->decode_html($data_row->note));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);

				
      
				$filename = 'receive_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			$this->load->library('datatables');
			$ai = "( SELECT receive_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', {$this->db->dbprefix('receive_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('receive_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('receive_items')}.product_id ";
            if ($product) {
                $ai .= " WHERE {$this->db->dbprefix('receive_items')}.product_id = {$product} ";
            }
            $ai .= " GROUP BY {$this->db->dbprefix('receive_items')}.receive_id ) FAI";
            $this->load->library('datatables');
            $this->datatables
            ->select("{$this->db->dbprefix('receives')}.date, re_reference_no, pu_reference_no, warehouses.name, item_nane ,concat(last_name,' ',first_name) as user, receives.note,  {$this->db->dbprefix('receives')}.id as id", FALSE)
            ->from('receives')
            ->join($ai, 'FAI.receive_id=receives.id', 'inner')
            ->join('users', 'users.id=receives.created_by', 'left')
            ->join('warehouses', 'warehouses.id=receives.warehouse_id', 'left');
            echo $this->datatables->generate();
		}
	}
	
	public function ar_aging_details()
	{
		$this->cus->checkPermissions('ar_aging_details');
		$_GET['customer'] 	= $this->input->post("customer");
		$_GET['biller'] 	= $this->input->post("biller");
		$_GET['warehouse'] 	= $this->input->post("warehouse");
		$_GET['saleman'] 	= $this->input->post("saleman");
		$_GET['cid'] 		= $this->input->post("cid");
		$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();		
		$this->data['salesman'] = $this->reports_model->getAllSaleman($this->input->post());	
		$this->data['rows'] = $this->getARAging(NULL,NULL,1);		
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('ar_aging_details')));
        $meta = array('page_title' => lang('ar_aging_details'), 'bc' => $bc);
        $this->core_page('reports/ar_aging_details', $meta, $this->data);
	}
	
	public function installments()
	{
		$this->cus->checkPermissions('installments');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installments_report')));
        $meta = array('page_title' => lang('installments'), 'bc' => $bc);
        $this->core_page('reports/installments', $meta, $this->data);
	}
	
	public function getInstallmentsReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('installments', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$sale_reference_no = $this->input->get('sale_reference_no') ? $this->input->get('sale_reference_no') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        
		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
			
            $this->db
                ->select("
					installments.id as id,
					installments.created_date,
					sales.reference_no as sale_ref,
					installments.reference_no,
					installments.biller,
					projects.name as project,
					installments.customer,
					companies.phone,
					installments.description,
					installments.installment_amount,
					installments.deposit,
					cus_installment_items.principal,
					cus_installment_items.interest,
					cus_installment_items.payment,
					IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0) as paid,
					IFNULL(cus_installment_items.payment,0) - (IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0)) - IF(cus_installments.status='payoff', IFNULL(cus_interest.interest, 0), 0) as balance,
					IFNULL(cus_payments.count, 0) as count,
					installments.status")
				->from('installments')
				->join('sales', 'sales.id=installments.sale_id', 'left')
				->join('companies','companies.id=installments.customer_id','left')
				->join('projects','projects.id=installments.project_id','left')
				->join('(SELECT 
							installment_id,
							SUM(amount) as paid,
							SUM(interest_paid) as interest_paid,
							COUNT(id) as count
						FROM cus_payments
						GROUP BY installment_id) AS cus_payments','cus_payments.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							IFNULL(sum(payment),0) AS payment,
							IFNULL(sum(interest),0) AS interest,
							IFNULL(sum(principal),0) AS principal
						FROM
							cus_installment_items
						GROUP BY installment_id) as cus_installment_items', 'cus_installment_items.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							SUM(interest) as interest
						FROM cus_installment_items WHERE status = "pending"
						GROUP BY installment_id) AS cus_interest','cus_interest.installment_id=installments.id', 'left')
                ->group_by('installments.id');
				
			if($sale_reference_no){
				$this->db->like("sales.reference_no", $sale_reference_no);
			}
			if($reference_no){
				$this->db->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("installments.biller_id", $biller);
			}
			if($customer){
				$this->db->where("installments.customer_id", $customer);
			}
			if($project){
				$this->db->where("installments.project_id", $project);
			}
			if($warehouse){
				$this->db->where("installments.warehouse_id", $warehouse);
			}
            if ($user) {
                $this->db->where('installments.created_by', $user);
            }
			if ($status) {
                $this->db->where('installments.status', $status);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            if ($start_date) {
                $this->db->where($this->db->dbprefix('installments').'.created_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('installments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('sale_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
				
				if($this->Settings->project==1){
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('project'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('description'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('amount'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('deposit'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('principal'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('interest'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('payment'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('O1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('P1', lang('count'));
					$this->excel->getActiveSheet()->SetCellValue('Q1', lang('status'));
				}else{
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('description'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('amount'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('deposit'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('principal'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('interest'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('payment'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('paid'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('O1', lang('count'));
					$this->excel->getActiveSheet()->SetCellValue('P1', lang('status'));
				}

                $row = 2;
                $total = 0;
				$discount = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->created_date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
					if($this->Settings->project==1){
						
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->project);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->description);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->installment_amount));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->deposit));
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->principal));
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->interest));
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($data_row->payment));
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($data_row->paid));
						$this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->formatDecimal($data_row->balance));
						$this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->count);
						$this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->status));
						
					}else{
						
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->phone);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->description);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->installment_amount));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->deposit));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->principal));
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->interest));
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->payment));
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($data_row->paid));
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($data_row->balance));
						$this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->count);
						$this->excel->getActiveSheet()->SetCellValue('P' . $row, lang($data_row->status));
					}
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(10);
				$filename = 'installments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
					installments.id as id,
					installments.created_date,
					sales.reference_no as sale_ref,
					installments.reference_no,
					projects.name as project,
					installments.customer,
					companies.phone,
					CONCAT('<small>',installments.description,'</small>') as description,
					installments.installment_amount,
					installments.deposit,
					cus_installment_items.principal,
					cus_installment_items.interest,
					cus_installment_items.payment,
					IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0) as paid,
					IFNULL(cus_installment_items.payment,0) - (IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0)) - IF(cus_installments.status='payoff', IFNULL(cus_interest.interest, 0), 0) as balance,
					IFNULL(cus_payments.count, 0) as count,
					installments.status")
				->from('installments')
				->join('sales', 'sales.id=installments.sale_id', 'left')
				->join('companies','companies.id=installments.customer_id','left')
				->join('warehouses','warehouses.id=installments.warehouse_id','left')
				->join('projects','projects.id=installments.project_id','left')
				->join('(SELECT 
							installment_id,
							SUM(amount) as paid,
							SUM(interest_paid) as interest_paid,
							COUNT(id) as count
						FROM cus_payments
						GROUP BY installment_id) AS cus_payments','cus_payments.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							IFNULL(sum(payment),0) AS payment,
							IFNULL(sum(interest),0) AS interest,
							IFNULL(sum(principal),0) AS principal
						FROM
							cus_installment_items
						GROUP BY installment_id) as cus_installment_items', 'cus_installment_items.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							SUM(interest) as interest
						FROM cus_installment_items WHERE status = "pending"
						GROUP BY installment_id) AS cus_interest','cus_interest.installment_id=installments.id', 'left')
                ->group_by('installments.id');
			
			if($sale_reference_no){
				$this->datatables->like("sales.reference_no", $sale_reference_no);
			}
			if($reference_no){
				$this->datatables->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("installments.biller_id", $biller);
			}
			if($customer){
				$this->datatables->where("installments.customer_id", $customer);
			}
			if($project){
				$this->datatables->where("installments.project_id", $project);
			}
			if($warehouse){
				$this->datatables->where("installments.warehouse_id", $warehouse);
			}
            if ($user) {
                $this->datatables->where('installments.created_by', $user);
            }
			if ($status) {
                $this->datatables->where('installments.status', $status);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('installments').'.created_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
	
	public function installment_payments()
	{
		$this->cus->checkPermissions('installment_payments');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installment_payments')));
        $meta = array('page_title' => lang('installment_payments'), 'bc' => $bc);
        $this->core_page('reports/installment_payments', $meta, $this->data);
	}
	
	public function getInstallmentPaymentsReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('installment_payments', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
		$sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                ->select("
					payments.date,
					payments.reference_no as payment_ref,
					sales.reference_no as sale_ref,
					installments.reference_no as reference_no,
					installments.customer,
					concat(last_name,' ', first_name) as created_by,
					payments.paid_by,
					payments.amount,
					IFNULL(cus_payments.interest_paid, 0) as interest_paid,
					IFNULL(cus_payments.amount + cus_payments.interest_paid, 0) as payment_paid,
					IFNULL(cus_payments.penalty_paid,0) as  penalty_paid,
					payments.type,
					payments.id as id,
				")
				->from("payments")
				->join("sales","payments.sale_id=sales.id","left")
				->join("installments","payments.installment_id=installments.id","left")
				->join("users","payments.created_by=users.id","left")
				->where('installments.id >', 0);
			
			if($payment_ref){
				$this->db->like("payments.reference_no", $payment_ref);
			}
			if($sale_ref){
				$this->db->like("sales.reference_no", $sale_ref);
			}
			if($reference_no){
				$this->db->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("installments.biller_id", $biller);
			}
			if($warehouse){
				$this->db->like("installments.warehouse_id", $warehouse);
			}
			if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('installment_payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_ref'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('principal_paid'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('interest_paid'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('payment_paid'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('penalty_paid'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('type'));
                $row = 2;
                $principal_paid = 0;
				$interest_paid = 0;
				$payment_paid = 0;
				$penalty_paid = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid_by);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->amount));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->interest_paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->payment_paid));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->penalty_paid));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, ucfirst($data_row->type));
					
					$principal_paid += $this->cus->formatDecimal($data_row->principal_paid);
					$interest_paid += $this->cus->formatDecimal($data_row->interest_paid);
					$payment_paid += $this->cus->formatDecimal($data_row->payment_paid);
					$penalty_paid += $this->cus->formatDecimal($data_row->penalty_paid);
					$row++;
                }
				
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($principal_paid));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($interest_paid));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($payment_paid));
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($penalty_paid));
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $filename = 'installment_payments_report_'.date("Y_m_d_H_i_s");
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
					payments.date,
					payments.reference_no as payment_ref,
					sales.reference_no as sale_ref,
					installments.reference_no as reference_no,
					installments.customer,
					concat(last_name,' ', first_name) as created_by,
					payments.paid_by,
					payments.amount,
					IFNULL(cus_payments.interest_paid, 0) as interest_paid,
					IFNULL(cus_payments.amount + cus_payments.interest_paid, 0) as payment_paid,
					IFNULL(cus_payments.penalty_paid,0) as  penalty_paid,
					payments.type,
					payments.id as id,
				")
				->from("payments")
				->join("sales","payments.sale_id=sales.id","left")
				->join("installments","payments.installment_id=installments.id","left")
				->join("users","payments.created_by=users.id","left")
				->where('installments.id >', 0);
			
			if($payment_ref){
				$this->datatables->like("payments.reference_no", $payment_ref);
			}
			if($sale_ref){
				$this->datatables->like("sales.reference_no", $sale_ref);
			}
			if($reference_no){
				$this->datatables->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("installments.biller_id", $biller);
			}
			if($warehouse){
				$this->datatables->like("installments.warehouse_id", $warehouse);
			}
			if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

	public function login_histories()
	{
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('login_histories')));
        $meta = array('page_title' => lang('login_histories'), 'bc' => $bc);
        $this->core_page('reports/login_histories', $meta, $this->data);
	}
	
	public function getLoginHistories($id = false)
	{		
        $this->load->library('datatables');			
		$this->datatables->select("
						user_logins.ip_address,
						UPPER(cus_users.username) as username,
						time")
		->from("user_logins")
		->join("users","users.id = user_logins.user_id","left");
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
			$this->datatables->where('user_logins.user_id', $this->session->userdata('user_id'));
		} 
        echo $this->datatables->generate();
	}
	
	public function pawn()
	{
		$this->cus->checkPermissions('pawn');
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['customers'] = $this->site->getAllCompanies('customer');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('pawn_report')));
        $meta = array('page_title' => lang('pawn_report'), 'bc' => $bc);
        $this->core_page('reports/pawn', $meta, $this->data);
	}
	
	public function getPawnReport($pdf = false , $xls = false)
	{
		$this->cus->checkPermissions('pawn');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
		$end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$curDate = date('Y-m-d');	
		if ($xls) {
			
			$this->load->library('datatables');
			if($payment_status){
				$join = 'inner';
				$this->db->where('pawns.status !=','completed');
				$this->db->where('pawns.status !=','closed');
			}else{
				$join = 'left';
			}
			
			$this->db->select("
						pawns.date, 
						pawns.reference_no,
						pawns.biller,
						pawns.customer, 
						pawns.principal,
						IFNULL(SUM(cus_pawn_returns.grand_total),0) as total_return,
						IFNULL((pawn_purchases.cost + pawn_purchases.price),0) as purchase,
						IFNULL((cus_pawns.principal - IFNULL(sum(cus_pawn_returns.grand_total),0) - IFNULL(pawn_purchases.price,0)),0) AS balance,
						IFNULL(".$this->db->dbprefix('pawns'). " .payment_rate,0) as payment_rate,
						pawns.status, 
						IF(".$this->db->dbprefix('pawns').".status='completed' OR ".$this->db->dbprefix('pawns').".status='closed','completed',IF(pawn_items.pawn_id > 0, 'due','pending')) as payment_status")
			->from('pawns')
			->join('(SELECT pawn_id FROM cus_pawn_items WHERE next_date <= "'.$curDate.'" GROUP BY pawn_id) as pawn_items','pawns.id = pawn_items.pawn_id',$join)
			->join('pawn_returns' , 'pawn_returns.pawn_id = pawns.id' , 'left')
			->join('(select pawn_id, sum(price * quantity) as price, sum(cost * quantity) as cost FROM cus_pawn_purchase_items GROUP BY pawn_id) as pawn_purchases' , 'pawn_purchases.pawn_id = pawns.id' , 'left')
			->group_by('cus_pawns.id');
			
			
			if($reference_no){
				$this->db->where('pawns.reference_no', $reference_no);
			}
			if($customer){
				$this->db->where('pawns.customer_id', $customer);
			}
			if ($start_date) {
				$this->db->where('date(cus_pawns.date) >=', $this->cus->fld($start_date));
				$this->db->where('date(cus_pawns.date) <=', $this->cus->fld($end_date,false,1));
			}
			if($biller){
				$this->db->where('pawns.biller_id', $biller);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('pawns.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('pawns.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('pawn_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('principal'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('return'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('purchase'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('payment_rate'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('pawn_status'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('payment_status'));

                $row 			= 2;
				$amount 		= 0;
				$principal 		= 0;
				$payment_rate	= 0;
				$total_return	= 0;
				$total_purchase = 0;
				$balance		= 0;
                foreach ($data as $data_row){
					
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->date);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->principal));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->total_return));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->purchase));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->balance));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->payment_rate));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->payment_status);
					
					$principal 		+= $this->cus->formatDecimal($data_row->principal);
					$payment_rate 	+= $this->cus->formatDecimal($data_row->payment_rate);
					$total_return 	+= $this->cus->formatDecimal($data_row->total_return);
					$total_purchase += $this->cus->formatDecimal($data_row->purchase);
					$balance	 	+= $this->cus->formatDecimal($data_row->balance);
					$row++;
                }
				$this->excel->getActiveSheet()->getStyle("E" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
				$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($principal));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($total_return));
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($total_purchase));
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($balance));
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($payment_rate));
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				

				$filename = 'pawn_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
			
		} else{
			
			$this->load->library('datatables');
			if(isset($payment_status)){
				$join = 'inner';
				$this->db->where('pawns.status !=','completed');
				$this->db->where('pawns.status !=','closed');
			}else{
				$join = 'left';
			}
			$this->datatables
			->select("
						pawns.date, 
						pawns.reference_no,
						pawns.biller,
						pawns.customer, 
						pawns.principal,
						IFNULL(SUM(cus_pawn_returns.grand_total),0) as total_return,
						IFNULL((pawn_purchases.cost + pawn_purchases.price),0) as purchase,
						IFNULL((cus_pawns.principal - IFNULL(sum(cus_pawn_returns.grand_total),0) - IFNULL(pawn_purchases.price,0)),0) AS balance,
						IFNULL(".$this->db->dbprefix('pawns'). " .payment_rate,0) as payment_rate,
						pawns.status, 
						IF(".$this->db->dbprefix('pawns').".status='completed' OR ".$this->db->dbprefix('pawns').".status='closed','completed',IF(pawn_items.pawn_id > 0, 'due','pending')) as payment_status,
						pawns.id")
			->from('pawns')
			->join('(SELECT pawn_id FROM cus_pawn_items WHERE next_date <= "'.$curDate.'" GROUP BY pawn_id) as pawn_items','pawns.id = pawn_items.pawn_id',$join)
			->join('pawn_returns' , 'pawn_returns.pawn_id = pawns.id' , 'left')
			->join('(select pawn_id, sum(price * quantity) as price, sum(cost * quantity) as cost FROM cus_pawn_purchase_items GROUP BY pawn_id) as pawn_purchases' , 'pawn_purchases.pawn_id = pawns.id' , 'left')
			->group_by('cus_pawns.id');

			if($reference_no){
				$this->db->where('pawns.reference_no', $reference_no);
			}
			if($customer){
				$this->db->where('pawns.customer_id', $customer);
			}
			if ($start_date) {
				$this->datatables->where('date(cus_pawns.date) >=', $this->cus->fld($start_date));
				$this->datatables->where('date(cus_pawns.date) <=', $this->cus->fld($end_date,false,1));
			}
			if($biller){
				$this->datatables->where('pawns.biller_id', $biller);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('pawns.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('pawns.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
		}
	}
	
	public function print_history()
	{
		$this->cus->checkPermissions('print_history');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('print_history')));
        $meta = array('page_title' => lang('print_history'), 'bc' => $bc);
        $this->core_page('reports/print_history', $meta, $this->data);
	}
	
	public function getPrintHistory($pdf = NULL, $xls = NULL)
	{
		$this->cus->checkPermissions('print_history');

        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
		

			$this->db->select("
			print_date,
			transaction,
			reference_no,
			concat(last_name,' ', first_name) as user_print")
			->from("print_histories")
			->join('users','users.id = print_histories.print_by','left');
            if ($user) {
                $this->db->where('print_histories.print_by', $user);
            }
            if ($transaction_id) {
                $this->db->where('print_histories.transaction_id', $transaction_id);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('print_histories').'.print_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if ($reference_no) {
                $this->db->like('print_histories.reference_no', $reference_no, 'both');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('print_history'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('transaction'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('user'));
				
                $row = 2;
                $total = 0;
				$discount = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->print_date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transaction);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->user_print);
					
                    $row++;
                }
                
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
  
				$filename = 'print_history_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
			
			
            $this->load->library('datatables');
			$this->datatables->select("
			print_date,
			transaction,
			reference_no,
			concat(last_name,' ', first_name) as user_print")
			->from("print_histories")
			->join('users','users.id = print_histories.print_by','left');
			if ($user) {
                $this->db->where('print_histories.print_by', $user);
            }
            if (isset($transaction_id)) {
                $this->datatables->where('print_histories.transaction_id', $transaction_id);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('print_histories').'.print_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if ($reference_no) {
                $this->db->like('print_histories.reference_no', $reference_no, 'both');
            }
            echo $this->datatables->generate();
		}
	}
	
	public function customer_stocks()
	{
		$this->cus->checkPermissions('customer_stocks', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('customer_stocks')));
        $meta = array('page_title' => lang('customer_stocks'), 'bc' => $bc);
        $this->core_page('reports/customer_stocks', $meta, $this->data);
	}
	
	public function getCustomerStocksReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('customer_stocks', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                ->select("
					customer_stocks.id as id,
					customer_stocks.date,
					customer_stocks.reference_no,
					companies.company as biller,
					customer_stocks.customer,
					customers.phone,
					products.name as description,
					customer_stock_items.quantity,
					customer_stocks.expiry,
					customer_stocks.status,
				")
				->from('customer_stocks')
				->join('customer_stock_items','customer_stock_id=customer_stocks.id','left')
				->join('products','products.id=product_id','left')
				->join('companies','companies.id=biller_id','left')
				->join('companies as customers','customers.id=customer_stocks.customer_id','left')
				->group_by("products.id");
			
			if($biller){
				$this->db->where("customer_stocks.biller_id", $biller);
			}
			if ($warehouse) {
                $this->db->where('customer_stocks.warehouse_id', $warehouse);
            }
			if ($customer) {
                $this->db->where('customer_stocks.customer_id', $customer);
            }
            if ($user) {
                $this->db->where('customer_stocks.created_by', $user);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('customer_stocks').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customer_stocks_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('description'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('expiry'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
                $row = 2;
                $total = 0;
				$discount = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->description);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->quantity);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->hrsd($data_row->expiry));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				
 
				$filename = 'customer_stocks_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("
					customer_stocks.id as id,
					customer_stocks.date,
					customer_stocks.reference_no,
					companies.company as biller,
					customer_stocks.customer,
					customers.phone,
					products.name as description,
					cus_customer_stock_items.quantity,
					customer_stocks.expiry,
					customer_stocks.status,
				")
				->from('customer_stocks')
				->join('customer_stock_items','customer_stock_id=customer_stocks.id','left')
				->join('products','products.id=product_id','left')
				->join('companies','companies.id=biller_id','left')
				->join('companies as customers','customers.id=customer_stocks.customer_id','left')
				->group_by("products.id");
			
			if($biller){
				$this->datatables->where("customer_stocks.biller_id", $biller);
			}
			if ($warehouse) {
                $this->datatables->where('customer_stocks.warehouse_id', $warehouse);
            }
			if ($customer) {
                $this->datatables->where('customer_stocks.customer_id', $customer);
            }
            if ($user) {
                $this->datatables->where('customer_stocks.created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('customer_stocks').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }
	
	public function saleman_detail_report_action($pdf = NULL , $xls = NULL)
	{
		$reference 			= $this->input->get('reference_no');
		$user 				= $this->input->get('user');
		$saleman 			= $this->input->get('saleman');
		$customer 			= $this->input->get('customer');
		$biller 			= $this->input->get('biller');
		$warehouse			= $this->input->get('warehouse');
		$start_date 		= $this->input->get('start_date');
		$end_date 			= $this->input->get('end_date');
		$payment_status 	= $this->input->get('payment_status');
		if ($xls) {

			if($reference){
				$this->db->like('sales.reference_no' , $reference);
			}
			if($user){
				$this->db->where('sales.created_by' , $user);
			}
			if($saleman){
				$this->db->where('sales.saleman_id' , $saleman);
			}
			if($customer){
				$this->db->where('sales.customer_id' , $customer);
			}
			if($biller){
				$this->db->where('sales.biller_id' , $biller);
			}
			if($warehouse){
				$this->db->where('sales.warehouse_id' , $warehouse);
			}
			if($payment_status){
				$this->db->where('sales.payment_status' , $payment_status);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if ($start_date) {
				$this->db->where('date >=', $this->cus->fld($start_date));
				$this->db->where('date <=', $this->cus->fld($end_date,false,1));
			}
			$this->db->select('saleman_id');
			$this->db->join('users','users.id = sales.saleman_id','inner');
			$this->db->where('users.saleman',1);
			$this->db->where('sale_status <>','draft');
			$this->db->group_by('sales.saleman_id');
			
            $q = $this->db->get('sales');
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('saleman_detail_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('status'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('payment_status'));
                $row = 2;
				foreach($data as $data_row){
					$amount 	= 0;
					$discount 	= 0;
					$balance 	= 0;
					$paid 		= 0;
					$salesman = $this->site->getUserByID($data_row->saleman_id);
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, ($salesman->last_name.' '.$salesman->first_name));
					$row++;
					
					if($reference){
						$this->db->like('sales.reference_no' , $reference);
					}
					if($user){
						$this->db->where('sales.created_by' , $user);
					}
					if($saleman){
						$this->db->where('sales.saleman_id' , $saleman);
					}
					if($customer){
						$this->db->where('sales.customer_id' , $customer);
					}
					if($biller){
						$this->db->where('sales.biller_id' , $biller);
					}
					if($warehouse){
						$this->db->where('sales.warehouse_id' , $warehouse);
					}
					if ($start_date) {
						$this->db->where('sales.date >=', $this->cus->fld($start_date));
						$this->db->where('sales.date <=', $this->cus->fld($end_date,false,1));
					}
					if($payment_status){
						$this->db->where('sales.payment_status' , $payment_status);
					}
					if($tank){
						$this->db->where('sales.tank_id' , $tank);
					}
					if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
						$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
					}
					if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
						$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
					}
					$sales = $this->db->where('sale_status <>','draft')
									  ->where('saleman_id' , $data_row->saleman_id)
									  ->get('sales')
									  ->result();
									  
					foreach ($sales as $sale){
						$created_by = $this->site->getUserByID($sale->created_by);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($sale->date));
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $sale->reference_no);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $sale->biller);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $sale->customer);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($sale->sale_status));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, ($created_by->last_name.' '.$created_by->first_name));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($sale->grand_total));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($sale->paid));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($sale->discount));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($sale->grand_total - $sale->paid));
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($sale->payment_status));
						
						$amount 	+= $this->cus->formatDecimal($sale->grand_total);
						$paid 		+= $this->cus->formatDecimal($sale->paid);
						$discount 	+= $this->cus->formatDecimal($sale->discount);
						$balance 	+= $this->cus->formatDecimal($sale->balance);
						$row++;
					}
					$this->excel->getActiveSheet()->getStyle("G" . $row . ":J" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $amount);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $discount);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $balance);
					$row++;
				}
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);

				$filename = 'saleman_detail_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
        }
		$this->session->set_flashdata('error', lang('nothing_found'));
		redirect($_SERVER["HTTP_REFERER"]);
	}
	
	public function saleman_products_report()
	{
		$this->cus->checkPermissions('saleman_products', TRUE);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['salemans'] = $this->site->getSalemans();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->site->getAllCategories();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['sales'] = $this->reports_model->getSalemanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('saleman_products_report')));
        $meta = array('page_title' => lang('saleman_products_report'), 'bc' => $bc);
        $this->core_page('reports/saleman_products_report', $meta, $this->data);
	}
	
	public function transfers()
	{
		$this->cus->checkPermissions('transfers', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('transfers_report')));
        $meta = array('page_title' => lang('transfers_report'), 'bc' => $bc);
        $this->core_page('reports/transfers', $meta, $this->data);
	}
	
	public function getTransferReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('transfers', TRUE);
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$to_warehouse = $this->input->get('to_warehouse') ? $this->input->get('to_warehouse') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
		
		if ($xls) {
			$ti = "( SELECT transfer_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '(', {$this->db->dbprefix('transfer_items')}.quantity,')')  SEPARATOR '\n') as item_nane from {$this->db->dbprefix('transfer_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('transfer_items')}.product_id ";
            if ($product) {
                $ti .= " WHERE {$this->db->dbprefix('transfer_items')}.product_id = {$product} ";
            }
            $ti .= " GROUP BY {$this->db->dbprefix('transfer_items')}.transfer_id ) as  FTI";
			

			$this->db->select("
								transfers.date,
								transfer_no,
								companies.company,
								from_warehouse_name,
								to_warehouse_name,
								CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
								transfers.note,
								FTI.item_nane as product_name,
								transfers.status", FALSE)
							->from('transfers')
							->join('companies', 'companies.id=transfers.biller_id', 'left')
							->join('users','users.id = transfers.created_by','left')
							->join($ti,'FTI.transfer_id = transfers.id','inner')
							->group_by('transfers.id');
			if ($user) {
				$this->db->where('transfers.created_by', $user);
			}
			if ($warehouse) {
				$this->db->where('transfers.from_warehouse_id', $warehouse);
			}
			if ($to_warehouse) {
				$this->db->where('transfers.to_warehouse_id', $to_warehouse);
			}
			if ($reference_no) {
				$this->db->where('transfers.transfer_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where($this->db->dbprefix('transfers').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(transfers.from_warehouse_id IN '.$warehouse_ids.' OR transfers.to_warehouse_id IN '.$warehouse_ids.')');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where("(".$this->db->dbprefix("transfers").".biller_id = ".$this->session->userdata('biller_id')." OR ".$this->db->dbprefix("transfers").".to_biller_id = ".$this->session->userdata('biller_id').")");
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('transfer_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse').' ('.lang('from').')');
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse').' ('.lang('to').')');
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
				
				$row = 2;
				
				foreach ($data as $data_row){

					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transfer_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->company);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->from_warehouse_name);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->to_warehouse_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->remove_tag($data_row->note));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
					
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				

				$filename = 'transfers_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$ti = "( SELECT transfer_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', {$this->db->dbprefix('transfer_items')}.quantity)  SEPARATOR '___') as item_nane from {$this->db->dbprefix('transfer_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('transfer_items')}.product_id ";
            if ($product) {
                $ti .= " WHERE {$this->db->dbprefix('transfer_items')}.product_id = {$product} ";
            }
            $ti .= " GROUP BY {$this->db->dbprefix('transfer_items')}.transfer_id ) FTI";
			$this->load->library('datatables');
			$this->datatables
							->select("
							transfers.date,
							transfer_no,
							companies.company,
							from_warehouse_name,
							to_warehouse_name,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							transfers.note,
							FTI.item_nane as product_name,
							transfers.status,
							transfers.id", FALSE)
							->from('transfers')
							->join('companies', 'companies.id=transfers.biller_id', 'left')
							->join('users','users.id = transfers.created_by','left')
							->join($ti,'FTI.transfer_id = transfers.id','inner')
							->group_by('transfers.id');
			if ($user) {
				$this->datatables->where('transfers.created_by', $user);
			}
			if ($warehouse) {
				$this->datatables->where('transfers.from_warehouse_id', $warehouse);
			}
			if ($to_warehouse) {
				$this->datatables->where('transfers.to_warehouse_id', $to_warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('transfers.transfer_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where($this->db->dbprefix('transfers').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->datatables->where('(transfers.from_warehouse_id IN '.$warehouse_ids.' OR transfers.to_warehouse_id IN '.$warehouse_ids.')');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where("(".$this->db->dbprefix("transfers").".biller_id = ".$this->session->userdata('biller_id')." OR ".$this->db->dbprefix("transfers").".to_biller_id = ".$this->session->userdata('biller_id').")");
			}
			echo $this->datatables->generate();
			
		}
	}
	
	
	public function transfer_details()
	{
		$this->cus->checkPermissions('transfers', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('transfer_details_report')));
        $meta = array('page_title' => lang('transfer_details_report'), 'bc' => $bc);
        $this->core_page('reports/transfer_details', $meta, $this->data);
	}
	
	public function getTransferDetailReport($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('transfers', TRUE);
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$to_warehouse = $this->input->get('to_warehouse') ? $this->input->get('to_warehouse') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }	
		if ($xls) {
			$this->db
							->select("
							transfers.date,
							transfer_no,
							companies.company,
							from_warehouse_name,
							to_warehouse_name,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							transfer_items.product_name,
							convert_qty(".$this->db->dbprefix('transfer_items').".product_id,".$this->db->dbprefix('transfer_items').".quantity) as qty,
							transfers.status,
							transfers.id", FALSE)
							->from('transfers')
							->join('companies', 'companies.id=transfers.biller_id', 'left')
							->join('users','users.id = transfers.created_by','left')
							->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'inner')
							->group_by('transfer_items.id');
			if ($user) {
				$this->db->where('transfers.created_by', $user);
			}
			if ($product) {
				$this->db->where('transfer_items.product_id', $product);
			}
			if ($warehouse) {
				$this->db->where('transfers.from_warehouse_id', $warehouse);
			}
			if ($to_warehouse) {
				$this->db->where('transfers.to_warehouse_id', $to_warehouse);
			}
			if ($reference_no) {
				$this->db->where('transfers.transfer_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where($this->db->dbprefix('transfers').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(transfers.from_warehouse_id IN '.$warehouse_ids.' OR transfers.to_warehouse_id IN '.$warehouse_ids.')');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where("(".$this->db->dbprefix("transfers").".biller_id = ".$this->session->userdata('biller_id')." OR ".$this->db->dbprefix("transfers").".to_biller_id = ".$this->session->userdata('biller_id').")");
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('transfer_deatails_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse').' ('.lang('from').')');
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse').' ('.lang('to').')');
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('quantity'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
				
				$row = 2;
				
				foreach ($data as $data_row){

					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transfer_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->company);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->from_warehouse_name);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->to_warehouse_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->remove_tag($data_row->qty));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
					
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
			
				$filename = 'transfer_details_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables
							->select("
							transfers.date,
							transfer_no,
							companies.company,
							from_warehouse_name,
							to_warehouse_name,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							transfer_items.product_name,
							convert_qty(".$this->db->dbprefix('transfer_items').".product_id,".$this->db->dbprefix('transfer_items').".quantity) as qty,
							transfers.status,
							transfers.id", FALSE)
							->from('transfers')
							->join('companies', 'companies.id=transfers.biller_id', 'left')
							->join('users','users.id = transfers.created_by','left')
							->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'inner')
							->group_by('transfer_items.id');
			if ($user) {
				$this->datatables->where('transfers.created_by', $user);
			}
			if ($product) {
				$this->datatables->where('transfer_items.product_id', $product);
			}
			if ($warehouse) {
				$this->datatables->where('transfers.from_warehouse_id', $warehouse);
			}
			if ($to_warehouse) {
				$this->datatables->where('transfers.to_warehouse_id', $to_warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('transfers.transfer_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where($this->db->dbprefix('transfers').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->datatables->where('(transfers.from_warehouse_id IN '.$warehouse_ids.' OR transfers.to_warehouse_id IN '.$warehouse_ids.')');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where("(".$this->db->dbprefix("transfers").".biller_id = ".$this->session->userdata('biller_id')." OR ".$this->db->dbprefix("transfers").".to_biller_id = ".$this->session->userdata('biller_id').")");
			}
			
			echo $this->datatables->generate();
			
		}
	}
	
	public function using_stocks()
	{
		$this->cus->checkPermissions('using_stocks', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('using_stocks_report')));
        $meta = array('page_title' => lang('using_stocks_report'), 'bc' => $bc);
        $this->core_page('reports/using_stocks', $meta, $this->data);
	}
	
	public function getUsingStockReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('using_stocks', TRUE);
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$using_by = $this->input->get('using_by') ? $this->input->get('using_by') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$current_date = date("Y-m-d");
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if($end_date){
			$end_date = $this->cus->fld($end_date,false,1);
		}
		
		if ($xls) {
			$this->db->select("
							using_stocks.date,
							using_stocks.reference_no,
							companies.company,
							using_stocks.warehouse_name,
							(SELECT CONCAT(last_name,' ',first_name) as using_by FROM ".$this->db->dbprefix('users')." WHERE id = ".$this->db->dbprefix('using_stocks').".using_by) as using_by,
							using_stocks.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							using_stocks.note,
							IF(".$this->db->dbprefix('using_stocks').".status IN('pending','partial')  AND IFNULL(".$this->db->dbprefix('using_stocks').".return_date,'') != '' AND ".$this->db->dbprefix('using_stocks').".return_date <= '".$current_date."','due',".$this->db->dbprefix('using_stocks').".status) as status,
							using_stocks.id", FALSE)
							->from('using_stocks')
							->join('companies', 'companies.id=using_stocks.biller_id', 'left')
							->join('users','users.id = using_stocks.created_by','left')
							->group_by('using_stocks.id');
			$this->db->where('using_stocks.status !=','return');
			if ($user) {
				$this->db->where('using_stocks.created_by', $user);
			}	
			if ($using_by) {
				$this->db->where('using_stocks.using_by', $using_by);
			}	
			if ($warehouse) {
				$this->db->where('using_stocks.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->where('using_stocks.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where('using_stocks.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('using_stocks.date <=', $end_date);
			}

			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('using_stocks.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('using_stocks.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('using_stocks_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('using_by'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('note'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
				
				$row = 2;
				
				foreach ($data as $data_row){

					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->company);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->warehouse_name);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->using_by);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->remove_tag($this->cus->decode_html($data_row->note)));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
					
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				

				$filename = 'using_stocks_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables
							->select("
							using_stocks.date,
							using_stocks.reference_no,
							companies.company,
							using_stocks.warehouse_name,
							(SELECT CONCAT(last_name,' ',first_name) as using_by FROM ".$this->db->dbprefix('users')." WHERE id = ".$this->db->dbprefix('using_stocks').".using_by) as using_by,
							using_stocks.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							using_stocks.note,
							IF(".$this->db->dbprefix('using_stocks').".status IN('pending','partial')  AND IFNULL(".$this->db->dbprefix('using_stocks').".return_date,'') != '' AND ".$this->db->dbprefix('using_stocks').".return_date <= '".$current_date."','due',".$this->db->dbprefix('using_stocks').".status) as status,
							using_stocks.id", FALSE)
							->from('using_stocks')
							->join('companies', 'companies.id=using_stocks.biller_id', 'left')
							->join('users','users.id = using_stocks.created_by','left')
							->group_by('using_stocks.id');
			$this->datatables->where('using_stocks.status !=','return');
			if ($user) {
				$this->datatables->where('using_stocks.created_by', $user);
			}	
			if ($using_by) {
				$this->datatables->where('using_stocks.using_by', $using_by);
			}		
			if ($warehouse) {
				$this->datatables->where('using_stocks.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('using_stocks.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where('using_stocks.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('using_stocks.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('using_stocks.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('using_stocks.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function using_stock_details ()
	{
		$this->cus->checkPermissions('using_stocks', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('using_stock_details_report')));
        $meta = array('page_title' => lang('using_stock_details_report'), 'bc' => $bc);
        $this->core_page('reports/using_stock_details', $meta, $this->data);
	}
	
	public function getUsingStockDetailReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('using_stocks', TRUE);	
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$using_by = $this->input->get('using_by') ? $this->input->get('using_by') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		$current_date = date("Y-m-d");
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
		if ($xls) {
			$ust = "(SELECT
						".$this->db->dbprefix('using_stocks').".using_id,
						".$this->db->dbprefix('using_stock_items').".product_id,
						".$this->db->dbprefix('using_stock_items').".product_unit_id,
						".$this->db->dbprefix('using_stock_items').".product_cost,
						IFNULL(abs(".$this->db->dbprefix('using_stock_items').".unit_quantity),0) as return_qty
					FROM
						".$this->db->dbprefix('using_stocks')."
					INNER JOIN ".$this->db->dbprefix('using_stock_items')." ON ".$this->db->dbprefix('using_stocks').".id = ".$this->db->dbprefix('using_stock_items').".using_id
					WHERE
						".$this->db->dbprefix('using_stocks').".`status` = 'return'
					GROUP BY
						".$this->db->dbprefix('using_stocks').".using_id,
						".$this->db->dbprefix('using_stock_items').".product_id,
						".$this->db->dbprefix('using_stock_items').".product_unit_id,
						".$this->db->dbprefix('using_stock_items').".product_cost) as using_return";
			$this->db->select("
								using_stocks.date,
								using_stocks.reference_no,
								using_stocks.warehouse_name,
								CONCAT(cus_users.last_name,' ',cus_users.first_name) AS using_by,
								using_stocks.customer,
								using_stock_items.product_name,
								using_stock_items.product_unit_code,
								".$this->db->dbprefix('using_stock_items').".unit_quantity as using_qty,
								IFNULL(using_return.return_qty,0) as return_qty,
								IF(using_return.return_qty = ".$this->db->dbprefix('using_stock_items').".quantity,'completed',IF(".$this->db->dbprefix('using_stocks').".status IN ('pending','partial') AND IFNULL(".$this->db->dbprefix('using_stocks').".return_date,'') != '' AND ".$this->db->dbprefix('using_stocks').".return_date <= '".$current_date."','due',IF(using_return.return_qty > 0,'partial','pending'))) as status,
								using_stocks.id", FALSE)
						->from('using_stocks')
						->join('using_stock_items','using_stock_items.using_id = using_stocks.id','inner')
						->join('users','users.id = using_stocks.using_by','left')
						->join($ust,'using_return.using_id = using_stocks.id AND using_return.product_id = using_stock_items.product_id AND using_return.product_unit_id = using_stock_items.product_unit_id AND using_return.product_cost = using_stock_items.product_cost','left')
						->group_by('using_stocks.id,using_stock_items.product_id,using_stock_items.product_unit_id,using_stock_items.product_cost');
		
			$this->db->where('using_stocks.status !=', 'return');	
			if ($using_by) {
				$this->db->where('using_stocks.using_by', $using_by);
			}
			if ($user) {
				$this->db->where('using_stocks.created_by', $user);
			}
			if ($product) {
				$this->db->where('using_stock_items.product_id', $product);
			}			
			if ($warehouse) {
				$this->db->where('using_stocks.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->where('using_stocks.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where('using_stocks.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('using_stocks.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('using_stocks.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('using_stocks.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
	
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('using_stock_details_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('using_by'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('using_quantity'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('return_quantity'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
				
				$row = 2;
				
				foreach ($data as $data_row){

					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->warehouse_name);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->using_by);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, ($data_row->using_qty.' '.$data_row->product_unit_code));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, ($data_row->return_qty > 0 ? ($data_row->return_qty.' '.$data_row->product_unit_code) :''));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
					
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$filename = 'using_stock_details_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$ust = "(SELECT
						".$this->db->dbprefix('using_stocks').".using_id,
						".$this->db->dbprefix('using_stock_items').".product_id,
						".$this->db->dbprefix('using_stock_items').".product_unit_id,
						".$this->db->dbprefix('using_stock_items').".product_cost,
						IFNULL(abs(".$this->db->dbprefix('using_stock_items').".quantity),0) as return_qty
					FROM
						".$this->db->dbprefix('using_stocks')."
					INNER JOIN ".$this->db->dbprefix('using_stock_items')." ON ".$this->db->dbprefix('using_stocks').".id = ".$this->db->dbprefix('using_stock_items').".using_id
					WHERE
						".$this->db->dbprefix('using_stocks').".`status` = 'return'
					GROUP BY
						".$this->db->dbprefix('using_stocks').".using_id,
						".$this->db->dbprefix('using_stock_items').".product_id,
						".$this->db->dbprefix('using_stock_items').".product_unit_id,
						".$this->db->dbprefix('using_stock_items').".product_cost) as using_return";
			$this->datatables
							->select("
									using_stocks.date,
									using_stocks.reference_no,
									using_stocks.warehouse_name,
									CONCAT(cus_users.last_name,' ',cus_users.first_name) AS using_by,
									using_stocks.customer,
									using_stock_items.product_name,
									convert_qty(".$this->db->dbprefix('using_stock_items').".product_id,".$this->db->dbprefix('using_stock_items').".quantity) as using_qty,
									convert_qty(".$this->db->dbprefix('using_stock_items').".product_id,IFNULL(using_return.return_qty,0)) as return_qty,
									IF(using_return.return_qty = ".$this->db->dbprefix('using_stock_items').".quantity,'completed',IF(".$this->db->dbprefix('using_stocks').".status IN ('pending','partial') AND IFNULL(".$this->db->dbprefix('using_stocks').".return_date,'') != '' AND ".$this->db->dbprefix('using_stocks').".return_date <= '".$current_date."','due',IF(using_return.return_qty > 0,'partial','pending'))) as status,
									using_stocks.id", FALSE)
							->from('using_stocks')
							->join('using_stock_items','using_stock_items.using_id = using_stocks.id','inner')
							->join('users','users.id = using_stocks.using_by','left')
							->join($ust,'using_return.using_id = using_stocks.id AND using_return.product_id = using_stock_items.product_id AND using_return.product_unit_id = using_stock_items.product_unit_id AND using_return.product_cost = using_stock_items.product_cost','left')
							->group_by('using_stocks.id,using_stock_items.product_id,using_stock_items.product_unit_id,using_stock_items.product_cost');
			
			$this->datatables->where('using_stocks.status !=', 'return');	
			if ($using_by) {
				$this->datatables->where('using_stocks.using_by', $using_by);
			}
			if ($user) {
				$this->datatables->where('using_stocks.created_by', $user);
			}
			if ($product) {
				$this->datatables->where('using_stock_items.product_id', $product);
			}			
			if ($warehouse) {
				$this->datatables->where('using_stocks.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('using_stocks.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where('using_stocks.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('using_stocks.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('using_stocks.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('using_stocks.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function categories_chart()
    {
        $this->cus->checkPermissions();
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['categories_sales'] = $this->reports_model->getChartCategoriesData();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('categories_chart')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->core_page('reports/categories_chart', $meta, $this->data);
    }
	
	public function product_serial_report()
	{
		$this->cus->checkPermissions('product_serial_report', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_serial_report')));
        $meta = array('page_title' => lang('product_serial_report'), 'bc' => $bc);
        $this->core_page('reports/product_serial_report', $meta, $this->data);
	}
	
	public function getProductSerialReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('product_serial_report', TRUE);
		$serial_number = $this->input->get('serial_number') ? $this->input->get('serial_number') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;

		if ($xls) {
			$this->db->select("
								products.code,
								products.name,
								product_serials.serial,
								warehouses.name as warehouse,
								IFNULL(".$this->db->dbprefix('product_serials').".cost,0) as cost,
								IFNULL(".$this->db->dbprefix('product_serials').".price,0) as price,
								product_serials.color,
								product_serials.description,
								IF(".$this->db->dbprefix('product_serials').".inactive = 1,'inactive','active') as status,
								product_serials.product_id", FALSE)
								->from('product_serials')
								->join('products', 'products.id=product_serials.product_id', 'inner')
								->join('warehouses', 'warehouses.id=product_serials.warehouse_id', 'inner')
						->group_by('product_serials.id');
			if ($serial_number) {
				$this->db->where('product_serials.serial', $serial_number);
			}
			if ($warehouse) {
				$this->db->where('product_serials.warehouse_id', $warehouse);
			}
			if ($product) {
				$this->db->where('product_serials.product_id', $product);
			}
			if ($status) {
				if($status=='active'){
					$status = 0;
				}else{
					$status = 1;
				}
				$this->db->where('IFNULL('.$this->db->dbprefix("product_serials").'.inactive,0)', $status);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('product_serials.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('product_serial_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('serial_number'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('cost'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('price'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('color'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('description'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
				$row = 2;
				foreach ($data as $data_row){
					if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
						$cost = $this->cus->formatDecimal($data_row->cost);
					}else{
						$cost = '';
					}
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->serial);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $cost);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->price));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->color);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->description);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
					
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$filename = 'product_serial_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
									products.code,
									products.name,
									product_serials.serial,
									warehouses.name as warehouse,
									IFNULL(".$this->db->dbprefix('product_serials').".cost,0) as cost,
									IFNULL(".$this->db->dbprefix('product_serials').".price,0) as price,
									product_serials.color,
									product_serials.description,
									IF(".$this->db->dbprefix('product_serials').".inactive = 1,'inactive','active') as status,
									product_serials.product_id", FALSE)
									->from('product_serials')
									->join('products', 'products.id=product_serials.product_id', 'inner')
									->join('warehouses', 'warehouses.id=product_serials.warehouse_id', 'inner')
							->group_by('product_serials.id');
			if ($serial_number) {
				$this->datatables->where('product_serials.serial', $serial_number);
			}
			if ($warehouse) {
				$this->datatables->where('product_serials.warehouse_id', $warehouse);
			}
			if ($product) {
				$this->datatables->where('product_serials.product_id', $product);
			}
			if ($status) {
				if($status=='active'){
					$status = 0;
				}else{
					$status = 1;
				}
				$this->datatables->where('IFNULL('.$this->db->dbprefix("product_serials").'.inactive,0)', $status);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('product_serials.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function serial_by_product_report()
	{
		$this->cus->checkPermissions('product_serial_report');
		$product_serials = $this->reports_model->getProductSerails($this->input->post());
		if(isset($_POST['xls']) || isset($_POST['pdf'])){
			if (!empty($product_serials)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('serial_by_product_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product')." (".lang('code').")");
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('serial'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('color'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('description'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
				if($this->Admin || $this->Owner || $this->GP['products-cost']){
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('cost'));
				}
				if($this->Admin || $this->Owner || $this->GP['products-price']){
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('price'));
				}
				$row = 1; 
				foreach($product_serials as $product_serial){
					$row += 1;
					if($product_code == $product_serial->product_code){
						$product = '';
					}else{
						if($product_code != ''){
							$row += 1;
							
							if($this->Admin || $this->Owner || ($this->GP['products-cost'] && $this->GP['products-price'])){
								$this->excel->getActiveSheet()->getStyle("F" . ($row - 1) . ":H" . ($row - 1))->getBorders()
										->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
							}else if($this->GP['products-cost'] || $this->GP['products-price']){
								$this->excel->getActiveSheet()->getStyle("F" . ($row - 1) . ":H" . ($row - 1))->getBorders()
										->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
							}else{
								$this->excel->getActiveSheet()->getStyle("F" . ($row - 1) . ":F" . ($row - 1))->getBorders()
										->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
							}
							
							$this->excel->getActiveSheet()->SetCellValue('E' . ($row - 1), lang('total'));
							$this->excel->getActiveSheet()->SetCellValue('F' . ($row - 1), $total_quantity);
							if($this->Admin || $this->Owner || $this->GP['products-cost']){
								$this->excel->getActiveSheet()->SetCellValue('G' . ($row - 1), $this->cus->formatDecimal($total_cost));
							}
							if($this->Admin || $this->Owner || $this->GP['products-price']){
								$this->excel->getActiveSheet()->SetCellValue('H' . ($row - 1), $this->cus->formatDecimal($total_price));
							}
						}
						$product = $product_serial->product_name.' ('.$product_serial->product_code.')';
						$product_code = $product_serial->product_code;
						$total_quantity = 0;
						$total_cost = 0;
						$total_price = 0;
					}
					
					$quantity = 1;
					if($product_serial->inactive == 1){
						$quantity = 0;
					}
					
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $product);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $product_serial->serial);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $product_serial->warehouse_name);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $product_serial->color);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $product_serial->description);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $quantity);
					if($this->Admin || $this->Owner || $this->GP['products-cost']){
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($product_serial->cost));
					}
					if($this->Admin || $this->Owner || $this->GP['products-price']){
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($product_serial->price));
					}
					$total_cost += $product_serial->cost * $quantity;
					$total_price += $product_serial->price * $quantity;
					$total_quantity += $quantity;
					$grand_cost += $product_serial->cost * $quantity;
					$grand_price += $product_serial->price * $quantity;
					$grand_quantity += $quantity;
				}
				
				$row += 1;		
				if($this->Admin || $this->Owner || ($this->GP['products-cost'] && $this->GP['products-price'])){
					$this->excel->getActiveSheet()->getStyle("F" . ($row) . ":H" . ($row))->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				}else if($this->GP['products-cost'] || $this->GP['products-price']){
					$this->excel->getActiveSheet()->getStyle("F" . ($row) . ":H" . ($ro))->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				}else{
					$this->excel->getActiveSheet()->getStyle("F" . ($row) . ":F" . ($row))->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				}
				
				$this->excel->getActiveSheet()->SetCellValue('E' . ($row), lang('total'));
				$this->excel->getActiveSheet()->SetCellValue('F' . ($row), $total_quantity);
				if($this->Admin || $this->Owner || $this->GP['products-cost']){
					$this->excel->getActiveSheet()->SetCellValue('G' . ($row), $this->cus->formatDecimal($total_cost));
				}
				if($this->Admin || $this->Owner || $this->GP['products-price']){
					$this->excel->getActiveSheet()->SetCellValue('H' . ($row), $this->cus->formatDecimal($total_price));
				}
				
				
				
				$row += 1;
				if($this->Admin || $this->Owner || ($this->GP['products-cost'] && $this->GP['products-price'])){
					$this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				}else if($this->GP['products-cost'] || $this->GP['products-price']){
					$this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				}else{
					$this->excel->getActiveSheet()->getStyle("F" . $row . ":F" . $row)->getBorders()
							->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				}


				$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($grand_quantity));
				if($this->Admin || $this->Owner || $this->GP['products-cost']){
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($grand_cost));
				}
				if($this->Admin || $this->Owner || $this->GP['products-price']){
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($grand_price));
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
		
				$filename = 'serial_by_product_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
		}else{
			$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['categories'] = $this->site->getAllCategories();
			$this->data['warehouses'] = $this->site->getWarehouses();
			$this->data['sel_warehouse'] = $this->input->post('warehouse') ? $this->site->getWarehouseByID($this->input->post('warehouse')) : NULL;
			$this->data['product_serials'] = $product_serials;
			$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('serial_by_product_report')));
			$meta = array('page_title' => lang('serial_by_product_report'), 'bc' => $bc);	
			$this->core_page('reports/serial_by_product_report',$meta,$this->data);
		}
		
		
	}
	
	public function bill_details()
	{
		$this->cus->checkPermissions('bill_details', TRUE);
		$this->data['bills'] = $this->reports_model->getBillDetails();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('bill_details_report')));
        $meta = array('page_title' => lang('bill_details_report'), 'bc' => $bc);
        $this->core_page('reports/bill_details', $meta, $this->data);
	}
	
	public function get_subcategory()
	{
		$category_id = $this->input->get("category_id");
		$subcategory_id = $this->input->get("subcategory_id");
		
		$subcategory = $this->reports_model->getSubCategoryByCategory($category_id);
		$group_opt .= "<select name='subcategory_id' class='form-control select1'><option value=''>".lang('select')." ".lang('subcategory')."</option>";
		if($subcategory){
			foreach($subcategory as $group){
				if($subcategory_id == $group->id){
					$group_opt .="<option value='".$group->id."' selected>".$group->name."</option>";
				}else{
					$group_opt .="<option value='".$group->id."'>".$group->name."</option>";
				}
			}
			
			$group_opt .= '</select>';
		}
		echo json_encode(array('group_opt'=>$group_opt));
	}
	
	public function product_monthly_sale()
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_monthly_sale')));
        $meta = array('page_title' => lang('product_monthly_sale'), 'bc' => $bc);
        $this->core_page('reports/product_monthly_sale', $meta, $this->data);
    }
	
	public function getProductsMontlySale($pdf = NULL, $xls = NULL)
	{
		$this->cus->checkPermissions('product_monthly_sale', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : NULL;      
        $cf1 = $this->input->get('cf1') ? $this->input->get('cf1') : NULL;
        $cf2 = $this->input->get('cf2') ? $this->input->get('cf2') : NULL;
        $cf3 = $this->input->get('cf3') ? $this->input->get('cf3') : NULL;
        $cf4 = $this->input->get('cf4') ? $this->input->get('cf4') : NULL;
        $cf5 = $this->input->get('cf5') ? $this->input->get('cf5') : NULL;
        $cf6 = $this->input->get('cf6') ? $this->input->get('cf6') : NULL;
		$warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $year = $this->input->get('year') ? $this->input->get('year') : date('Y');
		$allow_category = $this->site->getCategoryByProject();

		$where = '';
		$where_warehouse = '';
		if($product){
			$where .=" AND ".$this->db->dbprefix('products').".id = '".$product."'";
		}
		if($category){
			$where .=" AND ".$this->db->dbprefix('products').".category_id = '".$category."'";
		}
		if($brand){
			$where .=" AND ".$this->db->dbprefix('products').".brand = '".$brand."'";
		}
		if($subcategory){
			$where .=" AND ".$this->db->dbprefix('products').".subcategory_id = '".$subcategory."'";
		}
		if($cf1){
			$where .=" AND ".$this->db->dbprefix('products').".cf1 = '".$cf1."'";
		}
		if($cf2){
			$where .=" AND ".$this->db->dbprefix('products').".cf2 = '".$cf2."'";
		}
		if($cf3){
			$where .=" AND ".$this->db->dbprefix('products').".cf3 = '".$cf3."'";
		}
		if($cf4){
			$where .=" AND ".$this->db->dbprefix('products').".cf4 = '".$cf4."'";
		}
		if($cf5){
			$where .=" AND ".$this->db->dbprefix('products').".cf5 = '".$cf5."'";
		}
		if($cf6){
			$where .=" AND ".$this->db->dbprefix('products').".cf6 = '".$cf6."'";
		}
		if ($allow_category) {
			$where .= " AND ".$this->db->dbprefix('products').".category_id IN ('".implode("','",$allow_category)."')";
		}
		if($warehouse){
			$where_warehouse .=" AND ".$this->db->dbprefix('sales').".warehouse_id = '".$warehouse."'";
		}
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$uwarehouses = json_decode($this->session->userdata('warehouse_id'));
			if($uwarehouses){
				$u = 1;
				$warehouse_ids = '';
				foreach($uwarehouses as $uwarehouse){
					if($u != 1){
						$warehouse_ids .= ", '".$uwarehouse."'";
					}else{
						$warehouse_ids .= "'".$uwarehouse."'";
						$u = 2;
					}
				}
			}

			$where_warehouse .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN (".$warehouse_ids.")";
		}
		
		if ($xls) {

			$this->db
				->select("category_name,code,name,jan_quantity,fab_quantity,mar_quantity,apr_quantity,may_quantity,jun_quantity,jul_quantity,aug_quantity,sep_quantity,oct_quantity,nov_quantity,dec_quantity,total_quantity")
				->from("(SELECT
								(".$this->db->dbprefix('categories').".`name`) AS category_name,
								(".$this->db->dbprefix('products').".code) as code,
								(".$this->db->dbprefix('products').".name) as name,
								IFNULL(stm_jan.qty,0) AS jan_quantity,
								IFNULL(stm_fab.qty,0) AS fab_quantity,	
								IFNULL(stm_mar.qty,0) AS mar_quantity,
								IFNULL(stm_apr.qty,0) AS apr_quantity,
								IFNULL(stm_may.qty,0) AS may_quantity,
								IFNULL(stm_jun.qty,0) AS jun_quantity,
								IFNULL(stm_jul.qty,0) AS jul_quantity,
								IFNULL(stm_aug.qty,0) AS aug_quantity,
								IFNULL(stm_sep.qty,0) AS sep_quantity,
								IFNULL(stm_oct.qty,0) AS oct_quantity,
								IFNULL(stm_nov.qty,0) AS nov_quantity,
								IFNULL(stm_dec.qty,0) AS dec_quantity,
								IFNULL(stm_tot.qty,0) AS total_quantity
							FROM
								".$this->db->dbprefix('products')."
							INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 1 GROUP BY product_id) as stm_jan ON stm_jan.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 2 GROUP BY product_id) as stm_fab ON stm_fab.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 3 GROUP BY product_id) as stm_mar ON stm_mar.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 4 GROUP BY product_id) as stm_apr ON stm_apr.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 5 GROUP BY product_id) as stm_may ON stm_may.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 6 GROUP BY product_id) as stm_jun ON stm_jun.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 7 GROUP BY product_id) as stm_jul ON stm_jul.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 8 GROUP BY product_id) as stm_aug ON stm_aug.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 9 GROUP BY product_id) as stm_sep ON stm_sep.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 10 GROUP BY product_id) as stm_oct ON stm_oct.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 11 GROUP BY product_id) as stm_nov ON stm_nov.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 12 GROUP BY product_id) as stm_dec ON stm_dec.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0 ) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." GROUP BY product_id) as stm_tot ON stm_tot.product_id = ".$this->db->dbprefix('products').".id
							WHERE 1=1 ".$where."
						) as product_monthly
						WHERE total_quantity <> 0
						
				")
				->order_by('category_name');
				
				$q = $this->db->get();
				if ($q->num_rows() > 0) {
					foreach (($q->result()) as $row) {
						$data[] = $row;
					}
				} else {
					$data = NULL;
				}

				if (!empty($data)) {
					$this->load->library('excel');
					$this->excel->setActiveSheetIndex(0);
					$this->excel->getActiveSheet()->setTitle(lang('product_monthly_sale'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('category'));	
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('product_code'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('jan'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('fab'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('mar'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('apr'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('may'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('jun'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('jul'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('aug'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('sep'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('oct'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('nov'));
					$this->excel->getActiveSheet()->SetCellValue('O1', lang('dec'));
					$this->excel->getActiveSheet()->SetCellValue('P1', lang('total'));

					$row = 2;
					foreach ($data as $data_row) {
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->category_name);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->remove_tag($data_row->jan_quantity));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->remove_tag($data_row->fab_quantity));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->remove_tag($data_row->mar_quantity));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->remove_tag($data_row->apr_quantity));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->remove_tag($data_row->may_quantity));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->remove_tag($data_row->jun_quantity));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->remove_tag($data_row->jul_quantity));
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->remove_tag($data_row->aug_quantity));
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->remove_tag($data_row->sep_quantity));
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->remove_tag($data_row->oct_quantity));
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->remove_tag($data_row->nov_quantity));
						$this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->remove_tag($data_row->dec_quantity));
						$this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->cus->remove_tag($data_row->total_quantity));
						$row++;
					}
					
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);
					

					$filename = 'product_monthly_sale_' . date('Y_m_d_H_i_s');
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
					$this->load->helper('excel');
					create_excel($this->excel, $filename);

				}
				$this->session->set_flashdata('error', lang('nothing_found'));
				redirect($_SERVER["HTTP_REFERER"]);
		}else{
			$this->load->library('datatables');
			$this->datatables
				->select("category_name,code,name,jan_quantity,fab_quantity,mar_quantity,apr_quantity,may_quantity,jun_quantity,jul_quantity,aug_quantity,sep_quantity,oct_quantity,nov_quantity,dec_quantity,total_quantity")
				->from("(SELECT
								(".$this->db->dbprefix('categories').".`name`) AS category_name,
								(".$this->db->dbprefix('products').".code) as code,
								(".$this->db->dbprefix('products').".name) as name,
								IFNULL(stm_jan.qty,0) AS jan_quantity,
								IFNULL(stm_fab.qty,0) AS fab_quantity,	
								IFNULL(stm_mar.qty,0) AS mar_quantity,
								IFNULL(stm_apr.qty,0) AS apr_quantity,
								IFNULL(stm_may.qty,0) AS may_quantity,
								IFNULL(stm_jun.qty,0) AS jun_quantity,
								IFNULL(stm_jul.qty,0) AS jul_quantity,
								IFNULL(stm_aug.qty,0) AS aug_quantity,
								IFNULL(stm_sep.qty,0) AS sep_quantity,
								IFNULL(stm_oct.qty,0) AS oct_quantity,
								IFNULL(stm_nov.qty,0) AS nov_quantity,
								IFNULL(stm_dec.qty,0) AS dec_quantity,
								IFNULL(stm_tot.qty,0) AS total_quantity
							FROM
								".$this->db->dbprefix('products')."
							INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 1 GROUP BY product_id) as stm_jan ON stm_jan.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 2 GROUP BY product_id) as stm_fab ON stm_fab.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 3 GROUP BY product_id) as stm_mar ON stm_mar.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 4 GROUP BY product_id) as stm_apr ON stm_apr.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 5 GROUP BY product_id) as stm_may ON stm_may.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 6 GROUP BY product_id) as stm_jun ON stm_jun.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 7 GROUP BY product_id) as stm_jul ON stm_jul.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 8 GROUP BY product_id) as stm_aug ON stm_aug.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 9 GROUP BY product_id) as stm_sep ON stm_sep.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 10 GROUP BY product_id) as stm_oct ON stm_oct.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 11 GROUP BY product_id) as stm_nov ON stm_nov.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 12 GROUP BY product_id) as stm_dec ON stm_dec.product_id = ".$this->db->dbprefix('products').".id
							LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0 ) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." GROUP BY product_id) as stm_tot ON stm_tot.product_id = ".$this->db->dbprefix('products').".id
							WHERE 1=1 ".$where."
						) as product_monthly
						WHERE total_quantity <> 0
						
				");
			echo $this->datatables->generate();
		}
		
	}
	
	public function product_yearly_sale()
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_yearly_sale')));
        $meta = array('page_title' => lang('product_yearly_sale'), 'bc' => $bc);
        $this->core_page('reports/product_yearly_sale', $meta, $this->data);
    }
	
	public function getProductsYearlySale($pdf = NULL, $xls = NULL)
	{
		$this->cus->checkPermissions('product_monthly_sale', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : NULL;      
        $cf1 = $this->input->get('cf1') ? $this->input->get('cf1') : NULL;
        $cf2 = $this->input->get('cf2') ? $this->input->get('cf2') : NULL;
        $cf3 = $this->input->get('cf3') ? $this->input->get('cf3') : NULL;
        $cf4 = $this->input->get('cf4') ? $this->input->get('cf4') : NULL;
        $cf5 = $this->input->get('cf5') ? $this->input->get('cf5') : NULL;
        $cf6 = $this->input->get('cf6') ? $this->input->get('cf6') : NULL;
		$warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $year = $this->input->get('year') ? $this->input->get('year') : date('Y');
		
		$allow_category = $this->site->getCategoryByProject();
		
		$where = '';
		$where_warehouse = '';
		if($product){
			$where .=" AND ".$this->db->dbprefix('products').".id = '".$product."'";
		}
		if($category){
			$where .=" AND ".$this->db->dbprefix('products').".category_id = '".$category."'";
		}
		if($brand){
			$where .=" AND ".$this->db->dbprefix('products').".brand = '".$brand."'";
		}
		if($subcategory){
			$where .=" AND ".$this->db->dbprefix('products').".subcategory_id = '".$subcategory."'";
		}
		if($cf1){
			$where .=" AND ".$this->db->dbprefix('products').".cf1 = '".$cf1."'";
		}
		if($cf2){
			$where .=" AND ".$this->db->dbprefix('products').".cf2 = '".$cf2."'";
		}
		if($cf3){
			$where .=" AND ".$this->db->dbprefix('products').".cf3 = '".$cf3."'";
		}
		if($cf4){
			$where .=" AND ".$this->db->dbprefix('products').".cf4 = '".$cf4."'";
		}
		if($cf5){
			$where .=" AND ".$this->db->dbprefix('products').".cf5 = '".$cf5."'";
		}
		if($cf6){
			$where .=" AND ".$this->db->dbprefix('products').".cf6 = '".$cf6."'";
		}
		
		if($warehouse){
			$where_warehouse .=" AND ".$this->db->dbprefix('sales').".warehouse_id = '".$warehouse."'";
		}
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$where_warehouse .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN ".$warehouse_ids;
		}
		if ($xls) {

			$this->db
				->select("category_name,code,name,last_quantity,current_quantity")
				->from("(SELECT
								(".$this->db->dbprefix('categories').".`name`) AS category_name,
								(".$this->db->dbprefix('categories').".`id`) AS category_id,
								(".$this->db->dbprefix('products').".code) as code,
								(".$this->db->dbprefix('products').".name) as name,
								convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".($year - 1)." AND product_id = ".$this->db->dbprefix('products').".id )) AS last_quantity,
								convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".$year." AND product_id = ".$this->db->dbprefix('products').".id )) AS current_quantity
							FROM
								".$this->db->dbprefix('products')."
							INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
							WHERE 1=1 ".$where."
						) as product_monthly
						
				")
				->order_by('category_name');
				if($allow_category){
					$this->db->where_in("product_monthly.category_id",$allow_category);
				}
				
				$q = $this->db->get();
				if ($q->num_rows() > 0) {
					foreach (($q->result()) as $row) {
						$data[] = $row;
					}
				} else {
					$data = NULL;
				}

				if (!empty($data)) {
					$this->load->library('excel');
					$this->excel->setActiveSheetIndex(0);
					$this->excel->getActiveSheet()->setTitle(lang('product_monthly_sale'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('category'));	
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('product_code'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang(($year-1)));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang($year));
					
					$row = 2;
					foreach ($data as $data_row) {
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->category_name);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->remove_tag($data_row->last_quantity));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->remove_tag($data_row->current_quantity));
						
						$row++;
					}
					
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);

					
			
					$filename = 'product_yearly_sale_' . date('Y_m_d_H_i_s');
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
					$this->load->helper('excel');
					create_excel($this->excel, $filename);
				}
				$this->session->set_flashdata('error', lang('nothing_found'));
				redirect($_SERVER["HTTP_REFERER"]);
		}else{
			$this->load->library('datatables');
			$this->datatables
				->select("category_name,code,name,last_quantity,current_quantity")
				->from("(SELECT
								(".$this->db->dbprefix('categories').".`name`) AS category_name,
								(".$this->db->dbprefix('categories').".`id`) AS category_id,
								(".$this->db->dbprefix('products').".code) as code,
								(".$this->db->dbprefix('products').".name) as name,
								convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".($year - 1)." AND product_id = ".$this->db->dbprefix('products').".id )) AS last_quantity,
								convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".$year." AND product_id = ".$this->db->dbprefix('products').".id )) AS current_quantity
							FROM
								".$this->db->dbprefix('products')."
							INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
							WHERE 1=1 ".$where."
						) as product_monthly
						
				");
			if($allow_category){
				$this->datatables->where_in("product_monthly.category_id",$allow_category);
			}	
			echo $this->datatables->generate();
		}
		
	}
	
	public function installment_payment_customers()
	{
		$this->cus->checkPermissions("installment_payments");
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installment_payment_customers_report')));
        $meta = array('page_title' => lang('installment_payment_customers_report'), 'bc' => $bc);
        $this->core_page('reports/installment_payment_customers', $meta, $this->data);
	}
	
	public function getInstallmentPaymentCustomers($pdf = NULL, $xls = NULL)
	{
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		
        if ($xls) {
			$sql = '';
			if ($start_date) {
				$sql .= ' AND date >= "' . $start_date . '"';
			}
			if ($end_date) {
				$sql .= ' AND date <= "' . $end_date . '"';
			}
			$this->db
				->select("
					installments.id as id,
					installments.customer,
					installments.reference_no,
					installments.description as product,
					installments.price,
					sales.total_discount as discount,
					sales.grand_total as amount,
					installments.deposit,
					IFNULL(cus_installment_items.principal,0) as principal,
					IFNULL(cus_installment_items.interest,0) as interest,
					IFNULL(cus_installment_items.payment,0) as payment,
					(IFNULL(cus_installment_payments.paid, 0) + IFNULL(cus_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0) as paid,
					IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0) as total_paid,
					IFNULL(cus_installment_items.payment,0) - (IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0)) - IF(cus_installments.status='payoff', IFNULL(cus_interest.interest, 0), 0) as total_balance,
					((IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0)) * 100) / IFNULL(cus_installment_items.payment,0) as total_percent_paid,
					installments.status")
				->from('installments')
				->join('sales', 'sales.id=installments.sale_id', 'left')
				->join('(SELECT
						sum(abs(grand_total)) AS total_return,
						sum(abs(paid)) AS return_paid,
						sale_id
					FROM
						cus_sales
					WHERE sale_status = "returned"
					GROUP BY
						sale_id) as cus_returns', 'cus_returns.sale_id=sales.id', 'left')
				->join('(SELECT 
							installment_id,
							SUM(amount) as paid,
							SUM(interest_paid) as interest_paid
						FROM cus_payments
						GROUP BY installment_id) AS cus_payments','cus_payments.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							IFNULL(sum(payment),0) AS payment,
							IFNULL(sum(interest),0) AS interest,
							IFNULL(sum(principal),0) AS principal
						FROM
							cus_installment_items
						GROUP BY installment_id) as cus_installment_items', 'cus_installment_items.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							SUM(interest) as interest
						FROM cus_installment_items WHERE status = "pending"
						GROUP BY installment_id) AS cus_interest','cus_interest.installment_id=installments.id', 'left')
				->join('(SELECT 
								sale_id,
								SUM(amount) as paid,
								SUM(interest_paid) as interest_paid
							FROM cus_payments WHERE 1=1 '.$sql.'
							GROUP BY sale_id) AS cus_installment_payments','cus_installment_payments.sale_id=installments.sale_id', 'left')
				->where('ROUND((IFNULL(cus_installment_payments.paid, 0) + IFNULL(cus_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0),'.$this->Settings->decimals.') >', 0);
			
			if($reference_no){
				$this->db->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("installments.biller_id", $biller);
			}
			if($customer){
				$this->db->where("installments.customer_id", $customer);
			}
			if($project){
				$this->db->where("installments.project_id", $project);
			}
			if($warehouse){
				$this->db->where("installments.warehouse_id", $warehouse);
			}
			if ($user) {
				$this->db->where('installments.created_by', $user);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->mergeCells('A1:A2');
				$this->excel->getActiveSheet()->mergeCells('B1:B2');
				$this->excel->getActiveSheet()->mergeCells('C1:C2');
				$this->excel->getActiveSheet()->mergeCells('D1:D2');
				$this->excel->getActiveSheet()->mergeCells('E1:E2');
				$this->excel->getActiveSheet()->mergeCells('F1:F2');
				$this->excel->getActiveSheet()->mergeCells('G1:G2');
				$this->excel->getActiveSheet()->mergeCells('K1:K2');
				$this->excel->getActiveSheet()->mergeCells('H1:J1');
				$this->excel->getActiveSheet()->mergeCells('L1:N1');
				$this->excel->getActiveSheet()->mergeCells('O1:O2');
                $this->excel->getActiveSheet()->setTitle(lang('installment_payment_customer'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('name'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('price'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('deposit'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('installment'));
				$this->excel->getActiveSheet()->SetCellValue('H2', lang('principal'));
				$this->excel->getActiveSheet()->SetCellValue('I2', lang('interest'));
				$this->excel->getActiveSheet()->SetCellValue('J2', lang('payment'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('total'));
				$this->excel->getActiveSheet()->SetCellValue('L2', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('M2', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('N2', lang('percent_paid'));
				$this->excel->getActiveSheet()->SetCellValue('O1', lang('status'));
				$this->excel->getActiveSheet()->getStyle('A1:O1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
				$this->excel->getActiveSheet()->getStyle('A2:O2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $row = 3;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->price));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->discount));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->amount));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->deposit));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->principal));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->interest));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->payment));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->total_paid));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($data_row->total_balance));
					$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($data_row->total_percent_paid));
					$this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->status);
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(10);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);

				$filename = 'installment_payment_customer_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
			$sql = '';
			if ($start_date) {
				$sql .= ' AND date >= "' . $start_date . '"';
			}
			if ($end_date) {
				$sql .= ' AND date <= "' . $end_date . '"';
			}
			$this->datatables
				->select("
					installments.id as id,
					installments.customer,
					installments.reference_no,
					installments.description as product,
					installments.price,
					sales.total_discount as discount,
					sales.grand_total,
					installments.deposit,
					IFNULL(cus_installment_items.principal,0) as principal,
					IFNULL(cus_installment_items.interest,0) as interest,
					IFNULL(cus_installment_items.payment,0) as payment,
					(IFNULL(cus_installment_payments.paid, 0) + IFNULL(cus_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0) as paid,
					IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0) as total_paid,
					IFNULL(cus_installment_items.payment,0) - (IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0)) - IF(cus_installments.status='payoff', IFNULL(cus_interest.interest, 0), 0) as total_balance,
					((IFNULL(cus_payments.paid, 0) + IFNULL(cus_payments.interest_paid, 0)) * 100) / IFNULL(cus_installment_items.payment,0) as total_percent_paid,
					installments.status")
				->from('installments')
				->join('sales', 'sales.id=installments.sale_id', 'left')
				->join('(SELECT
						sum(abs(grand_total)) AS total_return,
						sum(abs(paid)) AS return_paid,
						sale_id
					FROM
						cus_sales
					WHERE sale_status = "returned"
					GROUP BY
						sale_id) as cus_returns', 'cus_returns.sale_id=sales.id', 'left')
				->join('(SELECT 
							installment_id,
							SUM(amount) as paid,
							SUM(interest_paid) as interest_paid
						FROM cus_payments
						GROUP BY installment_id) AS cus_payments','cus_payments.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							IFNULL(sum(payment),0) AS payment,
							IFNULL(sum(interest),0) AS interest,
							IFNULL(sum(principal),0) AS principal
						FROM
							cus_installment_items
						GROUP BY installment_id) as cus_installment_items', 'cus_installment_items.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_id,
							SUM(interest) as interest
						FROM cus_installment_items WHERE status = "pending"
						GROUP BY installment_id) AS cus_interest','cus_interest.installment_id=installments.id', 'left')
				->join('(SELECT 
								sale_id,
								SUM(amount) as paid,
								SUM(interest_paid) as interest_paid
							FROM cus_payments WHERE 1=1 '.$sql.'
							GROUP BY sale_id) AS cus_installment_payments','cus_installment_payments.sale_id=installments.sale_id', 'left')
				->where('ROUND((IFNULL(cus_installment_payments.paid, 0) + IFNULL(cus_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0),'.$this->Settings->decimals.') >', 0);
			
			if($reference_no){
				$this->datatables->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("installments.biller_id", $biller);
			}
			if($customer){
				$this->datatables->where("installments.customer_id", $customer);
			}
			if($project){
				$this->datatables->where("installments.project_id", $project);
			}
			if($warehouse){
				$this->datatables->where("installments.warehouse_id", $warehouse);
			}
			if ($user) {
				$this->datatables->where('installments.created_by', $user);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
				 $this->datatables->unset_column("id");
			echo $this->datatables->generate();
		}
	}

	public function daily_sale_lists()
	{
		$this->cus->checkPermissions('daily_sales');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_sale_lists')));
        $meta = array('page_title' => lang('daily_sale_lists'), 'bc' => $bc);
        $this->core_page('reports/daily_sale_lists', $meta, $this->data);
	}
	
	public function get_daily_sales($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('daily_sales', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $sale_type = $this->input->get('sale_type') ? $this->input->get('sale_type') : NULL;
		$sale_tax = $this->input->get('sale_tax') ? $this->input->get('sale_tax') : NULL;
		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if($end_date){
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
		
		$where = " AND ".$this->db->dbprefix('sales').".sale_status !='draft'";
		if($biller){
			$where .= " AND ".$this->db->dbprefix('sales').".biller_id='".$biller."'";
		}
		if($customer){
			$where .= " AND ".$this->db->dbprefix('sales').".customer_id='".$customer."'";
		}
		if($project){
			$where .= " AND ".$this->db->dbprefix('sales').".project_id='".$project."'";
		}
		if($warehouse){
			$where .= " AND ".$this->db->dbprefix('sales').".warehouse_id='".$warehouse."'";
		}
		if ($user) {
			$where .= " AND ".$this->db->dbprefix('sales').".created_by='".$user."'";
		}
		if ($start_date) {
			$where .= " AND ".$this->db->dbprefix('sales').".date >= '".$start_date."'";
		}
		if ($end_date) {
			$where .= " AND ".$this->db->dbprefix('sales').".date <= '".$end_date."'";
		}
		if($sale_type){
			if($sale_type=="sale"){
				$where .= " AND ".$this->db->dbprefix('sales').".pos != '1'";
			}else if($sale_type=="pos"){
				$where .= " AND ".$this->db->dbprefix('sales').".pos = '1'";
			}
		}
		if($sale_tax){
			if($sale_tax=="yes"){
				$where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) != '0'";
			}else if($sale_tax=="no"){
				$where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) = '0'";
			}
		}
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$where .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN ".$warehouse_ids;
		}

		
		
        if ($xls) {
            $this->db->select("montly_sale.date,montly_sale.sale_qty,montly_sale.item_qty,montly_sale.grand_total,montly_sale.total_cost,montly_sale.total_margin")
							->from("(SELECT
										date( ".$this->db->dbprefix('sales').".date ) AS date,
										count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
										sum( IFNULL(sale_items.quantity,0)) AS item_qty,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
										sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
									FROM
										".$this->db->dbprefix('sales')."
										LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
									WHERE 1=1 ".$where."
									GROUP BY
										date( ".$this->db->dbprefix('sales').".date ) 
									ORDER BY
										date( ".$this->db->dbprefix('sales').".date ) DESC) 
									as montly_sale
								");
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('daily_sale_lists'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('sales'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('item_qty'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
				if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('cost'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('gross_margin'));
				}
				
                
				$row = 2;
                $total_sale = 0;
				$total_qty = 0;
				$total_grand = 0;
				$total_cost = 0;
				$total_margin = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->formatQuantity($data_row->sale_qty));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatQuantity($data_row->item_qty));
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->grand_total));
					if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->total_cost));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->total_margin));
					}
					
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				}


				$filename = 'daily_sale_lists_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
			$this->datatables->select("montly_sale.date,montly_sale.sale_qty,montly_sale.item_qty,montly_sale.grand_total,montly_sale.total_cost,montly_sale.total_margin")
							->from("(SELECT
										date( ".$this->db->dbprefix('sales').".date ) AS date,
										count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
										sum( IFNULL(sale_items.quantity,0)) AS item_qty,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
										sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
									FROM
										".$this->db->dbprefix('sales')."
										LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
									WHERE 1=1 ".$where."
									GROUP BY
										date( ".$this->db->dbprefix('sales').".date ) 
									ORDER BY
										date( ".$this->db->dbprefix('sales').".date ) DESC) 
									as montly_sale
								");
            echo $this->datatables->generate();
        }
    }
	

	public function daily_room_occupancy()
	{
		$this->cus->checkPermissions('daily_sales');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_sale_lists')));
        $meta = array('page_title' => lang('daily_sale_lists'), 'bc' => $bc);
        $this->core_page('reports/rental_room_occupancy_per_day', $meta, $this->data);
	}

		public function get_daily_room_occupancy($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('daily_sales', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $sale_type = $this->input->get('sale_type') ? $this->input->get('sale_type') : NULL;
		$sale_tax = $this->input->get('sale_tax') ? $this->input->get('sale_tax') : NULL;
		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if($end_date){
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
		
		$where = " AND ".$this->db->dbprefix('sales').".sale_status !='draft'";
		if($biller){
			$where .= " AND ".$this->db->dbprefix('sales').".biller_id='".$biller."'";
		}
		if($customer){
			$where .= " AND ".$this->db->dbprefix('sales').".customer_id='".$customer."'";
		}
		if($project){
			$where .= " AND ".$this->db->dbprefix('sales').".project_id='".$project."'";
		}
		if($warehouse){
			$where .= " AND ".$this->db->dbprefix('sales').".warehouse_id='".$warehouse."'";
		}
		if ($user) {
			$where .= " AND ".$this->db->dbprefix('sales').".created_by='".$user."'";
		}
		if ($start_date) {
			$where .= " AND ".$this->db->dbprefix('sales').".date >= '".$start_date."'";
		}
		if ($end_date) {
			$where .= " AND ".$this->db->dbprefix('sales').".date <= '".$end_date."'";
		}
		if($sale_type){
			if($sale_type=="sale"){
				$where .= " AND ".$this->db->dbprefix('sales').".pos != '1'";
			}else if($sale_type=="pos"){
				$where .= " AND ".$this->db->dbprefix('sales').".pos = '1'";
			}
		}
		if($sale_tax){
			if($sale_tax=="yes"){
				$where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) != '0'";
			}else if($sale_tax=="no"){
				$where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) = '0'";
			}
		}
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
			$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
			$warehouse_ids = str_replace(']',')',$warehouse_ids);
			$where .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN ".$warehouse_ids;
		}

		
		
        if ($xls) {
            $this->db->select("montly_sale.date,montly_sale.sale_qty,montly_sale.item_qty,montly_sale.grand_total,montly_sale.total_cost,montly_sale.total_margin")
							->from("(SELECT
										date( ".$this->db->dbprefix('sales').".date ) AS date,
										count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
										sum( IFNULL(sale_items.quantity,0)) AS item_qty,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
										sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
									FROM
										".$this->db->dbprefix('sales')."
										LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
									WHERE 1=1 ".$where."
									GROUP BY
										date( ".$this->db->dbprefix('sales').".date ) 
									ORDER BY
										date( ".$this->db->dbprefix('sales').".date ) DESC) 
									as montly_sale
								");
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('daily_sale_lists'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('sales'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('item_qty'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
				if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('cost'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('gross_margin'));
				}
				
                
				$row = 2;
                $total_sale = 0;
				$total_qty = 0;
				$total_grand = 0;
				$total_cost = 0;
				$total_margin = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->formatQuantity($data_row->sale_qty));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatQuantity($data_row->item_qty));
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->grand_total));
					if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->total_cost));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->total_margin));
					}
					
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				}


				$filename = 'daily_sale_lists_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
			$this->datatables->select("montly_sale.date,montly_sale.sale_qty,montly_sale.item_qty,montly_sale.grand_total,montly_sale.total_cost,montly_sale.total_margin")
							->from("(SELECT
										date( ".$this->db->dbprefix('sales').".date ) AS date,
										count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
										sum( IFNULL(sale_items.quantity,0)) AS item_qty,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
										sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
										sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
									FROM
										".$this->db->dbprefix('sales')."
										LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
									WHERE 1=1 ".$where."
									GROUP BY
										date( ".$this->db->dbprefix('sales').".date ) 
									ORDER BY
										date( ".$this->db->dbprefix('sales').".date ) DESC) 
									as montly_sale
								");
            echo $this->datatables->generate();
        }
    }

	public function installment_missed_repayments()
	{
		$this->cus->checkPermissions("installment_payments");
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installment_missed_repayments_report')));
        $meta = array('page_title' => lang('installment_missed_repayments_report'), 'bc' => $bc);
        $this->core_page('reports/installment_missed_repayments', $meta, $this->data);
	}
	
	public function getMissedRepayments($pdf = NULL, $xls = NULL)
    {		
		$this->cus->checkPermissions("installment_payments");
		$installment_alert_days = ($this->Settings->installment_alert_days?$this->Settings->installment_alert_days:0);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
		if ($xls) {
			$this->db->select("
					installment_items.period,
					installment_items.deadline,
					installments.reference_no as reference_no,
					installments.customer,
					installment_items.payment,
					installment_items.interest, 
					installment_items.principal, 
					installment_items.balance,
					IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) as payment_paid,
					IFNULL(cus_payments.interest_paid,0) as interest_paid,
					IFNULL(cus_payments.amount,0) as principal_paid,
					IFNULL(cus_payments.penalty_paid,0) as penalty_paid,
					cus_payments.date,
					installment_items.status")
				->from('installment_items')
				->join('installments', 'installment_items.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_item_id,
							MAX(reference_no) as reference_no,
							MAX(date) as date,
							SUM(amount) as amount,
							SUM(interest_paid) as interest_paid,
							SUM(penalty_paid) as penalty_paid
								FROM cus_payments
							GROUP BY installment_item_id
							) as cus_payments', 'cus_payments.installment_item_id=installment_items.id', 'left');
			
			if($reference_no){
				$this->db->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("installments.biller_id", $biller);
			}
			if($project){
				$this->db->where("installments.project_id", $project);
			}
			if($warehouse){
				$this->db->like("installments.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->like("installments.customer_id", $customer);
			}
			if ($user) {
				$this->db->where('installments.created_by', $user);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if ($start_date) {
				$this->db->where('deadline >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('deadline <=', $end_date);
			}
			
			if(!$reference_no && !$biller && !$warehouse && !$user && !$start_date && !$end_date){
				$this->db->where('DATE_SUB(cus_installment_items.`deadline`, INTERVAL '.$installment_alert_days.' DAY) <=', date("Y-m-d"));
				$this->db->where('installment_items.status !=','paid');
				$this->db->where('installment_items.status !=','payoff');
				$this->db->where('installments.status !=','payoff');
				$this->db->where('installments.status !=','completed');
				$this->db->where('installments.status !=','inactive');
			}
			
			$q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

			if (!empty($data)) {
					$this->load->library('excel');
					$this->excel->setActiveSheetIndex(0);
					$this->excel->getActiveSheet()->setTitle(lang('installments_missed_repayments'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('period'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('deadline'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('payment'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('interest'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('principal'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('payment_paid'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('interest_paid'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('principal_paid'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('penalty_paid'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('payment_date'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('status'));
					$row = 2;
					foreach ($data as $data_row){
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->period);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->hrsd($data_row->deadline));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->payment);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->interest);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->principal);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->balance);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->payment_paid);
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->interest_paid);
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->principal_paid);
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->penalty_paid);
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->hrsd($data_row->date));
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->status);
						$row++;
					}
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
					$filename = 'installments_missed_repayments_' . date('Y_m_d_H_i_s');
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
					$this->load->helper('excel');
					create_excel($this->excel, $filename);
				}
				
				$this->session->set_flashdata('error', lang('nothing_found'));
				redirect($_SERVER["HTTP_REFERER"]);
				
        } else {
			
			$this->load->library('datatables');
			$this->datatables->select("
					installment_items.id as id,
					installment_items.period,
					installment_items.deadline,
					installments.reference_no as reference_no,
					installments.customer,
					installment_items.payment,
					installment_items.interest, 
					installment_items.principal,
					installment_items.balance,
					IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) as payment_paid,
					IFNULL(cus_payments.interest_paid,0) as interest_paid,
					IFNULL(cus_payments.amount,0) as principal_paid,
					IFNULL(cus_payments.penalty_paid,0) as penalty_paid,
					cus_payments.date,
					installment_items.status")
				->from('installment_items')
				->join('installments', 'installment_items.installment_id=installments.id', 'left')
				->join('(SELECT 
							installment_item_id,
							MAX(reference_no) as reference_no,
							MAX(date) as date,
							SUM(amount) as amount,
							SUM(interest_paid) as interest_paid,
							SUM(penalty_paid) as penalty_paid
								FROM cus_payments
							GROUP BY installment_item_id
							) as cus_payments', 'cus_payments.installment_item_id=installment_items.id', 'left');
			if($reference_no){
				$this->datatables->like("installments.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("installments.biller_id", $biller);
			}
			if($project){
				$this->datatables->where("installments.project_id", $project);
			}
			if($warehouse){
				$this->datatables->like("installments.warehouse_id", $warehouse);
			}
			if($customer){
				$this->datatables->like("installments.customer_id", $customer);
			}
			if ($user) {
				$this->datatables->where('installments.created_by', $user);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if ($start_date) {
				$this->datatables->where('deadline >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('deadline <=', $end_date);
			}
			if(!$reference_no && !$biller && !$warehouse && !$user && !$start_date && !$end_date){
				$this->datatables->where('DATE_SUB(cus_installment_items.`deadline`, INTERVAL '.$installment_alert_days.' DAY) <=', date("Y-m-d"));
				$this->datatables->where('installment_items.status !=','paid');
				$this->datatables->where('installment_items.status !=','payoff');
				$this->datatables->where('installments.status !=','payoff');
				$this->datatables->where('installments.status !=','completed');
				$this->datatables->where('installments.status !=','inactive');
			}
				 $this->datatables->unset_column("id");
			echo $this->datatables->generate();
		}
    }
	
	public function loans()
	{
		$this->cus->checkPermissions('loans');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['products'] = $this->reports_model->getLoanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loans_report')));
        $meta = array('page_title' => lang('loans_report'), 'bc' => $bc);
        $this->core_page('reports/loans', $meta, $this->data);
	}
	
	public function getLoansReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('loans', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$application_no = $this->input->get('application_no') ? $this->input->get('application_no') : NULL;
		$borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
			
            $this->db
                ->select("
				loans.id as id,
				loans.reference_no,
				loan_applications.reference_no as application_no,
				loans.biller,
				loan_borrowers.code,
				loans.borrower,
				CONCAT(UCASE(LEFT(cus_loan_borrowers.gender, 1)),SUBSTRING(cus_loan_borrowers.gender, 2)) as gender,
				loan_products.name as loan_product,
				loans.disbursed_at,
				DATE_ADD(payment_date, INTERVAL (cus_loans.term*cus_loans.frequency) DAY) as maturity_date,
				CONCAT(cus_loan_officers.last_name,' ',cus_loan_officers.first_name) as loan_officer,
				loans.principal_amount,
				IFNULL(cus_loans.principal_amount,0) - ROUND(IFNULL(cus_payments.principal_paid,0)) as outstanding_amount,
				loans.status")
            ->from("loans")
			->join("loan_applications","loan_applications.id=loans.application_id","left")
			->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
			->join("loan_products","loan_products.id=loans.loan_product_id","left")
			->join("users as cus_loan_officers","cus_loan_officers.id=loans.loan_officer_id","left")
			->join('(SELECT 
							loan_id,
							IFNULL(SUM(amount),0) AS principal_paid,
							IFNULL(SUM(interest_paid),0) AS interest_paid
						FROM
							'.$this->db->dbprefix('payments').'
						WHERE type = "received"
						GROUP BY loan_id) as cus_payments', 'cus_payments.loan_id=loans.id', 'left');
			if($reference_no){
				$this->db->like("loans.reference_no", $reference_no);
			}
			if($application_no){
				$this->db->like("loan_applications.reference_no", $application_no);
			}
			if($biller){
				$this->db->where("loans.biller_id", $biller);
			}
			if($borrower){
				$this->db->where("loans.borrower_id", $borrower);
			}
			if($product){
				$this->db->where("loans.loan_product_id", $product);
			}
            if ($user) {
                $this->db->where('loans.created_by', $user);
            }
			if ($start_date) {
				$this->db->where('loans.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('loans.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$styleArray = array(
					'font'  => array(
						'bold'  => true,
					));
				$this->excel->getActiveSheet()->getStyle('A1:M1')->applyFromArray($styleArray);
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loans_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('loan_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('application_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('borrower_code'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('borrower'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('loan_product'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('disbursed_date'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('maturity_date'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('loan_officer'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('principal_amount'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('outstanding_amount'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('status'));
				$style = array(
					'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					)
				);
				$this->excel->getActiveSheet()->getStyle("A1:M1")->applyFromArray($style)->getFont()->setBold(true);
                $row = 2;
                $principal_amount = 0;
				$outstanding_amount = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->application_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->code);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->borrower);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->gender);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->loan_product);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->hrsd($data_row->disbursed_at));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->hrsd($data_row->maturity_date));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->loan_officer);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->principal_amount);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->outstanding_amount);
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($data_row->status));
					$principal_amount += $this->cus->formatDecimal($data_row->principal_amount);
					$outstanding_amount += $this->cus->formatDecimal($data_row->outstanding_amount);
                    $row++;
                }
				$styleArray = array(
					'font'  => array(
						'bold'  => true,
					));
				$this->excel->getActiveSheet()->getStyle('J'.$row.':L'.$row.'')->applyFromArray($styleArray);
				$this->excel->getActiveSheet()->SetCellValue('J' . $row, lang("subtotal"));
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $principal_amount);
				$this->excel->getActiveSheet()->SetCellValue('L' . $row, $outstanding_amount);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $filename = 'loans_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
			
        } else {
			$this->load->library('datatables');
			
            $this->datatables
                ->select("
				loans.id as id,
				loans.reference_no,
				loan_applications.reference_no as application_no,
				loans.biller,
				loan_borrowers.code,
				loans.borrower,
				CONCAT(UCASE(LEFT(cus_loan_borrowers.gender, 1)),SUBSTRING(cus_loan_borrowers.gender, 2)) as gender,
				loan_products.name as loan_product,
				loans.disbursed_at,
				DATE_ADD(payment_date, INTERVAL (cus_loans.term*cus_loans.frequency) DAY) as maturity_date,
				CONCAT(cus_loan_officers.last_name,' ',cus_loan_officers.first_name) as loan_officer,
				loans.principal_amount,
				IFNULL(cus_loans.principal_amount,0) - ROUND(IFNULL(cus_payments.principal_paid,0)) as outstanding_amount,
				loans.status")
            ->from("loans")
			->join("loan_applications","loan_applications.id=loans.application_id","left")
			->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
			->join("loan_products","loan_products.id=loans.loan_product_id","left")
			->join("users as cus_loan_officers","cus_loan_officers.id=loans.loan_officer_id","left")
			->join('(SELECT 
							loan_id,
							IFNULL(SUM(amount),0) AS principal_paid,
							IFNULL(SUM(interest_paid),0) AS interest_paid
						FROM
							'.$this->db->dbprefix('payments').'
						WHERE type = "received"
						GROUP BY loan_id) as cus_payments', 'cus_payments.loan_id=loans.id', 'left');
						
			if($reference_no){
				$this->datatables->like("loans.reference_no", $reference_no);
			}
			if($application_no){
				$this->datatables->like("loan_applications.reference_no", $application_no);
			}
			if($biller){
				$this->datatables->where("loans.biller_id", $biller);
			}
			if($borrower){
				$this->datatables->where("loans.borrower_id", $borrower);
			}
			if($product){
				$this->datatables->where("loans.loan_product_id", $product);
			}
            if ($user) {
                $this->datatables->where('loans.created_by', $user);
            }
			if ($start_date) {
				$this->datatables->where('loans.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('loans.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
	public function loan_disbursement()
	{
		$this->cus->checkPermissions('loan_disbursement');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['products'] = $this->reports_model->getLoanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_disbursement_report')));
        $meta = array('page_title' => lang('loan_disbursement_report'), 'bc' => $bc);
        $this->core_page('reports/loan_disbursement', $meta, $this->data);
	}
	
	public function getLoanDisbursementReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('loan_disbursement', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$loan_reference_no = $this->input->get('loan_reference_no') ? $this->input->get('loan_reference_no') : NULL;
		$borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
            $this->db
                ->select("
				loans.id as id,
				payments.date,
				payments.reference_no,
				loans.reference_no as loan_reference_no,
				loan_borrowers.code,
				loans.borrower,
				loan_products.name as loan_product,
				loans.principal_amount,
				CONCAT(cus_loans.interest_rate,'%') as interest_rate,
				loans.frequency,
				loans.term,
				payments.amount as disbursement,
				payments.type")
            ->from("payments")
			->join("loans","payments.loan_id=loans.id","left")
			->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
			->join("loan_products","loan_products.id=loans.loan_product_id","left")
			->where("payments.type", "sent");
			
			if($reference_no){
				$this->db->like("payments.reference_no", $reference_no);
			}
			if($loan_reference_no){
				$this->db->like("loans.reference_no", $loan_reference_no);
			}
			if($biller){
				$this->db->where("loans.biller_id", $biller);
			}
			if($borrower){
				$this->db->where("loans.borrower_id", $borrower);
			}
			if($product){
				$this->db->where("loans.loan_product_id", $product);
			}
            if ($user) {
                $this->db->where('loans.created_by', $user);
            }
			if ($start_date) {
				$this->db->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$styleArray = array(
					'font'  => array(
						'bold'  => true,
						'size'  => 10,
					));
				$this->excel->getActiveSheet()->getStyle('A1:M1')->applyFromArray($styleArray);
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loan_disbursement_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('loan_reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('borrower_code'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('borrower'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('loan_product'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('principal_amount'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('interest_rate'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('frequency'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('term'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('disbursement'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('type'));
				$style = array(                               
					'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					)
				);
				$this->excel->getActiveSheet()->getStyle("A1:M1")->applyFromArray($style)->getFont()->setBold(true);
                $row = 2;
				$principal_amount = 0;
                $disbursement_amount = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->loan_reference_no);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->code);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->borrower);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->loan_product);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->principal_amount);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->interest_rate);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->frequency);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->term);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->disbursement);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->type);
					$principal_amount += $data_row->principal_amount;
					$disbursement_amount += $data_row->disbursement;
                    $row++;
                }
				$styleArray = array(
					'font'  => array(
						'bold'  => true,
						'size'  => 10,
					));
				$this->excel->getActiveSheet()->getStyle('A'.$row.':L'.$row.'')->applyFromArray($styleArray);
				$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang("subtotal"));
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($principal_amount));
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($disbursement_amount));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $filename = 'loan_disbursement_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
				loans.id as id,
				payments.date,
				payments.reference_no,
				loans.reference_no as loan_reference_no,
				loan_borrowers.code,
				loans.borrower,
				loan_products.name as loan_product,
				loans.principal_amount,
				CONCAT(cus_loans.interest_rate,'%') as interest_rate,
				loans.frequency,
				loans.term,
				payments.amount as disbursement,
				payments.type")
            ->from("payments")
			->join("loans","payments.loan_id=loans.id","left")
			->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
			->join("loan_products","loan_products.id=loans.loan_product_id","left")
			->where("payments.type", "sent");
			
			if($reference_no){
				$this->datatables->like("payments.reference_no", $reference_no);
			}
			if($loan_reference_no){
				$this->datatables->like("loans.reference_no", $loan_reference_no);
			}
			if($biller){
				$this->datatables->where("loans.biller_id", $biller);
			}
			if($borrower){
				$this->datatables->where("loans.borrower_id", $borrower);
			}
			if($product){
				$this->datatables->where("loans.loan_product_id", $product);
			}
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
			if ($start_date) {
				$this->datatables->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
	
	public function loan_collection()
	{
		$this->cus->checkPermissions('loan_collection');
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['products'] = $this->reports_model->getLoanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_collection_report')));
        $meta = array('page_title' => lang('loan_collection_report'), 'bc' => $bc);
        $this->core_page('reports/loan_collection', $meta, $this->data);
	}
	
	public function getLoanCollectionReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('loan_disbursement', TRUE);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$loan_reference_no = $this->input->get('loan_reference_no') ? $this->input->get('loan_reference_no') : NULL;
		$borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
            $this->db
                ->select("
				loans.id as id,
				loans.biller,
				payments.date,
				payments.reference_no,
				loans.reference_no as ref_loan,
				loans.borrower,
				IFNULL(cus_payments.amount, 0) as principal_paid,
				IFNULL(cus_payments.interest_paid, 0) as interest_paid,
				IFNULL(cus_payments.amount + cus_payments.interest_paid, 0) as payment_paid,
				IFNULL(cus_payments.fee_charge,0) as  fee_charge,
				IFNULL(cus_payments.penalty_paid,0) as  penalty_paid,
				paid_by,
				cus_payments.type")
            ->from("payments")
			->join("loans","payments.loan_id=loans.id","left")
			->where("type <>", "disbursed")
			->where("loans.id >", 0);
			if($reference_no){
				$this->db->like("payments.reference_no", $reference_no);
			}
			if($loan_reference_no){
				$this->db->like("loans.reference_no", $loan_reference_no);
			}
			if($biller){
				$this->db->where("loans.biller_id", $biller);
			}
			if($borrower){
				$this->db->where("loans.borrower_id", $borrower);
			}
			if($product){
				$this->db->where("loans.loan_product_id", $product);
			}
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
			if ($start_date) {
				$this->db->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$styleArray = array(
					'font'  => array(
						'bold'  => true,
						'size'  => 10,
					));
				$this->excel->getActiveSheet()->getStyle('A1:M1')->applyFromArray($styleArray);
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loan_collection_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('loan_reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('borrower'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('principal_paid'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('interest_paid'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('payment_paid'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('fee_charge'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('penalty_paid'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('type'));
				$style = array(
					'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					)
				);
				$this->excel->getActiveSheet()->getStyle("A1:K1")->applyFromArray($style)->getFont()->setBold(true);
                $row = 2;
				$principal_paid = 0;
                $interest_paid = 0;
				$payment_paid = 0;
				$fee_charge = 0;
				$penalty_paid = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->ref_loan);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->borrower);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->principal_paid));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->interest_paid));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->payment_paid));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->fee_charge));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->penalty_paid));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->type));
					$principal_paid += $data_row->principal_paid;
					$interest_paid += $data_row->interest_paid;
					$payment_paid += $data_row->payment_paid;
					$fee_charge += $data_row->fee_charge;
					$penalty_paid += $data_row->penalty_paid;
                    $row++;
                }
				$styleArray = array(
					'font'  => array(
						'bold'  => true,
						'size'  => 10,
					));
				$this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row.'')->applyFromArray($styleArray);
				$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang("subtotal"));
				$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($principal_paid));
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($interest_paid));
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($payment_paid));
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($fee_charge));
				$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($penalty_paid));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $filename = 'loan_collection_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
				loans.id as id,
				payments.date,
				payments.reference_no,
				loans.reference_no as ref_loan,
				loan_borrowers.code,
				loans.borrower,
				IFNULL(cus_payments.amount, 0) as principal_paid,
				IFNULL(cus_payments.interest_paid, 0) as interest_paid,
				IFNULL(cus_payments.amount + cus_payments.interest_paid, 0) as payment_paid,
				IFNULL(cus_payments.fee_charge,0) as  fee_charge,
				IFNULL(cus_payments.penalty_paid,0) as  penalty_paid,
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				cus_payments.type")
            ->from("payments")
			->join("loans","payments.loan_id=loans.id","left")
			->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
			->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
			->where("cus_payments.type <>", "sent")
			->where("loans.id >", 0);
			if($reference_no){
				$this->datatables->like("payments.reference_no", $reference_no);
			}
			if($loan_reference_no){
				$this->datatables->like("loans.reference_no", $loan_reference_no);
			}
			if($biller){
				$this->datatables->where("loans.biller_id", $biller);
			}
			if($borrower){
				$this->datatables->where("loans.borrower_id", $borrower);
			}
			if($product){
				$this->datatables->where("loans.loan_product_id", $product);
			}
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
			if ($start_date) {
				$this->datatables->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }

    	public function loan_missed_repayments()
	{
		$this->cus->checkPermissions("loan_payments");
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_missed_repayments_report')));
        $meta = array('page_title' => lang('loan_missed_repayments_report'), 'bc' => $bc);
        $this->core_page('reports/loan_missed_repayments', $meta, $this->data);
	}
	
	public function getLoanMissedRepayments($pdf = NULL, $xls = NULL)
    {		
		$this->cus->checkPermissions("loan_payments");
		$loan_alert_days = ($this->Settings->loan_alert_days?$this->Settings->loan_alert_days:0);
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}

		if ($pdf || $xls) {
			
			$this->db->select("
                    loan_items.id as id,
                    loan_items.period,
                    loan_items.deadline,
                    loans.reference_no as reference_no,
                    loans.biller,
                    loans.borrower,
                    loan_borrowers.phone,
                    loan_items.payment,
                    loan_items.interest, 
                    loan_items.principal,
                    loan_items.balance,
                    IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) as payment_paid,
                    IFNULL(cus_payments.interest_paid,0) as interest_paid,
                    IFNULL(cus_payments.amount,0) as principal_paid,
                    IFNULL(cus_payments.penalty_paid,0) as penalty_paid,
                    cus_payments.date,
                    loan_items.status")
                ->from('loan_items')
                ->join('loans', 'loan_items.loan_id=loans.id', 'left')
                ->join('loan_borrowers','loan_borrowers.id=loans.borrower_id','left')
                ->join('(SELECT 
                            loan_item_id,
                            MAX(reference_no) as reference_no,
                            MAX(date) as date,
                            SUM(amount) as amount,
                            SUM(interest_paid) as interest_paid,
                            SUM(penalty_paid) as penalty_paid
                                FROM cus_payments
                            GROUP BY loan_item_id
                            ) as cus_payments', 'cus_payments.loan_item_id=loan_items.id', 'left');
			
			if($reference_no){
				$this->db->like("loans.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("loans.biller_id", $biller);
			}
			if($project){
				$this->db->where("loans.project_id", $project);
			}
			if($warehouse){
				$this->db->like("loans.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->like("loans.customer_id", $customer);
			}
			if ($user) {
				$this->db->where('loans.created_by', $user);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if ($start_date) {
				$this->db->where('deadline BETWEEN "' . $this->cus->fld($start_date) . '" and "' . $this->cus->fld($end_date) . '"');
			}
			
			if(!$reference_no && !$biller && !$warehouse && !$user && !$start_date && !$end_date){
				$this->db->where('DATE_SUB(cus_loan_items.`deadline`, INTERVAL '.$loan_alert_days.' DAY) <=', date("Y-m-d"));
				$this->db->where('loan_items.status !=','paid');
				$this->db->where('loan_items.status !=','payoff');
				$this->db->where('loans.status !=','payoff');
				$this->db->where('loans.status !=','completed');
				$this->db->where('loans.status !=','inactive');
			}
			
			$q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

			if (!empty($data)) {
					$this->load->library('excel');
					$this->excel->setActiveSheetIndex(0);
					$this->excel->getActiveSheet()->setTitle(lang('loan_missed_repayments'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('period'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('deadline'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('borrower'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('payment'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('interest'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('principal'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('payment_paid'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('interest_paid'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('principal_paid'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('penalty_paid'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('payment_date'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
					$row = 2;
					foreach ($data as $data_row){
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->period);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->cus->hrsd($data_row->deadline));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->borrower);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->payment);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->interest);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->principal);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->balance);
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->payment_paid);
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->interest_paid);
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->principal_paid);
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->penalty_paid);
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->hrsd($data_row->date));
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->status);
						$row++;
					}
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
					$filename = 'loan_missed_repayments_' . date('Y_m_d_H_i_s');
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
					if ($pdf) {
						$styleArray = array(
							'borders' => array(
								'allborders' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN
								)
							)
						);
						$this->excel->getDefaultStyle()->applyFromArray($styleArray);
						$this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
						require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
						$rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
						$rendererLibrary = 'MPDF';
						$rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
						if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
							die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
								PHP_EOL . ' as appropriate for your directory structure');
						}
						header('Content-Type: application/pdf');
						header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
						header('Cache-Control: max-age=0');
						$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
						$objWriter->save('php://output');
						exit();
					}
					if ($xls) {
						ob_clean();
						header('Content-Type: application/vnd.ms-excel');
						header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
						header('Cache-Control: max-age=0');
						ob_clean();
						$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
						$objWriter->save('php://output');
						exit();
					}
				}
				
				$this->session->set_flashdata('error', lang('nothing_found'));
				redirect($_SERVER["HTTP_REFERER"]);
				
        } else {
			
			$this->load->library('datatables');
			$this->datatables->select("

					loan_items.id as id,
					loan_items.period,
					loan_items.deadline,
					loans.reference_no as reference_no,
                    loans.biller,
					loans.borrower,
                    loan_borrowers.phone,
					loan_items.payment,
					loan_items.interest, 
					loan_items.principal,
					loan_items.balance,
					IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) as payment_paid,
					IFNULL(cus_payments.interest_paid,0) as interest_paid,
					IFNULL(cus_payments.amount,0) as principal_paid,
					IFNULL(cus_payments.penalty_paid,0) as penalty_paid,
					cus_payments.date,
					loan_items.status")
					
				->from('loan_items')
				->join('loans', 'loan_items.loan_id=loans.id', 'left')
				->join('loan_borrowers','loan_borrowers.id=loans.borrower_id','left')
				->join('(SELECT 
							loan_item_id,
							MAX(reference_no) as reference_no,
							MAX(date) as date,
							SUM(amount) as amount,
							SUM(interest_paid) as interest_paid,
							SUM(penalty_paid) as penalty_paid
								FROM cus_payments
							GROUP BY loan_item_id
							) as cus_payments', 'cus_payments.loan_item_id=loan_items.id', 'left');
			if($reference_no){
				$this->datatables->like("loans.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("loans.biller_id", $biller);
			}
			if($project){
				$this->datatables->where("loans.project_id", $project);
			}
			if($warehouse){
				$this->datatables->like("loans.warehouse_id", $warehouse);
			}
			if($customer){
				$this->datatables->like("loans.customer_id", $customer);
			}
			if ($user) {
				$this->datatables->where('loans.created_by', $user);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if ($start_date) {
				$this->datatables->where('deadline >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('deadline <=', $end_date);
			}
			if(!$reference_no && !$biller && !$warehouse && !$user && !$start_date && !$end_date){
				$this->datatables->where('DATE_SUB(cus_loan_items.`deadline`, INTERVAL '.$loan_alert_days.' DAY) <=', date("Y-m-d"));
				$this->datatables->where('loan_items.status !=','paid');
				$this->datatables->where('loan_items.status !=','payoff');
				$this->datatables->where('loans.status !=','payoff');
				$this->datatables->where('loans.status !=','completed');
				$this->datatables->where('loans.status !=','inactive');
			}
				 $this->datatables->unset_column("id");
			echo $this->datatables->generate();
		}
    }

    public function loan_repayments_report()
    {
        $this->cus->checkPermissions("repayments_report");
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['products'] = $this->reports_model->getLoanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_repayments_report')));
        $meta = array('page_title' => lang('loan_repayments_report'), 'bc' => $bc);
        $this->core_page('reports/loan_repayments_report', $meta, $this->data);
    }
    
    public function getLoanRepaymentsReport($xls = NULL)
    {       
        $this->cus->checkPermissions("repayments_report");
        $loan_alert_days = ($this->Settings->loan_alert_days?$this->Settings->loan_alert_days:0);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {
            $this->db->select("
                    loan_items.period,
            		loan_items.deadline,
                    loans.reference_no as reference_no,
                    loan_products.name as loan_product,
                    loans.borrower,
                    loan_borrowers.phone,
                    IFNULL(".$this->db->dbprefix('loan_items').".interest,0) as interest,
                    IFNULL(".$this->db->dbprefix('loan_items').".fee_charge,0) as fee_charge,
                    IFNULL(".$this->db->dbprefix('loan_items').".principal,0) as principal,
                    IFNULL(".$this->db->dbprefix('loan_items').".payment,0) as payment,
                    IFNULL(".$this->db->dbprefix('loan_items').".paid,0) as paid,
                    IFNULL(".$this->db->dbprefix('loan_items').".payment,0) - IFNULL(".$this->db->dbprefix('loan_items').".paid,0) + IFNULL(".$this->db->dbprefix('loan_items').".fee_charge,0) as balance,
                    loan_items.status")
                ->from('loan_items')
                ->join('loans', 'loan_items.loan_id=loans.id', 'left')
                ->join("loan_products","loan_products.id=loans.loan_product_id","left")
                ->join('loan_borrowers','loan_borrowers.id=loans.borrower_id','left');
            if($reference_no){
                $this->datatables->like("loans.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("loans.biller_id", $biller);
            }
            if($project){
                $this->datatables->where("loans.project_id", $project);
            }
            if($product){
				$this->datatables->where("loans.loan_product_id", $product);
			}
            if($warehouse){
                $this->datatables->where("loans.warehouse_id", $warehouse);
            }
            if($borrower){
				$this->datatables->where("loans.borrower_id", $borrower);
			}
            if ($user) {
                $this->datatables->where('loans.created_by', $user);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if ($start_date) {
                $this->datatables->where('deadline >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('deadline <=', $end_date);
            }
            $this->datatables->where('loans.status !=','inactive');
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('repayments_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('reference_no'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('customer'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('deadline'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('interest'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('principal'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('total'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                    $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
                    $row = 2;
                    foreach ($data as $data_row){
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->customer);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->hrsd($data_row->deadline));
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatDecimal($data_row->interest));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->principal));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->payment));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->paid));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->balance));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

                    $filename = 'repayments_report_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
                
                $this->session->set_flashdata('error', lang('nothing_found'));
                redirect($_SERVER["HTTP_REFERER"]);
                
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
            		loan_items.period,
            		loan_items.deadline,
                    loans.reference_no as reference_no,
                    loan_products.name as loan_product,
                    loans.borrower,
                    loan_borrowers.phone,
                    IFNULL(".$this->db->dbprefix('loan_items').".interest,0) as interest,
                    IFNULL(".$this->db->dbprefix('loan_items').".fee_charge,0) as fee_charge,
                    IFNULL(".$this->db->dbprefix('loan_items').".principal,0) as principal,
                    IFNULL(".$this->db->dbprefix('loan_items').".payment,0) as payment,
                    IFNULL(".$this->db->dbprefix('loan_items').".paid,0) as paid,
                    IFNULL(".$this->db->dbprefix('loan_items').".payment,0) - IFNULL(".$this->db->dbprefix('loan_items').".paid,0) + IFNULL(".$this->db->dbprefix('loan_items').".fee_charge,0) as balance,
                    loan_items.status")
                ->from('loan_items')
                ->join('loans', 'loan_items.loan_id=loans.id', 'left')
                ->join("loan_products","loan_products.id=loans.loan_product_id","left")
                ->join('loan_borrowers','loan_borrowers.id=loans.borrower_id','left');
            if($reference_no){
                $this->datatables->like("loans.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("loans.biller_id", $biller);
            }
            if($project){
                $this->datatables->where("loans.project_id", $project);
            }
            if($product){
				$this->datatables->where("loans.loan_product_id", $product);
			}
            if($warehouse){
                $this->datatables->where("loans.warehouse_id", $warehouse);
            }
            if($borrower){
				$this->datatables->where("loans.borrower_id", $borrower);
			}
            if ($user) {
                $this->datatables->where('loans.created_by', $user);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if ($start_date) {
                $this->datatables->where('deadline >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('deadline <=', $end_date);
            }
            $this->datatables->where('loans.status !=','inactive');
            echo $this->datatables->generate();
        }
    }

    public function monthly_loan_payment(){
        $this->cus->checkPermissions('loan_payments');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_loan_payment')));
        $meta = array('page_title' => lang('monthly_loan_payment'), 'bc' => $bc);
        $this->core_page('reports/monthly_loan_payment', $meta, $this->data);
    }
	
	public function daily_expenses()
	{
		$this->cus->checkPermissions('expenses');
        $this->data['categories'] = $this->reports_model->getDailyExpenses();
		$this->data['expenses'] = $this->reports_model->getArryDailyExpenses();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_expenses_report')));
        $meta = array('page_title' => lang('daily_expenses_report'), 'bc' => $bc);
        $this->core_page('reports/daily_expenses', $meta, $this->data);
	}
	
	public function daily_expenses_export($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('expenses');
        if ($xls) {
            $categories = $this->reports_model->getDailyExpenses();
            if (!empty($categories)) {
                $this->load->library('excel');
				$get = $this->input->get();
				$year = isset($get['year'])?$get['year']:date("Y");
				$month = isset($get['month'])?$get['month']:date("m");
				$total_expense = 0;
				$total_expense_day = array();
				$row = 1;
				$col = 0;
				$number_days = cal_days_in_month(CAL_GREGORIAN,$month,$year);
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('daily_expenses_report'));
				if($categories){
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('category'));
					$col++;
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('subcategory'));
					$col++;
					if(isset($number_days) && $number_days){
						for($day = 1; $day <= $number_days; $day++){
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$day);
							$col++;
						}
					}
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('total'));
					$row++;
					$col = 0;
					foreach($categories as $category){
						$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$category->main_cat);
						$col++;
						$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$category->name);
						$col++;
						if(isset($number_days) && $number_days){
							$total_amount = 0;
							for($day = 1; $day <= $number_days; $day++){
								$amount = $this->reports_model->getDailyExpenseByAmount($category->id, $day,$month, $year);
								$total_amount += $amount;
								if(isset($total_expense_day[$day]) && $total_expense_day[$day]){
									$total_expense_day[$day] = $amount + $total_expense_day[$day];
								}else{
									$total_expense_day[$day] = $amount;
								}
								$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($amount));
								$col++;
							}
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($total_amount));
							$col=0;
						}
						$row++;
					}
					$col=1;
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row,lang('total'));
					$col=2;
					if(isset($number_days) && $number_days){
						for($day = 1; $day <= $number_days; $day++){
							$gtotal_expense_day = 0;
							if(isset($total_expense_day[$day]) && $total_expense_day[$day]){
								$gtotal_expense_day = $total_expense_day[$day];
								$total_expense += $gtotal_expense_day;
							}
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($gtotal_expense_day));
							$col++;
						}
					}
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($total_expense));
				}
                $filename = 'daily_expenses_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }

    public function daily_check_in()
	{
		$this->cus->checkPermissions('expenses');
        $this->data['categories'] = $this->reports_model->getDailyRentalsCount();
		$this->data['expenses'] = $this->reports_model->getArrayDailyRentalCount();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_expenses_report')));
        $meta = array('page_title' => lang('daily_expenses_report'), 'bc' => $bc);
        $this->core_page('reports/daily_check_in', $meta, $this->data);
	}
	
	public function daily_check_in_export($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('expenses');
        if ($xls) {
            $categories = $this->reports_model->getDailyExpenses();
            if (!empty($categories)) {
                $this->load->library('excel');
				$get = $this->input->get();
				$year = isset($get['year'])?$get['year']:date("Y");
				$month = isset($get['month'])?$get['month']:date("m");
				$total_expense = 0;
				$total_expense_day = array();
				$row = 1;
				$col = 0;
				$number_days = cal_days_in_month(CAL_GREGORIAN,$month,$year);
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('daily_expenses_report'));
				if($categories){
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('category'));
					$col++;
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('subcategory'));
					$col++;
					if(isset($number_days) && $number_days){
						for($day = 1; $day <= $number_days; $day++){
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$day);
							$col++;
						}
					}
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('total'));
					$row++;
					$col = 0;
					foreach($categories as $category){
						$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$category->main_cat);
						$col++;
						$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$category->name);
						$col++;
						if(isset($number_days) && $number_days){
							$total_amount = 0;
							for($day = 1; $day <= $number_days; $day++){
								$amount = $this->reports_model->getDailyExpenseByAmount($category->id, $day,$month, $year);
								$total_amount += $amount;
								if(isset($total_expense_day[$day]) && $total_expense_day[$day]){
									$total_expense_day[$day] = $amount + $total_expense_day[$day];
								}else{
									$total_expense_day[$day] = $amount;
								}
								$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($amount));
								$col++;
							}
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($total_amount));
							$col=0;
						}
						$row++;
					}
					$col=1;
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row,lang('total'));
					$col=2;
					if(isset($number_days) && $number_days){
						for($day = 1; $day <= $number_days; $day++){
							$gtotal_expense_day = 0;
							if(isset($total_expense_day[$day]) && $total_expense_day[$day]){
								$gtotal_expense_day = $total_expense_day[$day];
								$total_expense += $gtotal_expense_day;
							}
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($gtotal_expense_day));
							$col++;
						}
					}
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($total_expense));
				}
                $filename = 'daily_expenses_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }
	
	public function tanks()
	{
		$this->cus->checkPermissions('tanks');
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['tanks'] = $this->reports_model->getTanks();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('tanks_report')));
        $meta = array('page_title' => lang('tanks_report'), 'bc' => $bc);
        $this->core_page('reports/tanks', $meta, $this->data);
	}
	
	
	public function getTanksReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('tanks');
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
		$tank = $this->input->get('tank') ? $this->input->get('tank') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if ($xls) {
				$this->db->select("
								fuel_sales.date,
								fuel_sales.saleman,
								tanks.`name`,
								fuel_sale_items.nozzle_no,
								fuel_sale_items.nozzle_start_no,
								fuel_sale_items.nozzle_end_no 
							")
				->from("fuel_sale_items")
				->join("fuel_sales", "fuel_sales.id = fuel_sale_items.fuel_sale_id", "left")
				->join("tanks", "tanks.id = fuel_sale_items.tank_id", "left");

				if($saleman){
					$this->db->where("fuel_sales.saleman_id", $saleman);
				}
				if ($start_date) {
					$this->db->where("fuel_sales.date >=", $start_date);
				}
				if ($end_date) {
					$this->db->where("fuel_sales.date <=", $end_date);
				}
				if ($tank) {
					$this->db->where("fuel_sale_items.tank_id", $tank);
				}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('tanks_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('salesman'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('tank'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('nozzle_no'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('nozzle_start_no'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('nozzle_end_no'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->saleman);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->nozzle_no);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatQuantity($data_row->nozzle_start_no));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatQuantity($data_row->nozzle_end_no));

                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);

                $filename = 'tanks_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
							fuel_sales.date,
							fuel_sales.saleman,
							tanks.`name`,
							fuel_sale_items.nozzle_no,
							fuel_sale_items.nozzle_start_no,
							fuel_sale_items.nozzle_end_no 
						")
            ->from("fuel_sale_items")
			->join("fuel_sales", "fuel_sales.id = fuel_sale_items.fuel_sale_id", "left")
			->join("tanks", "tanks.id = fuel_sale_items.tank_id", "left");

			if($saleman){
				$this->datatables->where("fuel_sales.saleman_id", $saleman);
			}
			if ($start_date) {
				$this->datatables->where("fuel_sales.date >=", $start_date);
			}
			if ($end_date) {
				$this->datatables->where("fuel_sales.date <=", $end_date);
			}
			if ($tank) {
				$this->datatables->where("fuel_sale_items.tank_id", $tank);
			}
            echo $this->datatables->generate();
        }
    }
	
	public function fuel_sales()
	{
		$this->cus->checkPermissions('fuel_sales');
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_sales_report')));
        $meta = array('page_title' => lang('fuel_sales_report'), 'bc' => $bc);
        $this->core_page('reports/fuel_sales', $meta, $this->data);
	}
	
	public function getFuelSalesReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('fuel_sales');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if ($xls) {
			$this->db
                ->select("
						fuel_sales.date, 
						fuel_sales.reference_no, 
						fuel_sales.biller, 
						fuel_sales.saleman, 
						CONCAT(cus_fuel_times.open_time,' - ',cus_fuel_times.close_time) as time,
						IFNULL(cus_fuel_sale_items.using_qty,0) as using_qty,
						IFNULL(cus_fuel_sale_items.customer_qty,0) as customer_qty,
						IFNULL(cus_fuel_sale_items.customer_amount,0) as customer_amount,
                        IFNULL(cus_fuel_sale_items.quantity,0) as quantity,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as total_sales,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0) as cash_change,
						IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) as cash_submit,
						IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) as credit_amount,
						(IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) +  IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) - IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0))- IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as different,
						CONCAT(last_name,' ',first_name) as username,
						fuel_sales.attachment,
						IF(IFNULL(".$this->db->dbprefix("fuel_sales").".total,0) = 0, 'completed', IF(ROUND(cus_sales.quantity,".$this->Settings->decimals.")>=ROUND(".$this->db->dbprefix("fuel_sale_items").".quantity,".$this->Settings->decimals."),'completed',IF(cus_sales.quantity > 0,'partial','pending'))) as status,
						fuel_sales.id
						")
            ->from("fuel_sales")
			->join('fuel_times', 'fuel_times.id=fuel_sales.time_id', 'left')
			->join('(SELECT 
							fuel_sale_id,
							SUM(subtotal) as subtotal,
							SUM(quantity) as quantity
						FROM '.$this->db->dbprefix('sales').'
						LEFT JOIN '.$this->db->dbprefix('sale_items').' ON '.$this->db->dbprefix('sale_items').'.sale_id = cus_sales.id
						GROUP BY fuel_sale_id) as cus_sales','cus_sales.fuel_sale_id=fuel_sales.id','left')
			->join('(SELECT 
							fuel_sale_id,
							SUM(quantity) as quantity,
							SUM(using_qty) as using_qty,
							SUM(customer_qty) as customer_qty,
							SUM(customer_amount) as customer_amount
						FROM '.$this->db->dbprefix('fuel_sale_items').'
						GROUP BY fuel_sale_id) as cus_fuel_sale_items','cus_fuel_sale_items.fuel_sale_id=fuel_sales.id','left')
			->join("users","users.id=fuel_sales.created_by","left");

			if($reference_no){
				$this->db->like("fuel_sales.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("fuel_sales.biller_id", $biller);
            }
            if($project){
				$this->db->where("fuel_sales.project_id", $project);
			}
			if($saleman){
				$this->db->where("fuel_sales.saleman_id", $saleman);
			}
			if($user){
				$this->db->where("fuel_sales.created_by", $user);
			}
			if($warehouse){
				$this->db->where("fuel_sales.warehouse_id", $warehouse);
			}
			if ($start_date) {
				$this->db->where('fuel_sales.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('fuel_sales.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("fuel_sales.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('time'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('using_qty'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('customer_qty'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('customer_amount'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('fuel_qty'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('fuel_amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('cash_change'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('cash_submit'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('credit_amount'));
				$this->excel->getActiveSheet()->SetCellValue('N1', lang('different'));
				$this->excel->getActiveSheet()->SetCellValue('O1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('P1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->saleman);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->time);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatQuantity($data_row->using_qty));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatQuantity($data_row->customer_qty));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->customer_amount));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatQuantity($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->total_sales));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->cash_change));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->cash_submit));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($data_row->credit_amount));
					$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($data_row->different));
					$this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->username);
					$this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->status);
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $filename = 'fuel_sales_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
						fuel_sales.date, 
						fuel_sales.reference_no, 
						fuel_sales.biller, 
						fuel_sales.saleman, 
						CONCAT(cus_fuel_times.open_time,' - ',cus_fuel_times.close_time) as time,
                        IFNULL(cus_fuel_sale_items.using_qty,0) as using_qty,
						IFNULL(cus_fuel_sale_items.customer_qty,0) as customer_qty,
						IFNULL(cus_fuel_sale_items.customer_amount,0) as customer_amount,
                        IFNULL(cus_fuel_sale_items.quantity,0) as quantity,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as total_sales,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0) as cash_change,
						IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) as cash_submit,
						IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) as credit_amount,
						(IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) +  IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) - IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0))- IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as different,
						CONCAT(last_name,' ',first_name) as username,
						fuel_sales.attachment,
						IF(IFNULL(".$this->db->dbprefix("fuel_sales").".total,0) = 0, 'completed', IF(ROUND(cus_sales.quantity,".$this->Settings->decimals.")>=ROUND(".$this->db->dbprefix("fuel_sale_items").".quantity,".$this->Settings->decimals."),'completed',IF(cus_sales.quantity > 0,'partial','pending'))) as status,
						fuel_sales.id
						")
            ->from("fuel_sales")
			->join('fuel_times', 'fuel_times.id=fuel_sales.time_id', 'left')
			->join('(SELECT 
							fuel_sale_id,
							SUM(subtotal) as subtotal,
							SUM(quantity) as quantity
						FROM '.$this->db->dbprefix('sales').'
						LEFT JOIN '.$this->db->dbprefix('sale_items').' ON '.$this->db->dbprefix('sale_items').'.sale_id = cus_sales.id
						GROUP BY fuel_sale_id) as cus_sales','cus_sales.fuel_sale_id=fuel_sales.id','left')
			->join('(SELECT 
							fuel_sale_id,
							SUM(quantity) as quantity,
							SUM(using_qty) as using_qty,
							SUM(customer_qty) as customer_qty,
							SUM(customer_amount) as customer_amount
						FROM '.$this->db->dbprefix('fuel_sale_items').'
						GROUP BY fuel_sale_id) as cus_fuel_sale_items','cus_fuel_sale_items.fuel_sale_id=fuel_sales.id','left')
			->join("users","users.id=fuel_sales.created_by","left");
			
			
		
			if($reference_no){
				$this->datatables->like("fuel_sales.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("fuel_sales.biller_id", $biller);
            }
            if($project){
				$this->datatables->where("fuel_sales.project_id", $project);
			}
			if($saleman){
				$this->datatables->where("fuel_sales.saleman_id", $saleman);
			}
			if($user){
				$this->datatables->where("fuel_sales.created_by", $user);
			}
			if($warehouse){
				$this->datatables->where("fuel_sales.warehouse_id", $warehouse);
			}
			if ($start_date) {
				$this->datatables->where('fuel_sales.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('fuel_sales.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("fuel_sales.created_by", $this->session->userdata('view_right'));
			}
            echo $this->datatables->generate();
        }
    }
	
	public function fuel_sale_details()
	{
		$this->cus->checkPermissions('fuel_sales');
		$this->load->library("pagination");
		$page = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
		$post = $_POST?$_POST:$_GET;
		unset($post['submit_report']);
		$config = array(
			"suffix" => ($post?'?'.http_build_query(($post), '', "&"):''),
			"base_url" => base_url() . "reports/fuel_sale_details",
			"total_rows" => count($this->reports_model->getSaleFuelDetails()),
			"per_page" => $this->Settings->rows_per_page,
			"uri_segment" => 3,
			'full_tag_open' => '<ul class="pagination pagination-sm">',
            'full_tag_close' => '</ul>',
			'first_link' => false,
			'last_link' => false,
			'next_link' => 'Next > ',
			'next_tag_open' => '<li class="next">',
			'next_tag_close' => '</li>',
			'prev_link' => ' < Previous',
			'prev_tag_open' => '<li class="prev">',
			'prev_tag_close' => '</li>',
			'cur_tag_open' => '<li class="active"><a>',
			'cur_tag_close' => '</a></li>',
			'num_tag_open' => '<li>',
			'num_tag_close' => '</li>',
		);
        $this->pagination->initialize($config);
        $this->data["pagination"] = $this->pagination->create_links();
		$this->data['fuel_sales'] = $this->reports_model->getSaleFuelDetails($config["per_page"], $page);
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_sale_details_report')));
        $meta = array('page_title' => lang('fuel_sale_details_report'), 'bc' => $bc);
        $this->core_page('reports/fuel_sale_details', $meta, $this->data);
	}
	
	public function fuel_sale_details_export($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('fuel_sales');
        if ($xls) {
            $fuel_sales = $this->reports_model->getSaleFuelDetails();
            if (!empty($fuel_sales)) {
				$this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_sale_details'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('time'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('using_qty'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('customer_qty'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('customer_amount'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('fuel_qty'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('fuel_amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('cash_change'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('cash_submit'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('credit_amount'));
				$this->excel->getActiveSheet()->SetCellValue('N1', lang('different'));
				$row = 2;
                foreach ($fuel_sales as $data_row){
                    $different = ($data_row->credit_amount + $data_row->total_cash - $data_row->total_cash_open - $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->saleman);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->time);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->using_qty));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->customer_qty));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->customer_amount));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->quantity));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($data_row->total_cash_open));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($data_row->total_cash));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($data_row->credit_amount));
					$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($different));
					$row++;
					$fuel_items = $this->reports_model->getSaleFuelItemsDetails($data_row->id);
					if($fuel_items){
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang('item'));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang('tank'));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, lang('nozzle_no'));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang('nozzle_start_no'));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, lang('nozzle_end_no'));
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang('using_qty'));
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, lang('customer_qty'));
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, lang('fuel_qty'));
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, lang('total_qty'));
						$row++;
						foreach($fuel_items as $i => $item){
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $item->item);
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $item->tank);
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $item->nozzle_no);
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($item->nozzle_start_no));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($item->nozzle_end_no));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($item->using_qty));
							$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatDecimal($item->customer_qty));
							$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatDecimal($item->quantity));
							$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatDecimal($item->quantity + $item->customer_qty + $item->using_qty));
							$row++;
						}
					}
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(18);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
       
                $filename = 'fuel_sale_details_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }
	
	public function nozzles_report()
	{
		$this->cus->checkPermissions('fuel_sales');
		$this->data['tank_items'] = $this->reports_model->getDailyTankItems();
		$this->data['nozzles'] = $this->reports_model->getDailyTanks();
		$this->data['tanks'] = $this->reports_model->getTanks();
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('nozzles_report')));
        $meta = array('page_title' => lang('nozzles_report'), 'bc' => $bc);
        $this->core_page('reports/nozzles_report', $meta, $this->data);
	}
	
	public function nozzles_export($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('fuel_sales');
        if ($xls) {
            $tank_items = $this->reports_model->getDailyTankItems();
			$nozzles = $this->reports_model->getDailyTanks();
            if (!empty($tank_items)) {
				$this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('nozzles_report'));
				$row = 1;
				$col = 0;
				if($tank_items){
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('nozzle_no'));
					$col++;
					if(isset($tank_items) && $tank_items){
						foreach($tank_items as $tank_item){
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$tank_item->product_name);
							$col+=3;
						}
					}
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('total'));
					$row++;
					$col = 1;
					if(isset($tank_items) && $tank_items){
						foreach($tank_items as $tank_item){
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,lang('begin'));
							$col++;
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,lang('ending'));
							$col++;
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,lang('quantity'));
							$col++;
						}
						$row++;
					}
					$col = 0;
					if(isset($nozzles) && $nozzles){
						foreach($nozzles as $nozzle){
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$nozzle->tank." (".$nozzle->nozzle_no.") ");
							if(isset($tank_items) && $tank_items){
								$col=1; $quantity = 0;
								foreach($tank_items as $tank_item){
									$item_row = $this->reports_model->getDailyTankItemsQty($nozzle->tank_id, $nozzle->id, $tank_item->product_id);
									$quantity += $item_row->quantity;
									$quantity += $item_row->customer_qty;
									$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($item_row->nozzle_start_no));
									$col++;
									$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($item_row->nozzle_end_no));
									$col++;
									$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($item_row->quantity + $item_row->customer_qty));
									$col++;
								}
								$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->cus->formatDecimal($quantity));
								$col++;
								$row++;
								$col = 0;
							}
						}
					}
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
				}
                $filename = 'nozzles_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }
	
	public function freight_costs_report($id = null)
    {
        $this->cus->checkPermissions('purchases');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('freight_costs_report')));
        $meta = array('page_title' => lang('freight_costs_report'), 'bc' => $bc);
        $this->core_page('reports/freight_costs_report', $meta, $this->data);
    }
	
	public function getFreightCost($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('purchases');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}

        if ($xls) {

            $this->db->select('IFNULL('.$this->db->dbprefix('purchases').'.date,'.$this->db->dbprefix('receives').'.date) as date,
						IFNULL('.$this->db->dbprefix('purchases').'.reference_no,'.$this->db->dbprefix('receives').'.re_reference_no) as reference_no,
						purchase_shipping_items.product_code,
						purchase_shipping_items.product_name,
						IFNULL('.$this->db->dbprefix('purchase_items').'.unit_cost,'.$this->db->dbprefix('receive_items').'.unit_cost) as cost,
						purchase_shipping_items.unit_cost as freight_cost,
						(IFNULL('.$this->db->dbprefix('purchase_shipping_items').'.unit_cost,0) + IFNULL('.$this->db->dbprefix('receive_items').'.unit_cost,0) + IFNULL('.$this->db->dbprefix('purchase_items').'.unit_cost,0)) as total_cost', false)
            ->from('purchase_shipping_items')
            ->join('purchase_items', 'purchase_items.purchase_id = purchase_shipping_items.purchase_id 
											AND purchase_items.product_id = purchase_shipping_items.product_id 
											AND purchase_items.id = purchase_shipping_items.purchase_item_id', 'left')
			->join('receive_items','receive_items.receive_id = purchase_shipping_items.receive_id 
											AND receive_items.product_id = purchase_shipping_items.product_id 
											AND receive_items.id = purchase_shipping_items.purchase_item_id','left')		
			->join('purchases','purchases.id = purchase_shipping_items.purchase_id','left')
			->join('receives','receives.id = purchase_shipping_items.receive_id','left')
            ->group_by('purchase_shipping_items.id');
			
			if ($biller) {
                $this->db->where('(purchases.biller_id = "'.$biller.'" OR receives.biller_id = "'.$biller.'")');
            }
			if ($warehouse) {
                $this->db->where('(purchases.warehouse_id = "'.$warehouse.'" OR receives.warehouse_id = "'.$warehouse.'")');
            }
			if ($supplier) {
				$this->db->where('(purchases.supplier_id = "'.$supplier.'" OR receives.supplier_id = "'.$supplier.'")');
            }
            if ($reference_no) {
				$this->db->where('(purchases.reference_no = "'.$reference_no.'" OR receives.pu_reference_no = "'.$reference_no.'")');
            }
            if ($user) {
				$this->db->where('(purchases.created_by = "'.$user.'" OR receives.created_by = "'.$user.'")');
            }
			if ($start_date) {
                $this->db->where('(purchases.date >= "' . $start_date . '" OR receives.date >= "' . $start_date . '")');
            }
			if ($end_date) {
                $this->db->where('(purchases.date <= "' . $end_date . '" OR receives.date <= "' . $end_date . '")');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('(purchases.biller_id = "'.$this->session->userdata('biller_id').'" OR receives.biller_id = "'.$this->session->userdata('biller_id').'")');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(purchases.warehouse_id IN '.$warehouse_ids.' OR receives.warehouse_id IN '.$warehouse_ids.')');
			}

           
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('freight_costs_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('product_name'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('purchase_cost'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('freight_cost'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('total_cost'));

                $row = 2; 
                foreach ($data as $data_row) {
					$user = $this->site->getUser($expense->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product_code);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->cost));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->freight_cost));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->total_cost));
                    $row++;
                }
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
       
				$filename = 'freight_costs_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
            ->select('IFNULL('.$this->db->dbprefix('purchases').'.date,'.$this->db->dbprefix('receives').'.date) as date,
						IFNULL('.$this->db->dbprefix('purchases').'.reference_no,'.$this->db->dbprefix('receives').'.re_reference_no) as reference_no,
						purchase_shipping_items.product_code,
						purchase_shipping_items.product_name,
						IFNULL('.$this->db->dbprefix('purchase_items').'.unit_cost,'.$this->db->dbprefix('receive_items').'.unit_cost) as cost,
						purchase_shipping_items.unit_cost as freight_cost,
						(IFNULL('.$this->db->dbprefix('purchase_shipping_items').'.unit_cost,0) + IFNULL('.$this->db->dbprefix('receive_items').'.unit_cost,0) + IFNULL('.$this->db->dbprefix('purchase_items').'.unit_cost,0)) as total_cost', false)
            ->from('purchase_shipping_items')
            ->join('purchase_items', 'purchase_items.purchase_id = purchase_shipping_items.purchase_id 
											AND purchase_items.product_id = purchase_shipping_items.product_id 
											AND purchase_items.id = purchase_shipping_items.purchase_item_id', 'left')
			->join('receive_items','receive_items.receive_id = purchase_shipping_items.receive_id 
											AND receive_items.product_id = purchase_shipping_items.product_id 
											AND receive_items.id = purchase_shipping_items.purchase_item_id','left')		
			->join('purchases','purchases.id = purchase_shipping_items.purchase_id','left')
			->join('receives','receives.id = purchase_shipping_items.receive_id','left')
            ->group_by('purchase_shipping_items.id');
			
			if ($biller) {
                $this->datatables->where('(purchases.biller_id = "'.$biller.'" OR receives.biller_id = "'.$biller.'")');
            }
			if ($warehouse) {
                $this->datatables->where('(purchases.warehouse_id = "'.$warehouse.'" OR receives.warehouse_id = "'.$warehouse.'")');
            }
			if ($supplier) {
				$this->datatables->where('(purchases.supplier_id = "'.$supplier.'" OR receives.supplier_id = "'.$supplier.'")');
            }
            if ($reference_no) {
				$this->datatables->where('(purchases.reference_no = "'.$reference_no.'" OR receives.pu_reference_no = "'.$reference_no.'")');
            }
            if ($user) {
				$this->datatables->where('(purchases.created_by = "'.$user.'" OR receives.created_by = "'.$user.'")');
            }
			if ($start_date) {
                $this->datatables->where('(purchases.date >= "' . $start_date . '" OR receives.date >= "' . $start_date . '")');
            }
			if ($end_date) {
                $this->datatables->where('(purchases.date <= "' . $end_date . '" OR receives.date <= "' . $end_date . '")');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('(purchases.biller_id = "'.$this->session->userdata('biller_id').'" OR receives.biller_id = "'.$this->session->userdata('biller_id').'")');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->datatables->where('(purchases.warehouse_id IN '.$warehouse_ids.' OR receives.warehouse_id IN '.$warehouse_ids.')');
			}
            echo $this->datatables->generate();
        }
    }
	
	public function deliveries()
	{
		$this->cus->checkPermissions('deliveries', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('deliveries_report')));
        $meta = array('page_title' => lang('deliveries_report'), 'bc' => $bc);
        $this->core_page('reports/deliveries', $meta, $this->data);
	}
	
	public function getDeliveryReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('deliveries', TRUE);
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$delivered_by = $this->input->get('delivered_by') ? $this->input->get('delivered_by') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
		if ($xls) {

			$ti = "( SELECT delivery_id, product_id, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '(', {$this->db->dbprefix('delivery_items')}.quantity,')')  SEPARATOR '\n') as item_nane from {$this->db->dbprefix('delivery_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('delivery_items')}.product_id ";
            if ($product) {
                $ti .= " WHERE {$this->db->dbprefix('delivery_items')}.product_id = {$product} ";
            }
            $ti .= " GROUP BY {$this->db->dbprefix('delivery_items')}.delivery_id ) as  DTI";
			

			$this->db->select("
							deliveries.date,
							do_reference_no,
							IF(IFNULL(sale_reference_no,'') = '',so_reference_no,sale_reference_no) as ref_to,
							companies.company,
							warehouses.name as warehouse,
							deliveries.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							drivers.delivered_by,
							deliveries.note,
							DTI.item_nane as product_name,
							deliveries.status,
							deliveries.id", FALSE)
							->from('deliveries')
							->join('companies', 'companies.id=deliveries.biller_id', 'left')
							->join('warehouses', 'warehouses.id=deliveries.warehouse_id', 'left')
							->join('users','users.id = deliveries.created_by','left')
							->join('(SELECT id,concat(last_name," ",first_name ) as delivered_by FROM '.$this->db->dbprefix('users').') as drivers','drivers.id = deliveries.delivered_by','left')
							->join($ti,'DTI.delivery_id = deliveries.id','inner')
							->group_by('deliveries.id');
			if ($user) {
				$this->db->where('deliveries.created_by', $user);
			}
			if ($customer) {
				$this->db->where('deliveries.customer_id', $customer);
			}
			if ($delivered_by) {
				$this->db->where('deliveries.delivered_by', $delivered_by);
			}
			if ($warehouse) {
				$this->db->where('deliveries.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->where('deliveries.do_reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where('deliveries.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('deliveries.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('deliveries.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('deliveries.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('deliveries_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no_to'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('delivered_by'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('note'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('status'));
				
				$row = 2;
				
				foreach ($data as $data_row){

					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->do_reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->ref_to);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->company);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->delivered_by);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->remove_tag($data_row->note));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
					
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

				$filename = 'delivery_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$ti = "( SELECT delivery_id, product_id, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', {$this->db->dbprefix('delivery_items')}.quantity)  SEPARATOR '___') as item_nane from {$this->db->dbprefix('delivery_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('delivery_items')}.product_id ";
            if ($product) {
                $ti .= " WHERE {$this->db->dbprefix('delivery_items')}.product_id = {$product} ";
            }
            $ti .= " GROUP BY {$this->db->dbprefix('delivery_items')}.delivery_id ) DTI";
			$this->load->library('datatables');
			$this->datatables
							->select("
							deliveries.date,
							do_reference_no,
							IF(IFNULL(sale_reference_no,'') = '',so_reference_no,sale_reference_no) as ref_to,
							companies.company,
							warehouses.name as warehouse,
							deliveries.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							drivers.delivered_by,
							deliveries.note,
							DTI.item_nane as product_name,
							deliveries.status,
							deliveries.id", FALSE)
							->from('deliveries')
							->join('companies', 'companies.id=deliveries.biller_id', 'left')
							->join('warehouses', 'warehouses.id=deliveries.warehouse_id', 'left')
							->join('users','users.id = deliveries.created_by','left')
							->join('(SELECT id,concat(last_name," ",first_name ) as delivered_by FROM '.$this->db->dbprefix('users').') as drivers','drivers.id = deliveries.delivered_by','left')
							->join($ti,'DTI.delivery_id = deliveries.id','inner')
							->group_by('deliveries.id');
			if ($user) {
				$this->datatables->where('deliveries.created_by', $user);
			}
			if ($customer) {
				$this->datatables->where('deliveries.customer_id', $customer);
			}
			if ($delivered_by) {
				$this->datatables->where('deliveries.delivered_by', $delivered_by);
			}
			if ($warehouse) {
				$this->datatables->where('deliveries.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('deliveries.do_reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where('deliveries.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('deliveries.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('deliveries.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('deliveries.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
			echo $this->datatables->generate();
			
		}
	}

	public function delivery_details()
	{
		$this->cus->checkPermissions('deliveries', TRUE);
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('delivery_details_report')));
        $meta = array('page_title' => lang('delivery_details_report'), 'bc' => $bc);
        $this->core_page('reports/delivery_details', $meta, $this->data);
	}
	
	public function getDeliveryDetailReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('deliveries', TRUE);
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$delivered_by = $this->input->get('delivered_by') ? $this->input->get('delivered_by') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
		
		if ($xls) {

			$this->db->select("
							deliveries.date,
							do_reference_no,
							IF(IFNULL(sale_reference_no,'') = '',so_reference_no,sale_reference_no) as ref_to,
							companies.company,
							warehouses.name as warehouse,
							deliveries.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							drivers.delivered_by,
							delivery_items.product_name,
							convert_qty(".$this->db->dbprefix('delivery_items').".product_id,".$this->db->dbprefix('delivery_items').".quantity) as quantity,
							deliveries.id", FALSE)
							->from('deliveries')
							->join('delivery_items', 'delivery_items.delivery_id=deliveries.id', 'inner')
							->join('companies', 'companies.id=deliveries.biller_id', 'left')
							->join('warehouses', 'warehouses.id=deliveries.warehouse_id', 'left')
							->join('users','users.id = deliveries.created_by','left')
							->join('(SELECT id,concat(last_name," ",first_name ) as delivered_by FROM '.$this->db->dbprefix('users').') as drivers','drivers.id = deliveries.delivered_by','left')
							->where('IFNULL('.$this->db->dbprefix('delivery_items').'.quantity,0) !=',0)
							->group_by('delivery_items.id');
			if ($user) {
				$this->db->where('deliveries.created_by', $user);
			}
			if ($product) {
				$this->db->where('delivery_items.product_id', $product);
			}
			if ($customer) {
				$this->db->where('deliveries.customer_id', $customer);
			}
			if ($delivered_by) {
				$this->db->where('deliveries.delivered_by', $delivered_by);
			}
			if ($warehouse) {
				$this->db->where('deliveries.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->where('deliveries.do_reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where('deliveries.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('deliveries.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('deliveries.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('deliveries.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('delivery_details_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no_to'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('delivered_by'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('quantity'));
				
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->do_reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->ref_to);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->company);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->delivered_by);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->remove_tag($data_row->quantity));
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);


				$filename = 'delivery_details_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables
							->select("
							deliveries.date,
							do_reference_no,
							IF(IFNULL(sale_reference_no,'') = '',so_reference_no,sale_reference_no) as ref_to,
							companies.company,
							warehouses.name as warehouse,
							deliveries.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							drivers.delivered_by,
							delivery_items.product_name,
							convert_qty(".$this->db->dbprefix('delivery_items').".product_id,".$this->db->dbprefix('delivery_items').".quantity) as quantity,
							deliveries.id", FALSE)
							->from('deliveries')
							->join('delivery_items', 'delivery_items.delivery_id=deliveries.id', 'inner')
							->join('companies', 'companies.id=deliveries.biller_id', 'left')
							->join('warehouses', 'warehouses.id=deliveries.warehouse_id', 'left')
							->join('users','users.id = deliveries.created_by','left')
							->join('(SELECT id,concat(last_name," ",first_name ) as delivered_by FROM '.$this->db->dbprefix('users').') as drivers','drivers.id = deliveries.delivered_by','left')
							->where('IFNULL('.$this->db->dbprefix('delivery_items').'.quantity,0) !=',0)
							->group_by('delivery_items.id');
			if ($user) {
				$this->datatables->where('deliveries.created_by', $user);
			}
			if ($product) {
				$this->datatables->where('delivery_items.product_id', $product);
			}
			if ($customer) {
				$this->datatables->where('deliveries.customer_id', $customer);
			}
			if ($delivered_by) {
				$this->datatables->where('deliveries.delivered_by', $delivered_by);
			}
			if ($warehouse) {
				$this->datatables->where('deliveries.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('deliveries.do_reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where('deliveries.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('deliveries.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('deliveries.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('deliveries.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function consignments()
	{
		$this->cus->checkPermissions();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('consignments_report')));
        $meta = array('page_title' => lang('consignments_report'), 'bc' => $bc);
        $this->core_page('reports/consignments', $meta, $this->data);
	}
	
	public function getConsignmentReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('consignments', TRUE);
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
		
		if ($xls) {
			$this->db->select("
							consignments.date,
							consignments.reference_no,
							consignments.biller,
							warehouses.name as warehouse,
							consignments.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							consignments.grand_total,
							consignment_items.total_return,
							consignment_items.total_sale,
							(".$this->db->dbprefix("consignments").".grand_total - IFNULL(consignment_items.total_return,0) - IFNULL(consignment_items.total_sale,0)) as balance,
							consignments.status,
							consignments.id", FALSE)
							->from('consignments')
							->where('consignments.status !=','returned')
							->join('warehouses', 'warehouses.id=consignments.warehouse_id', 'left')
							->join('users','users.id = consignments.created_by','left')
							->join('(SELECT
										consignment_id,
										sum( IFNULL( return_qty, 0 ) * real_unit_price ) AS total_return,
										sum( IFNULL( sale_qty, 0 ) * real_unit_price ) AS total_sale 
									FROM
										'.$this->db->dbprefix("consignment_items").' 
									GROUP BY
										consignment_id) as consignment_items','consignment_items.consignment_id = consignments.id','inner'
							)
							->order_by('consignments.id')
							->group_by('consignments.id');
							
			if ($user) {
				$this->db->where('consignments.created_by', $user);
			}	
			if ($customer) {
				$this->db->where('consignments.customer_id', $customer);
			}		
			if ($warehouse) {
				$this->db->where('consignments.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->where('consignments.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where('consignments.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('consignments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('consignments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('consignments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('consignments_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('total_return'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('total_sale'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('status'));
				
				$row = 2;
				$grand_total = 0;
				$total_return = 0;
				$total_sale = 0;
				$balance = 0;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->total_return));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->total_sale));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->balance));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
					
					$grand_total += $data_row->grand_total;
					$total_return += $data_row->total_return;
					$total_sale += $data_row->total_sale;
					$balance += $data_row->balance;
					$row++;
				}
				
				$this->excel->getActiveSheet()->getStyle("G" . $row . ":J" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
				$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($grand_total));
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($total_return));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($total_sale));
				$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($balance));

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

				$filename = 'consignments_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables
							->select("
							consignments.date,
							consignments.reference_no,
							consignments.biller,
							warehouses.name as warehouse,
							consignments.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							consignments.grand_total,
							consignment_items.total_return,
							consignment_items.total_sale,
							(".$this->db->dbprefix("consignments").".grand_total - IFNULL(consignment_items.total_return,0) - IFNULL(consignment_items.total_sale,0)) as balance,
							consignments.status,
							consignments.id", FALSE)
							->from('consignments')
							->where('consignments.status !=','returned')
							->join('warehouses', 'warehouses.id=consignments.warehouse_id', 'left')
							->join('users','users.id = consignments.created_by','left')
							->join('(SELECT
										consignment_id,
										sum( IFNULL( return_qty, 0 ) * real_unit_price ) AS total_return,
										sum( IFNULL( sale_qty, 0 ) * real_unit_price ) AS total_sale 
									FROM
										'.$this->db->dbprefix("consignment_items").' 
									GROUP BY
										consignment_id) as consignment_items','consignment_items.consignment_id = consignments.id','inner'
							)
							->group_by('consignments.id');
							
			if ($user) {
				$this->datatables->where('consignments.created_by', $user);
			}	
			if ($customer) {
				$this->datatables->where('consignments.customer_id', $customer);
			}		
			if ($warehouse) {
				$this->datatables->where('consignments.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('consignments.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where('consignments.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('consignments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('consignments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('consignments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function consignment_details()
	{
		$this->cus->checkPermissions();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('consignment_details_report')));
        $meta = array('page_title' => lang('consignment_details_report'), 'bc' => $bc);
        $this->core_page('reports/consignment_details', $meta, $this->data);
	}
	
	public function getConsignmentDetailReport($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('consignment_details', TRUE);
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
		if ($xls) {
			$this->db->select("
							consignments.date,
							consignments.reference_no,
							consignments.biller,
							warehouses.name as warehouse,
							consignments.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							consignment_items.product_name,
							convert_qty(product_id, IFNULL(".$this->db->dbprefix("consignment_items").".quantity,0)) as quantity,
							convert_qty(product_id, IFNULL(".$this->db->dbprefix("consignment_items").".return_qty,0)) as return_qty,
							convert_qty(product_id, IFNULL(".$this->db->dbprefix("consignment_items").".sale_qty,0)) as sale_qty,
							convert_qty(product_id, IFNULL(quantity,0) - IFNULL(return_qty,0) - IFNULL(sale_qty,0)) as balance,
							IF((IFNULL(quantity,0) - IFNULL(return_qty,0) - IFNULL(sale_qty,0)) = 0,'completed', IF((IFNULL(return_qty,0) + IFNULL(sale_qty,0)) > 0,'partial','pending')) as status,
							consignments.id", FALSE)
							->from('consignments')
							->where('consignments.status !=','returned')
							->join('warehouses', 'warehouses.id=consignments.warehouse_id', 'left')
							->join('users','users.id = consignments.created_by','left')
							->join('consignment_items', 'consignment_items.consignment_id=consignments.id', 'inner')
							->order_by('consignments.id')
							->group_by('consignment_items.id');
							
			if ($product) {
				$this->db->where('consignment_items.product_id', $product);
			}
			if ($user) {
				$this->db->where('consignments.created_by', $user);
			}	
			if ($customer) {
				$this->db->where('consignments.customer_id', $customer);
			}		
			if ($warehouse) {
				$this->db->where('consignments.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->db->where('consignments.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->db->where('consignments.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('consignments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('consignments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('consignments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('consignment_details_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('total_qty'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('return_qty'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('sale_qty'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
				
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->remove_tag($data_row->quantity));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->remove_tag($data_row->return_qty));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->remove_tag($data_row->sale_qty));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->remove_tag($data_row->balance));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($data_row->status));
					$row++;
				}

				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				

				$filename = 'consignment_details_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables
							->select("
							consignments.date,
							consignments.reference_no,
							consignments.biller,
							warehouses.name as warehouse,
							consignments.customer,
							CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
							consignment_items.product_name,
							convert_qty(product_id, IFNULL(".$this->db->dbprefix("consignment_items").".quantity,0)) as quantity,
							convert_qty(product_id, IFNULL(".$this->db->dbprefix("consignment_items").".return_qty,0)) as return_qty,
							convert_qty(product_id, IFNULL(".$this->db->dbprefix("consignment_items").".sale_qty,0)) as sale_qty,
							convert_qty(product_id, IFNULL(quantity,0) - IFNULL(return_qty,0) - IFNULL(sale_qty,0)) as balance,
							IF((IFNULL(quantity,0) - IFNULL(return_qty,0) - IFNULL(sale_qty,0)) = 0,'completed', IF((IFNULL(return_qty,0) + IFNULL(sale_qty,0)) > 0,'partial','pending')) as status,
							consignments.id", FALSE)
							->from('consignments')
							->where('consignments.status !=','returned')
							->join('warehouses', 'warehouses.id=consignments.warehouse_id', 'left')
							->join('users','users.id = consignments.created_by','left')
							->join('consignment_items', 'consignment_items.consignment_id=consignments.id', 'inner')
							->group_by('consignment_items.id');
							
			if ($product) {
				$this->datatables->where('consignment_items.product_id', $product);
			}
			if ($user) {
				$this->datatables->where('consignments.created_by', $user);
			}	
			if ($customer) {
				$this->datatables->where('consignments.customer_id', $customer);
			}		
			if ($warehouse) {
				$this->datatables->where('consignments.warehouse_id', $warehouse);
			}
			if ($reference_no) {
				$this->datatables->where('consignments.reference_no', $reference_no, 'both');
			}
			if ($start_date) {
				$this->datatables->where('consignments.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('consignments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('consignments.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('consignments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function daily_rentals()
	{
		$this->cus->checkPermissions('daily_rentals');
		$this->data['daily_rentals'] = $this->reports_model->getDailyRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
		$this->data['room_types'] = $this->reports_model->getRoomTypes();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_rentals_report')));
        $meta = array('page_title' => lang('daily_rentals_report'), 'bc' => $bc);
        $this->core_page('reports/daily_rentals', $meta, $this->data);
	}
	
	public function daily_rentals_export($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('daily_rentals');
        if ($xls) {
            $daily_rentals = $this->reports_model->getDailyRooms();
            if (!empty($daily_rentals)) {
                $this->load->library('excel');
				$get = $this->input->get();
				$year = isset($get['year'])?$get['year']:date("Y");
				$month = isset($get['month'])?$get['month']:date("m");
				$row = 1;
				$col = 0;
				$number_days = cal_days_in_month(CAL_GREGORIAN,$month,$year);
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('daily_rentals_report'));
				if($daily_rentals){
					$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('room'));
					$col++;
					if(isset($number_days) && $number_days){
						for($day = 1; $day <= $number_days; $day++){
							$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,"Day ".$day);
							$col++;
						}
					}
					$row++;
					$col = 0;
					foreach($daily_rentals as $daily_rental){
						$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$daily_rental->name);
						$col++;
						if(isset($number_days) && $number_days){
							for($day = 1; $day <= $number_days; $day++){
								$status = '';
								$rental = $this->reports_model->getRentalByDate($daily_rental->id,$day,$month,$year);
								if($rental){
									$status = '1';
								}
								$this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$status);
								$col++;
							}
							$col=0;
						}
						$row++;
					}
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('T')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('U')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('V')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('W')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('X')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('Y')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('Z')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('AA')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('AB')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('AC')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('AD')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('AE')->setWidth(6);
				$this->excel->getActiveSheet()->getColumnDimension('AF')->setWidth(6);
				
                $filename = 'daily_rentals_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }
	
	public function rentals()
	{
		$this->cus->checkPermissions('rentals');
		$this->data['rooms'] = $this->reports_model->getAllRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('rentals_report')));
        $meta = array('page_title' => lang('rentals_report'), 'bc' => $bc);
        $this->core_page('reports/rentals', $meta, $this->data);
	}
	
	public function getRentalsReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('rentals');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$floor = $this->input->get('floor') ? $this->input->get('floor') : NULL;
		$room = $this->input->get('room') ? $this->input->get('room') : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if ($xls) {
			
			$this->db
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.biller,
						rentals.reference_no,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.from_date,
						rentals.to_date,
						IFNULL(cus_rentals.grand_total,0) as grand_total,
						IFNULL(cus_payments.amount,0) as deposit,
						rentals.frequency,
						rentals.checked_in,
						rentals.status
						")
            ->from("rentals")
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="RentalDeposit" AND type ="received" GROUP BY transaction_id) as cus_payments','cus_payments.transaction_id=rentals.id','left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="ReturnRentalDeposit" AND type ="sent"  
					GROUP BY transaction_id) as cus_return_payments','cus_return_payments.transaction_id=rentals.id','left');
					
			if($reference_no){
				$this->db->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->db->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->db->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->db->where("rentals.room_id", $room);
			}
			if($status){
				$this->db->where("rentals.status", $status);
			}
			if($user){
				$this->db->where("rentals.created_by", $user);
			}
			if ($start_date) {
				$this->db->where('rentals.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('rentals.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("rentals.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('rentals_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('room'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('from_date'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('to_date'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('total'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('deposit'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('period'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('checked_in_date'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->room_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->deposit));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->period);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->hrsd($data_row->checked_in));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $filename = 'rentals_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.reference_no,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.from_date,
						rentals.to_date,
						IFNULL(cus_rentals.grand_total,0) as grand_total,
						IFNULL(cus_payments.amount,0) as deposit,
						rentals.frequency,
						rentals.checked_in,
						rentals.status,
						rentals.attachment
						")
            ->from("rentals")
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="RentalDeposit" AND type ="received" GROUP BY transaction_id) as cus_payments','cus_payments.transaction_id=rentals.id','left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="ReturnRentalDeposit" AND type ="sent"  
					GROUP BY transaction_id) as cus_return_payments','cus_return_payments.transaction_id=rentals.id','left');
		
			if($reference_no){
				$this->datatables->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->datatables->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->datatables->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->datatables->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->datatables->where("rentals.room_id", $room);
			}
			if($status){
				$this->datatables->where("rentals.status", $status);
			}
			if($user){
				$this->datatables->where("rentals.created_by", $user);
			}
			if ($start_date) {
				$this->datatables->where('rentals.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('rentals.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("rentals.created_by", $this->session->userdata('view_right'));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }


    public function rental_check_in()
	{
		$this->cus->checkPermissions('rentals');
		$this->data['rooms'] = $this->reports_model->getAllRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('rental_check_in_report')));
        $meta = array('page_title' => lang('rental_check_in_report'), 'bc' => $bc);
        $this->core_page('reports/rental_check_in', $meta, $this->data);
	}
	
	public function getRentalsCheckInReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('rentals');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$floor = $this->input->get('floor') ? $this->input->get('floor') : NULL;
		$room = $this->input->get('room') ? $this->input->get('room') : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if ($xls) {
			
			$this->db
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.biller,
						rentals.reference_no,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.from_date,
						rentals.to_date,
						IFNULL(cus_rentals.grand_total,0) as grand_total,
						IFNULL(cus_payments.amount,0) as deposit,
						rentals.frequency,
						rentals.from_date as checked_in,
						rentals.status
						")
            ->from("rentals")
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->where('rentals.status =','checked_in')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="RentalDeposit" AND type ="received" GROUP BY transaction_id) as cus_payments','cus_payments.transaction_id=rentals.id','left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="ReturnRentalDeposit" AND type ="sent"  
					GROUP BY transaction_id) as cus_return_payments','cus_return_payments.transaction_id=rentals.id','left');
					
			if($reference_no){
				$this->db->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->db->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->db->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->db->where("rentals.room_id", $room);
			}
			if($status){
				$this->db->where("rentals.status", $status);
			}
			if($user){
				$this->db->where("rentals.created_by", $user);
			}
			if ($start_date) {
				$this->db->where('rentals.from_date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('rentals.from_date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("rentals.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('rentals_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('room'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('from_date'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('to_date'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('total'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('deposit'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('period'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('checked_in_date'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->room_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->deposit));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->period);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->hrsd($data_row->checked_in));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $filename = 'rentals_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.reference_no,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.from_date,
						rentals.to_date,
						IFNULL(cus_rentals.grand_total,0) as grand_total,
						IFNULL(cus_payments.amount,0) as deposit,
						rentals.frequency,
						rentals.from_date as checked_in,
						rentals.status,
						rentals.attachment
						")
            ->from("rentals")
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->where('rentals.status =','checked_in')
			->order_by('rentals.date DESC')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="RentalDeposit" AND type ="received" GROUP BY transaction_id) as cus_payments','cus_payments.transaction_id=rentals.id','left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="ReturnRentalDeposit" AND type ="sent"  
					GROUP BY transaction_id) as cus_return_payments','cus_return_payments.transaction_id=rentals.id','left');
		
			if($reference_no){
				$this->datatables->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->datatables->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->datatables->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->datatables->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->datatables->where("rentals.room_id", $room);
			}
			if($status){
				$this->datatables->where("rentals.status", $status);
			}
			if($user){
				$this->datatables->where("rentals.created_by", $user);
			}
			// if ($start_date) {
			// 	$this->datatables->where('rentals.from_date >=', $start_date);
			// }
			// if ($end_date) {
			// 	$this->datatables->where('rentals.from_date <=', $end_date);
			// }

			if ( $start_date && $end_date ) {
                $this->datatables->where($this->db->dbprefix('rentals').'.from_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            // if (!$start_date){
            //      $this->datatables->where($this->db->dbprefix('rentals').'.from_date < "' . date("Y-m-d").'"' );
               
            // }

			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("rentals.created_by", $this->session->userdata('view_right'));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }

        public function rental_check_out()
	{
		$this->cus->checkPermissions('rentals');
		$this->data['rooms'] = $this->reports_model->getAllRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('rental_check_out_report')));
        $meta = array('page_title' => lang('rental_check_out_report'), 'bc' => $bc);
        $this->core_page('reports/rental_check_out', $meta, $this->data);
	}
	
	public function getRentalsCheckOutReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('rentals');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$floor = $this->input->get('floor') ? $this->input->get('floor') : NULL;
		$room = $this->input->get('room') ? $this->input->get('room') : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if ($xls) {
			
			$this->db
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.biller,
						rentals.reference_no,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.from_date,
						rentals.to_date,
						IFNULL(cus_rentals.grand_total,0) as grand_total,
						IFNULL(cus_payments.amount,0) as deposit,
						DATEDIFF(sysdate(), checked_in) as period,
						rentals.to_date as checked_out,
						rentals.status
						")
            ->from("rentals")
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->where('rentals.status =','checked_out')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="RentalDeposit" AND type ="received" GROUP BY transaction_id) as cus_payments','cus_payments.transaction_id=rentals.id','left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="ReturnRentalDeposit" AND type ="sent"  
					GROUP BY transaction_id) as cus_return_payments','cus_return_payments.transaction_id=rentals.id','left');
					
			if($reference_no){
				$this->db->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->db->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->db->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->db->where("rentals.room_id", $room);
			}
			if($status){
				$this->db->where("rentals.status", $status);
			}
			if($user){
				$this->db->where("rentals.created_by", $user);
			}
			if ($start_date) {
				$this->db->where('rentals.to_date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('rentals.to_date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("rentals.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('rentals_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('room'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('from_date'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('to_date'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('total'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('deposit'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('period'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('checked_in_date'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->room_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->deposit));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->period);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->hrsd($data_row->checked_in));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $filename = 'rentals_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.reference_no,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.from_date,
						rentals.to_date,
						IFNULL(cus_rentals.grand_total,0) as grand_total,
						IFNULL(cus_payments.amount,0) as deposit,
						DATEDIFF(sysdate(), checked_in) as period,
						rentals.to_date as checked_out,
						rentals.status,
						rentals.attachment
						")
            ->from("rentals")
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->where('rentals.status =','checked_out')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="RentalDeposit" AND type ="received" GROUP BY transaction_id) as cus_payments','cus_payments.transaction_id=rentals.id','left')
			->join('(SELECT 
							transaction_id,
							SUM(amount) as amount
						FROM cus_payments 
						WHERE transaction="ReturnRentalDeposit" AND type ="sent"  
					GROUP BY transaction_id) as cus_return_payments','cus_return_payments.transaction_id=rentals.id','left');
		
			if($reference_no){
				$this->datatables->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->datatables->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->datatables->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->datatables->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->datatables->where("rentals.room_id", $room);
			}
			if($status){
				$this->datatables->where("rentals.status", $status);
			}
			if($user){
				$this->datatables->where("rentals.created_by", $user);
			}
			if ($start_date) {
				$this->datatables->where('rentals.to_date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('rentals.to_date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("rentals.created_by", $this->session->userdata('view_right'));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }

    
	public function get_room_floor()
	{
		$room_id = $this->input->get("room_id");
		$floor_id = $this->input->get("floor_id");
		$rooms = $this->reports_model->getRoomsByFloor($floor_id);
		$rom = array();
			foreach($rooms as $room){
					$rom[$room->id] = $room->name;
			}
		$opt = form_dropdown('room', $rom, (isset($_POST['room']) ? $_POST['room'] : $room_id), 'id="room" class="form-control select"');
		echo json_encode(array("result" => $opt));
	}

	public function rental_details()
	{
		$this->cus->checkPermissions('rental_details');
		$this->data['rooms'] = $this->reports_model->getAllRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('rental_details_report')));
        $meta = array('page_title' => lang('rental_details_report'), 'bc' => $bc);
        $this->core_page('reports/rental_details', $meta, $this->data);
	}
	
	public function getRentalDetailsReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('rentals');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$floor = $this->input->get('floor') ? $this->input->get('floor') : NULL;
		$room = $this->input->get('room') ? $this->input->get('room') : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if ($xls) {
			
			$this->db
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.reference_no,
						rentals.biller,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.frequency,
						rentals.checked_in,
						rental_items.product_name,
						rental_items.unit_price,
						rentals.status,
						rentals.attachment
						")
            ->from("rentals")
			->join('rental_items', 'rental_items.rental_id=rentals.id', 'right')
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->group_by('rental_items.id');
					
			if($reference_no){
				$this->db->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->db->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->db->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->db->where("rentals.room_id", $room);
			}
			if($status){
				$this->db->where("rentals.status", $status);
			}
			if($user){
				$this->db->where("rentals.created_by", $user);
			}
			if ($start_date) {
				$this->db->where('rentals.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('rentals.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("rentals.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('rentals_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('room'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('period'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('checked_in_date'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('unit_price'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->room_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->period);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->hrsd($data_row->checked_in));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->unit_price));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $filename = 'rentals_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
						rentals.id as id,
						rentals.date,
						rentals.reference_no,
						rentals.customer,
						companies.phone as phone,
						rental_rooms.name as room_name,
						rentals.frequency,
						rentals.checked_in,
						rentals.to_date,
						rental_items.product_name,
						rental_items.unit_price,
						rentals.status,
						rentals.attachment
						")
            ->from("rentals")
			->join('rental_items', 'rental_items.rental_id=rentals.id', 'right')
			->join('rental_rooms', 'rental_rooms.id=rentals.room_id', 'left')
			->join('companies', 'companies.id=rentals.customer_id', 'left')
			->group_by('rental_items.id');
		
			if($reference_no){
				$this->datatables->like("rentals.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("rentals.biller_id", $biller);
			}
			if($warehouse){
				$this->datatables->where("rentals.warehouse_id", $warehouse);
			}
			if($customer){
				$this->datatables->where("rentals.customer_id", $customer);
			}
			if($floor){
				$this->datatables->where("rentals.floor_id", $floor);
			}
			if($room){
				$this->datatables->where("rentals.room_id", $room);
			}
			if($status){
				$this->datatables->where("rentals.status", $status);
			}
			if($user){
				$this->datatables->where("rentals.created_by", $user);
			}
			if ($start_date) {
				$this->datatables->where('rentals.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('rentals.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('rentals.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('rentals.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("rentals.created_by", $this->session->userdata('view_right'));
			}
				 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
	
	function salesman_product_commissions()
    {
        $this->cus->checkPermissions('saleman_commission_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
		$this->data['salesmans'] = $this->site->getSalemans();	
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['pos_settings'] = $this->reports_model->getPOSSetting();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('salesman_product_commissions')));
        $meta = array('page_title' => lang('salesman_product_commissions'), 'bc' => $bc);
        $this->core_page('reports/salesman_product_commissions', $meta, $this->data);
    }
	
    function getSalesmanProductCommission($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('saleman_commission_report', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $salesman = $this->input->get('salesman') ? $this->input->get('salesman') : NULL;
		$sale_id = $this->input->get('sale_id') ? $this->input->get('sale_id') : NULL;
        if ($start_date) {
			$start_date = $this->cus->fld($start_date);
		}
		if ($end_date) {
			$end_date = $this->cus->fld($end_date,false,1);
		}
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($xls) {
				
			$this->db
                ->select("
							CONCAT(".$this->db->dbprefix('users').".last_name, ' ', ".$this->db->dbprefix('users').".first_name ) AS salesman,
							sales.reference_no,
							sale_items.product_code,
							sale_items.product_name,
							sale_items.unit_price,
							sale_items.unit_quantity,
							sale_items.salesman_commission,
							sale_items.subtotal,
							sale_items.quantity
						"
						)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'inner')
				->join('users', 'users.id = sale_items.salesman_id', 'left');
			$this->db->where('sale_items.salesman_commission !=', '');
			$this->db->where('sale_items.salesman_commission !=', 0);
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($salesman) {
                $this->db->like('sale_items.salesman_id', $salesman);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
			if ($start_date) {
				$this->db->where('sales.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('sales.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			$q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('salesman_product_commissions'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('salesman'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('unit_price'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('rate'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('commission'));
                $row = 2;
                $gtotal = 0;
                $gcommission = 0;

                foreach ($data as $data_row) {	
					
					$dpos = strpos($data_row->salesman_commission, '%');
					$commission_amount = 0;
					if ($dpos !== false) {
						$pds = explode("%", $data_row->salesman_commission);
						$a = $data_row->subtotal * $this->cus->formatDecimalRaw($pds[0]);
						if($a > 0){
							$commission_amount = $a / 100;
						}
					} else {
						$commission_amount = $data_row->salesman_commission * $data_row->quantity;
					}
					
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->salesman);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product_code);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->unit_price);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($data_row->unit_quantity));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->salesman_commission);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->subtotal));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($commission_amount));
					$gtotal += $data_row->subtotal;
					$gcommission += $commission_amount;

                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("H" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($gtotal));
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($gcommission));


                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);

             
				$filename = 'salesman_product_commissions_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
							CONCAT(".$this->db->dbprefix('users').".last_name, ' ', ".$this->db->dbprefix('users').".first_name ) AS salesman,
							sales.reference_no,
							sale_items.product_code,
							sale_items.product_name,
							sale_items.unit_price,
							sale_items.unit_quantity,
							sale_items.salesman_commission,
							sale_items.subtotal,
							CONCAT(".$this->db->dbprefix('sale_items').".salesman_commission,'_',".$this->db->dbprefix('sale_items').".quantity,'_',".$this->db->dbprefix('sale_items').".subtotal) as commission"
						)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'inner')
				->join('users', 'users.id = sale_items.salesman_id', 'left');
			$this->datatables->where('sale_items.salesman_commission !=', '');
			$this->datatables->where('sale_items.salesman_commission !=', 0);
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('sale_items.product_id', $product);
            }
            if ($salesman) {
                $this->datatables->like('sale_items.salesman_id', $salesman);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
			if ($start_date) {
				$this->datatables->where('sales.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('sales.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}

            echo $this->datatables->generate();

        }

    }

    public function rental_dayend_close()
    {
        $this->cus->checkPermissions('payments');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['rooms'] = $this->reports_model->getAllRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('rental_payments_report')));
        $meta = array('page_title' => lang('rental_payments_report'), 'bc' => $bc);
        $this->core_page('reports/rental_dayend_close', $meta, $this->data);
    }
    
    function getRentalDayEndClose($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('payments', TRUE);

        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $room = $this->input->get('room') ? $this->input->get('room') : NULL;
        $floor = $this->input->get('floor') ? $this->input->get('floor') : NULL;
        $sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $rental_ref = $this->input->get('rental_ref') ? $this->input->get('rental_ref') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
				".$this->db->dbprefix('payments').".reference_no as payment_ref, 
				".$this->db->dbprefix('sales').".reference_no as sale_ref, 
				".$this->db->dbprefix('rentals').".reference_no as rental_ref,
				".$this->db->dbprefix('rental_rooms').".name as room_name, 
                ".$this->db->dbprefix('rentals').".from_date,
                ".$this->db->dbprefix('rentals').".to_date, 
                ".$this->db->dbprefix('rentals').".customer as cust_name,
				CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				abs(IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) + IFNULL(cus_payments.penalty_paid,0)) as amount, 
				payments.type, 
				{$this->db->dbprefix('payments')}.id as id,
				{$this->db->dbprefix('payments')}.sale_id as sale_id,
				{$this->db->dbprefix('payments')}.transaction")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('rentals','rentals.id=rental_id','inner')
                ->join('rental_rooms','rental_rooms.id=room_id','left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->group_by('payments.id');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($room) {
                $this->db->where('rentals.room_id', $room);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($rental_ref) {
                $this->db->like('rentals.reference_no', $rental_ref);
            }
			if ($start_date) {
				$this->db->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(sales.warehouse_id IN '.$warehouse_ids.')');
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('rental_payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('rental_reference'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('room'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('from_date'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('to_date'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('paid_by'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('type'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->rental_ref);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->room_name);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->cust_name);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, lang($data_row->paid_by));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->type);
                    $total += $data_row->amount;
                    $row++;
                }
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
               
				$filename = 'rental_payments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
				".$this->db->dbprefix('payments').".reference_no as payment_ref, 
				".$this->db->dbprefix('sales').".reference_no as sale_ref, 
				".$this->db->dbprefix('rentals').".reference_no as rental_ref,
				".$this->db->dbprefix('rental_rooms').".name as room_name, 
                ".$this->db->dbprefix('rentals').".from_date,
                ".$this->db->dbprefix('rentals').".to_date, 
                ".$this->db->dbprefix('rentals').".customer as cust_name,
				CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				abs(IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) + IFNULL(cus_payments.penalty_paid,0)) as amount, 
				payments.type, 
				{$this->db->dbprefix('payments')}.id as id,
				{$this->db->dbprefix('payments')}.sale_id as sale_id,
				{$this->db->dbprefix('payments')}.transaction")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('rentals','rentals.id=rental_id','inner')
                ->join('rental_rooms','rental_rooms.id=room_id','left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($room) {
                $this->datatables->where('rentals.room_id', $room);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($rental_ref) {
                $this->datatables->like('rentals.reference_no', $rental_ref);
            }
			if ($start_date) {
				$this->datatables->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->datatables->where('(sales.warehouse_id IN '.$warehouse_ids.')');
			}
            echo $this->datatables->generate();
        }
    }

    public function rental_payments()
    {
        $this->cus->checkPermissions('payments');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['rooms'] = $this->reports_model->getAllRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('rental_payments_report')));
        $meta = array('page_title' => lang('rental_payments_report'), 'bc' => $bc);
        $this->core_page('reports/rental_payments', $meta, $this->data);
    }

    function getRentalPayments($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('payments', TRUE);

        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $room = $this->input->get('room') ? $this->input->get('room') : NULL;
        $floor = $this->input->get('floor') ? $this->input->get('floor') : NULL;
        $sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $rental_ref = $this->input->get('rental_ref') ? $this->input->get('rental_ref') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
				".$this->db->dbprefix('payments').".reference_no as payment_ref, 
				".$this->db->dbprefix('sales').".reference_no as sale_ref, 
				".$this->db->dbprefix('rentals').".reference_no as rental_ref,
				".$this->db->dbprefix('rental_rooms').".name as room_name, 
                ".$this->db->dbprefix('rentals').".from_date,
                ".$this->db->dbprefix('rentals').".to_date, 
                ".$this->db->dbprefix('rentals').".customer as cust_name,
				CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				abs(IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) + IFNULL(cus_payments.penalty_paid,0)) as amount, 
				payments.type, 
				{$this->db->dbprefix('payments')}.id as id,
				{$this->db->dbprefix('payments')}.sale_id as sale_id,
				{$this->db->dbprefix('payments')}.transaction")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('rentals','rentals.id=rental_id','inner')
                ->join('rental_rooms','rental_rooms.id=room_id','left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->group_by('payments.id');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($room) {
                $this->db->where('rentals.room_id', $room);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($rental_ref) {
                $this->db->like('rentals.reference_no', $rental_ref);
            }
			if ($start_date) {
				$this->db->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(sales.warehouse_id IN '.$warehouse_ids.')');
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('rental_payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('rental_reference'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('room'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('from_date'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('to_date'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('paid_by'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('type'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->rental_ref);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->room_name);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->cust_name);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, lang($data_row->paid_by));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->type);
                    $total += $data_row->amount;
                    $row++;
                }
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
               
				$filename = 'rental_payments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
				".$this->db->dbprefix('payments').".reference_no as payment_ref, 
				".$this->db->dbprefix('sales').".reference_no as sale_ref, 
				".$this->db->dbprefix('rentals').".reference_no as rental_ref,
				".$this->db->dbprefix('rental_rooms').".name as room_name, 
                ".$this->db->dbprefix('rentals').".from_date,
                ".$this->db->dbprefix('rentals').".to_date, 
                ".$this->db->dbprefix('rentals').".customer as cust_name,
				CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				abs(IFNULL(cus_payments.amount,0) + IFNULL(cus_payments.interest_paid,0) + IFNULL(cus_payments.penalty_paid,0)) as amount, 
				payments.type, 
				{$this->db->dbprefix('payments')}.id as id,
				{$this->db->dbprefix('payments')}.sale_id as sale_id,
				{$this->db->dbprefix('payments')}.transaction")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('rentals','rentals.id=rental_id','inner')
                ->join('rental_rooms','rental_rooms.id=room_id','left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
			if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($room) {
                $this->datatables->where('rentals.room_id', $room);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($rental_ref) {
                $this->datatables->like('rentals.reference_no', $rental_ref);
            }
			if ($start_date) {
				$this->datatables->where('payments.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('payments.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->datatables->where('(sales.warehouse_id IN '.$warehouse_ids.')');
			}
            echo $this->datatables->generate();
        }
    }

    public function rental_deposits()
    {
        $this->cus->checkPermissions('payments');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['rooms'] = $this->reports_model->getAllRooms();
		$this->data['floors'] = $this->reports_model->getRoomFloors();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('rental_deposits_report')));
        $meta = array('page_title' => lang('rental_deposits_report'), 'bc' => $bc);
        $this->core_page('reports/rental_deposits', $meta, $this->data);
    }

    function getRentalDeposits($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('payments', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $room = $this->input->get('room') ? $this->input->get('room') : NULL;
        $floor = $this->input->get('floor') ? $this->input->get('floor') : NULL;
        $rental_ref = $this->input->get('rental_ref') ? $this->input->get('rental_ref') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller = $this->session->userdata('biller_id');
		}
		
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                    ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    ".$this->db->dbprefix('payments').".reference_no as payment_ref,
                    ".$this->db->dbprefix('rentals').".reference_no as rental_ref,
                    ".$this->db->dbprefix('rental_rooms').".name as room_name, 
                    ".$this->db->dbprefix('rentals').".customer as cust_name,
                    ".$this->db->dbprefix('companies').".phone,
                    ".$this->db->dbprefix('rentals').".checked_in, 
                    CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
                    paid_by, 
                    IF(cus_payments.type='sent',-(cus_payments.amount), (cus_payments.amount)) as amount, 
                    payments.type, 
                    {$this->db->dbprefix('payments')}.id as id,
                    {$this->db->dbprefix('payments')}.sale_id as sale_id,
                    {$this->db->dbprefix('payments')}.transaction")
                    ->from('payments')
                    ->join('rentals','cus_rentals.id=transaction_id AND transaction="RentalDeposit" OR cus_rentals.id=transaction_id AND transaction="ReturnRentalDeposit"','inner')
                    ->join('companies','companies.id=rentals.customer_id','left')
                    ->join('rental_rooms','rental_rooms.id=room_id','left')
                    ->join('users', 'users.id=payments.created_by', 'left')
                ->group_by('payments.id');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($customer) {
                $this->db->where('rentals.customer_id', $customer);
            }
            if ($biller) {
                $this->db->where('rentals.biller_id', $biller);
            }
            if ($room) {
                $this->db->where('rentals.room_id', $room);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($rental_ref) {
                $this->db->like('rentals.reference_no', $rental_ref);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(rentals.warehouse_id IN '.$warehouse_ids.')');
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('rental_deposits_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('rental_reference'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('room'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('checked_in_date'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('paid_by'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('type'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->rental_ref);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->room_name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->cust_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->hrsd($data_row->checked_in));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->paid_by));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->type));
                    $total += $data_row->amount;
                    $row++;
                }
				$this->excel->getActiveSheet()->SetCellValue('J' . $row, $total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
               
				$filename = 'rental_deposits_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
				".$this->db->dbprefix('payments').".reference_no as payment_ref,
				".$this->db->dbprefix('rentals').".reference_no as rental_ref,
                ".$this->db->dbprefix('rental_rooms').".name as room_name, 
                ".$this->db->dbprefix('rentals').".customer as cust_name,
                ".$this->db->dbprefix('companies').".phone,
                ".$this->db->dbprefix('rentals').".checked_in, 
				CONCAT({$this->db->dbprefix('users')}.last_name,' ',{$this->db->dbprefix('users')}.first_name) as created_by, 
				IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
				IF(cus_payments.type='sent',-(cus_payments.amount), (cus_payments.amount)) as amount,
				payments.type, 
				{$this->db->dbprefix('payments')}.id as id,
				{$this->db->dbprefix('payments')}.sale_id as sale_id,
				{$this->db->dbprefix('payments')}.transaction")
                ->from('payments')
                ->join('rentals','cus_rentals.id=transaction_id AND transaction="RentalDeposit" OR cus_rentals.id=transaction_id AND transaction="ReturnRentalDeposit"','inner')
                ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join('companies','companies.id=rentals.customer_id','left')
                ->join('rental_rooms','rental_rooms.id=rentals.room_id','left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($customer) {
                $this->datatables->where('rentals.customer_id', $customer);
            }
            if ($biller) {
                $this->datatables->where('rentals.biller_id', $biller);
            }
            if ($room) {
                $this->datatables->where('rentals.room_id', $room);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($rental_ref) {
                $this->datatables->like('rentals.reference_no', $rental_ref);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->datatables->where('(rentals.warehouse_id IN '.$warehouse_ids.')');
			}
            echo $this->datatables->generate();
        }
    }

    public function repair_items()
    {
        $this->cus->checkPermissions('repairs');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['technicians'] = $this->reports_model->getAllTechnicians();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['brands'] = $this->reports_model->getAllBrands();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('repair_items_report')));
        $meta = array('page_title' => lang('repair_items_report'), 'bc' => $bc);
        $this->core_page('reports/repair_items', $meta, $this->data);
    }

    public function getRepairItemsReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('repairs');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $model = $this->input->get('model') ? $this->input->get('model') : NULL;
		$technician = $this->input->get('technician') ? $this->input->get('technician') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {

            $this->db
                ->select("
                date, 
                reference_no, 
                customer, 
                repairs.phone, 
                brands.name as brand, 
                models.name as model, 
                imei_number,
                repair_items.product_name as problem,
                repair_items.warranty,
                repair_items.unit_price,
                repair_items.comment,
                staff_note,
                receive_date,
                concat(cus_users.first_name,' ',cus_users.last_name) as technician,
                repair_items.problem_status,
                DATEDIFF(sysdate(),receive_date) as days")
            ->from('repairs')
            ->join('repair_items','repairs.id=repair_items.repair_id','right')
            ->join('users','users.id=repair_items.technician_id','left')
            ->join('brands','brands.id=repairs.brand_id','left')
            ->join('models','models.id=repairs.model_id','left')
            ->where("repairs.status !=", "sent");
		
			if($reference_no){
				$this->db->like("repairs.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("repairs.biller_id", $biller);
            }
            if($warehouse){
				$this->db->where("repairs.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->where("repairs.customer_id", $customer);
			}
			if($technician){
				$this->db->where("repair_items.technician_id", $technician);
            }
            if($brand){
				$this->db->where("repairs.brand_id", $brand);
            }
            if($model){
				$this->db->where("repairs.model_id", $model);
			}
			if ($start_date) {
				$this->db->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('repair_items_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('brand'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('model'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('imei_number'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('problem'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('warranty'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('price'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('comment'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('staff_note'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('receive_date'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('technician'));
                $this->excel->getActiveSheet()->SetCellValue('P1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->brand);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->model);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->imei_number);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->problem);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->warranty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->unit_price);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->comment);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->staff_note);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->hrld($data_row->receive_date));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, ($data_row->technician));
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $filename = 'repair_items_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                    ->select(" 
                    date, 
                    reference_no, 
                    customer, 
                    repairs.phone, 
                    brands.name as brand, 
                    models.name as model, 
                    imei_number,
                    repair_items.product_name as problem,
                    repair_items.warranty,
                    repair_items.unit_price,
                    repair_items.comment,
                    staff_note,
                    receive_date,
                    concat(cus_users.first_name,' ',cus_users.last_name) as technician,
                    repair_items.problem_status,
                    DATEDIFF(sysdate(),receive_date) as days")
                ->from('repairs')
                ->join('repair_items','repairs.id=repair_items.repair_id','right')
                ->join('users','users.id=repair_items.technician_id','left')
                ->join('brands','brands.id=repairs.brand_id','left')
                ->join('models','models.id=repairs.model_id','left')
                ->where("repairs.status !=", "sent");
		
			if($reference_no){
				$this->datatables->like("repairs.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("repairs.biller_id", $biller);
			}
			if($warehouse){
				$this->datatables->where("repairs.warehouse_id", $warehouse);
            }
            if($customer){
				$this->datatables->where("repairs.customer_id", $customer);
            }
            if($technician){
				$this->datatables->where("repair_items.technician_id", $technician);
            }
            if($brand){
				$this->datatables->where("repairs.brand_id", $brand);
            }
            if($model){
				$this->datatables->where("repairs.model_id", $model);
            }
			if ($start_date) {
				$this->datatables->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('repairs.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('repairs.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("repairs.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }

    public function repairs()
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['brands'] = $this->reports_model->getAllBrands();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('repairs_report')));
        $meta = array('page_title' => lang('repairs_report'), 'bc' => $bc);
        $this->core_page('reports/repairs', $meta, $this->data);
    }

    public function getRepairsReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('repairs');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $model = $this->input->get('model') ? $this->input->get('model') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {

            $this->db
                    ->select(" 
                    date, 
                    reference_no, 
                    customer, 
                    repairs.phone, 
                    brands.name as brand, 
                    models.name as model, 
                    imei_number,
                    receive_date,
                    grand_total,
                    repairs.status")
                ->from('repairs')
                ->join('brands','brands.id=repairs.brand_id','left')
                ->join('models','models.id=repairs.model_id','left');
		
			if($reference_no){
				$this->db->like("repairs.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("repairs.biller_id", $biller);
            }
            if($warehouse){
				$this->db->where("repairs.warehouse_id", $warehouse);
			}
			if($customer){
				$this->db->where("repairs.customer_id", $customer);
			}
			if($user){
				$this->db->where("repairs.created_by", $user);
            }
            if($brand){
				$this->db->where("repairs.brand_id", $brand);
            }
            if($model){
				$this->db->where("repairs.model_id", $model);
			}
			if ($start_date) {
				$this->db->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('repairs_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('brand'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('model'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('imei_number'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('receive_date'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->brand);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->model);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->imei_number);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->hrld($data_row->receive_date));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatMoney($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $filename = 'repairs_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                    ->select(" 
                    date, 
                    reference_no, 
                    customer, 
                    repairs.phone, 
                    brands.name as brand, 
                    models.name as model, 
                    imei_number,
                    receive_date,
                    grand_total,
                    repairs.status,
                    repairs.attachment")
                ->from('repairs')
                ->join('brands','brands.id=repairs.brand_id','left')
                ->join('models','models.id=repairs.model_id','left');
		
			if($reference_no){
				$this->datatables->like("repairs.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("repairs.biller_id", $biller);
			}
			if($warehouse){
				$this->datatables->where("repairs.warehouse_id", $warehouse);
            }
            if($customer){
				$this->datatables->where("repairs.customer_id", $customer);
            }
            if($user){
				$this->datatables->where("repairs.created_by", $user);
            }
            if($brand){
				$this->datatables->where("repairs.brand_id", $brand);
            }
            if($model){
				$this->datatables->where("repairs.model_id", $model);
            }
			if ($start_date) {
				$this->datatables->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('repairs.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('repairs.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("repairs.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }

    public function agency_commission()
    {
        $this->cus->checkPermissions();
        $this->load->library('pagination');
        $post = ($this->input->post()) ? $this->input->post() : $this->input->get();
		$page = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
		$config = array();
        $config["base_url"] = base_url() . "sales/agency_commission";
        $config["total_rows"] = $this->reports_model->getSaleAgencyCommissionsRecordCounts();
        $config["per_page"] = isset($post['pagination']) && $post['pagination'] == 1?0:30;
		$config["uri_segment"] = 3;
		$config['full_tag_open'] = '<ul class="pagination">';
        $config['full_tag_close'] = '</ul>';
        $config['first_link'] = 'First';
        $config['last_link'] = 'Last';
        $config['first_tag_open'] = '<li>';
        $config['first_tag_close'] = '</li>';
        $config['prev_link'] = '&laquo';
        $config['prev_tag_open'] = '<li class="prev">';
        $config['prev_tag_close'] = '</li>';
        $config['next_link'] = '&raquo';
        $config['next_tag_open'] = '<li>';
        $config['next_tag_close'] = '</li>';
        $config['last_tag_open'] = '<li>';
        $config['last_tag_close'] = '</li>';
        $config['cur_tag_open'] = '<li class="active"><a href="#">';
        $config['cur_tag_close'] = '</a></li>';
        $config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		$this->pagination->initialize($config);
		$this->data['sales'] = $this->reports_model->getAllSaleAgencyCommissions($config["per_page"], $page);
		$this->data['links'] = $this->pagination->create_links();
        $this->data['billers'] = $this->site->getBillers();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users'] = $this->site->getAllUsers();
        $this->data['agencies'] = $this->reports_model->getAllAgencies();
        $data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('agency_commission_report')));
        $meta = array('page_title' => lang('agency_commission_report'), 'bc' => $bc);
		$this->core_page('reports/agency_commission', $meta, $this->data);
    }
    
    public function agency_commission_export($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('agency_commission');
        if ($xls) {
            $sales = $this->reports_model->getAllSaleAgencyCommissions();
            if (!empty($sales)) {
				$this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('agency_commission_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('rate'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('unit_price'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('deposit'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('invoice_paid'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('commission_invoice'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('commission_amount'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('commission_paid'));
                $this->excel->getActiveSheet()->SetCellValue('P1', lang('commission_balance'));
                $this->excel->getActiveSheet()->SetCellValue('Q1', lang('withdrawn'));
                $this->excel->getActiveSheet()->SetCellValue('R1', lang('withdrawn_percent'));
                $this->excel->getActiveSheet()->SetCellValue('S1', lang('withdraw_remain'));
                $this->excel->getActiveSheet()->SetCellValue('T1', lang('status'));
				$row = 2;
                foreach ($sales as $sale){
                    $agencies = json_decode($sale->agency_id);
                    $agency_commission = json_decode($sale->agency_commission);
                    $agency_limit_percent = json_decode($sale->agency_limit_percent);
                    $agency_value_commission =  json_decode($sale->agency_value_commission);

                    if(isset($_GET['agency']) && !empty($_GET['agency'])){
                        $agencies = array_filter($agencies, function($v){
                            return $v == $_GET['agency'];
                        });
                    }
                    if($agencies){
                        foreach($agencies as $i=> $agency){
                            // Get agency
                            $agency_details = $this->reports_model->getAgencyByID($agency);
                            $agency_name = $agency_details->first_name.' '.$agency_details->last_name;
                            $agency_rate = $agency_commission[$i]?$agency_commission[$i]:'';
                            $amount = $agency_value_commission[$i] == 1? $sale->grand_total : $sale->real_unit_price;
                            $commission_invoice = ($agency_rate * $amount) / 100;
                            // Last commission
                            $last_commission = 0;
                            $lpaid_percentage = ($sale->last_paid * 100) / $amount;
                            if($lpaid_percentage > $agency_limit_percent[$i]){
                                $last_commission = $commission_invoice;
                            }else{
                                $last_commission = ($sale->last_paid / (($agency_limit_percent[$i] * $amount)/100)) * $commission_invoice;
                            }
                            // Commission paid
                            $paid_percentage = ($sale->paid * 100) / $amount;
                            $commission_amount = 0;
                            if($paid_percentage > $agency_limit_percent[$i]){
                                $commission_amount = $commission_invoice;
                            }else{
                                $commission_amount = ($sale->paid / (($agency_limit_percent[$i] * $amount)/100)) * $commission_invoice;
                            }
                            $total_commission = $commission_amount + $last_commission;
                            if($total_commission > $commission_invoice){
                                $commission_amount = $commission_invoice - $last_commission;
                            }
                            // Commission withdrawn
                            $payments = $this->reports_model->getSaleAgencyPayments($sale->id, $agency_details->id);
                            $commission_withdrawn = 0;
                            if($payments){
                                foreach($payments as $payment){
                                    $commission_withdrawn += $payment->amount;
                                }
                            }
                            // Commission paid
                            $ppayments = $this->reports_model->getSaleAgencyPayments($sale->id, $agency_details->id, true);
                            $commission_paid = 0;
                            if($ppayments){
                                foreach($ppayments as $ppayment){
                                    $commission_paid += $ppayment->amount;
                                }
                            }
                            $commission_balance = $commission_amount - $commission_paid;
                            $commission_withdraw_remain = $this->cus->formatDecimal($commission_invoice - $commission_withdrawn);
                            $commission_withdrawn_percent = ($commission_withdrawn * 100) / $commission_invoice;
                            if($commission_withdrawn<=0){
                                $status = lang('pending');
                            }else if($commission_withdraw_remain<=0){
                                $status = lang('paid');
                            }else{
                                $status = lang('partial');
                            }
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($sale->date));
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sale->product_name);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sale->biller);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sale->customer);
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $agency_name);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $agency_rate.'%');
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatMoney($sale->unit_price));
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatMoney($sale->order_discount));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatMoney($sale->grand_total));
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatMoney($sale->deposit));
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatMoney($sale->paid));
                            $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->cus->formatMoney($sale->invoice_paid));
                            $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->cus->formatMoney($commission_invoice));
                            $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->cus->formatMoney($commission_amount));
                            $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->cus->formatMoney($commission_paid));
                            $this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->cus->formatMoney($commission_balance));
                            $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->cus->formatMoney($commission_withdrawn));
                            $this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->cus->formatMoney($commission_withdrawn_percent));
                            $this->excel->getActiveSheet()->SetCellValue('S' . $row, $this->cus->formatMoney($commission_withdraw_remain));
                            $this->excel->getActiveSheet()->SetCellValue('T' . $row, $status);
                            $row++;
                        }
                    }
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(18);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('T')->setWidth(15);

                $filename = 'agency_commission_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }
	
	
	
	public function products_free_report ()
	{
		$this->cus->checkPermissions();
		$this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('products_free_report')));
        $meta = array('page_title' => lang('products_free_report'), 'bc' => $bc);
        $this->core_page('reports/products_free_report', $meta, $this->data);
	}
	
	public function getProductsFreeReport ($pdf = null , $xls = null)
	{
		$this->cus->checkPermissions('products_free_report', TRUE);	
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
		if ($xls) {
			$this->db->select("
								sales.date,
								sales.reference_no,
								warehouses.name as warehouse,
								sales.customer,
								CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
								products.name as product_name,
								convert_qty(".$this->db->dbprefix('products').".id,".$this->db->dbprefix('sale_items').".quantity) as qty,
								sales.id", FALSE)
						->from('sales')
						->join('sale_items','sale_items.sale_id = sales.id','INNER')
						->join('warehouses','warehouses.id = sales.warehouse_id','LEFT')
						->join('products','products.id = sale_items.product_id','LEFT')
						->join('users','users.id = sales.created_by','LEFT')
						->where("IFNULL(".$this->db->dbprefix('sale_items').".unit_price,0)",0)
						->group_by('sale_items.id');

			if ($user) {
				$this->db->where('sales.created_by', $user);
			}
			if ($product) {
				$this->db->where('sale_items.product_id', $product);
			}			
			if ($warehouse) {
				$this->db->where('sales.warehouse_id', $warehouse);
			}
			if ($customer) {
				$this->db->where('sales.customer_id', $customer);
			}
			if ($biller) {
				$this->db->where('sales.biller_id', $biller);
			}
			if ($project) {
				$this->db->where('sales.project_id', $project);
			}
			if ($start_date) {
				$this->db->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
	
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			

			if (!empty($data)) {

				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('products_free_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('product'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));
				$row = 2;
				$grand_cost = 0;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->warehouse);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->remove_tag($data_row->qty));
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);

				$filename = 'products_free_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables
							->select("
									sales.date,
									sales.reference_no,
									warehouses.name as warehouse,
									sales.customer,
									CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
									products.name as product_name,
									convert_qty(".$this->db->dbprefix('products').".id,".$this->db->dbprefix('sale_items').".quantity) as qty,
									sales.id", FALSE)
							->from('sales')
							->join('sale_items','sale_items.sale_id = sales.id','INNER')
							->join('warehouses','warehouses.id = sales.warehouse_id','LEFT')
							->join('products','products.id = sale_items.product_id','LEFT')
							->join('users','users.id = sales.created_by','LEFT')
							->where("IFNULL(".$this->db->dbprefix('sale_items').".unit_price,0)",0)
							->group_by('sale_items.id');

			if ($user) {
				$this->datatables->where('sales.created_by', $user);
			}
			if ($product) {
				$this->datatables->where('sale_items.product_id', $product);
			}			
			if ($warehouse) {
				$this->datatables->where('sales.warehouse_id', $warehouse);
			}
			if ($customer) {
				$this->datatables->where('sales.customer_id', $customer);
			}
			if ($biller) {
				$this->datatables->where('sales.biller_id', $biller);
			}
			if ($project) {
				$this->datatables->where('sales.project_id', $project);
			}
			if ($start_date) {
				$this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function fuel_customers_report()
	{
		$this->cus->checkPermissions();
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_customers_report')));
        $meta = array('page_title' => lang('fuel_customers_report'), 'bc' => $bc);
        $this->core_page('reports/fuel_customers_report', $meta, $this->data);
	}
	
	public function getFuelCustomersReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('fuel_customers_report');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {
			$this->db->select("
							fuel_customers.date,
							fuel_customers.reference,
							companies.company as customer,
							CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
							creators.created_by,
							IFNULL(cus_fuel_customer_items.quantity,0) as quantity,
							IFNULL(".$this->db->dbprefix("fuel_customers").".grand_total,0) as grand_total,
							fuel_customers.attachment,
							IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (cus_fuel_customer_items.fuel_sale_id > 0,'cleared','pending')) AS status,
							fuel_customers.id as id
						")
            ->from("fuel_customers")
			->join("(SELECT 
							fuel_customer_id,
							SUM(quantity) as quantity,
							SUM(fuel_sale_id) as fuel_sale_id
						FROM ".$this->db->dbprefix("fuel_customer_items")."
						GROUP BY fuel_customer_id) as cus_fuel_customer_items","cus_fuel_customer_items.fuel_customer_id=fuel_customers.id","left")
			->join("users", "users.id=fuel_customers.saleman_id", "left")
			->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
			->join("companies", "companies.id=fuel_customers.customer_id", "left");
			
			if($customer){
				$this->db->like("fuel_customers.customer_id", $customer);
			}
			if($reference_no){
				$this->db->like("fuel_customers.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("fuel_customers.biller_id", $biller);
            }
			if($saleman){
				$this->db->where("fuel_customers.saleman_id", $saleman);
			}
			if($user){
				$this->db->where("fuel_customers.created_by", $user);
			}
			if($warehouse){
				$this->db->where("fuel_customers.warehouse_id", $warehouse);
			}
			if ($start_date) {
				$this->db->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("fuel_customers.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('salesman'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->salesman);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatQuantity($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);

                $filename = 'fuel_customers_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
							fuel_customers.date,
							fuel_customers.reference,
							companies.company as customer,
							CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
							creators.created_by,
							IFNULL(cus_fuel_customer_items.quantity,0) as quantity,
							IFNULL(".$this->db->dbprefix("fuel_customers").".grand_total,0) as grand_total,
							fuel_customers.attachment,
							IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (cus_fuel_customer_items.fuel_sale_id > 0,'cleared','pending')) AS status,
							fuel_customers.id as id
						")
            ->from("fuel_customers")
			->join("(SELECT 
							fuel_customer_id,
							SUM(quantity) as quantity,
							SUM(fuel_sale_id) as fuel_sale_id
						FROM ".$this->db->dbprefix("fuel_customer_items")."
						GROUP BY fuel_customer_id) as cus_fuel_customer_items","cus_fuel_customer_items.fuel_customer_id=fuel_customers.id","left")
			->join("users", "users.id=fuel_customers.saleman_id", "left")
			->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
			->join("companies", "companies.id=fuel_customers.customer_id", "left");
			
			if($customer){
				$this->datatables->like("fuel_customers.customer_id", $customer);
			}
			if($reference_no){
				$this->datatables->like("fuel_customers.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("fuel_customers.biller_id", $biller);
            }
			if($saleman){
				$this->datatables->where("fuel_customers.saleman_id", $saleman);
			}
			if($user){
				$this->datatables->where("fuel_customers.created_by", $user);
			}
			if($warehouse){
				$this->datatables->where("fuel_customers.warehouse_id", $warehouse);
			}
			if ($start_date) {
				$this->datatables->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("fuel_customers.created_by", $this->session->userdata('view_right'));
			}
            echo $this->datatables->generate();
        }
    }
	
	public function fuel_customer_details_report()
	{
		$this->cus->checkPermissions("fuel_customers_report");
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_customer_details_report')));
        $meta = array('page_title' => lang('fuel_customer_details_report'), 'bc' => $bc);
        $this->core_page('reports/fuel_customer_details_report', $meta, $this->data);
	}
	
	public function getFuelCustomerDetailsReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('fuel_customers_report');
		$reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
		$saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
		$customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
		if ($start_date) {
            $start_date = $this->cus->fld($start_date);
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {
			$this->db->select("
							fuel_customers.date,
							fuel_customers.reference,
							companies.company as customer,
							CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
							creators.created_by,
							CONCAT(".$this->db->dbprefix("customer_trucks").".name,' - ',".$this->db->dbprefix("customer_trucks").".plate_number) as truck,
							products.name as product_name,
							IFNULL(".$this->db->dbprefix("fuel_customer_items").".quantity,0) as quantity,
							IFNULL(".$this->db->dbprefix("fuel_customer_items").".unit_price,0) as unit_price,
							IFNULL(".$this->db->dbprefix("fuel_customer_items").".subtotal,0) as subtotal,
							fuel_customers.status,
							IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (".$this->db->dbprefix('fuel_customer_items').".fuel_sale_id > 0,'cleared','pending')) AS status,
							fuel_customers.id as id
						")
            ->from("fuel_customer_items")
			->join("fuel_customers","fuel_customers.id = fuel_customer_items.fuel_customer_id","left")
			->join("customer_trucks","customer_trucks.id = fuel_customer_items.truck_id","left")
			->join("products","products.id = fuel_customer_items.product_id","left")
			->join("users", "users.id=fuel_customers.saleman_id", "left")
			->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
			->join("companies", "companies.id=fuel_customers.customer_id", "left")
			->group_by("fuel_customer_items.id");
			
			if($product){
				$this->db->where("fuel_customer_items.product_id", $product);
            }
			if($customer){
				$this->db->like("fuel_customers.customer_id", $customer);
			}
			if($reference_no){
				$this->db->like("fuel_customers.reference_no", $reference_no);
			}
			if($biller){
				$this->db->where("fuel_customers.biller_id", $biller);
            }
			if($saleman){
				$this->db->where("fuel_customers.saleman_id", $saleman);
			}
			if($user){
				$this->db->where("fuel_customers.created_by", $user);
			}
			if($warehouse){
				$this->db->where("fuel_customers.warehouse_id", $warehouse);
			}
			if ($start_date) {
				$this->db->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("fuel_customers.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_customer_details_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('salesman'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('truck'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('quantity'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('unit_price'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('amount'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('status'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->salesman);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->truck);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatQuantity($data_row->quantity));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->unit_price));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($data_row->subtotal));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $filename = 'fuel_customer_details_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables
                ->select("
							fuel_customers.date,
							fuel_customers.reference,
							companies.company as customer,
							CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
							creators.created_by,
							CONCAT(".$this->db->dbprefix("customer_trucks").".name,' - ',".$this->db->dbprefix("customer_trucks").".plate_number) as truck,
							products.name as product_name,
							IFNULL(".$this->db->dbprefix("fuel_customer_items").".quantity,0) as quantity,
							IFNULL(".$this->db->dbprefix("fuel_customer_items").".unit_price,0) as unit_price,
							IFNULL(".$this->db->dbprefix("fuel_customer_items").".subtotal,0) as subtotal,
							IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (".$this->db->dbprefix('fuel_customer_items').".fuel_sale_id > 0,'cleared','pending')) AS status,
							fuel_customers.id as id
						")
            ->from("fuel_customer_items")
			->join("fuel_customers","fuel_customers.id = fuel_customer_items.fuel_customer_id","left")
			->join("customer_trucks","customer_trucks.id = fuel_customer_items.truck_id","left")
			->join("products","products.id = fuel_customer_items.product_id","left")
			->join("users", "users.id=fuel_customers.saleman_id", "left")
			->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
			->join("companies", "companies.id=fuel_customers.customer_id", "left")
			->group_by("fuel_customer_items.id");
			
			if($product){
				$this->datatables->where("fuel_customer_items.product_id", $product);
            }
			if($customer){
				$this->datatables->like("fuel_customers.customer_id", $customer);
			}
			if($reference_no){
				$this->datatables->like("fuel_customers.reference_no", $reference_no);
			}
			if($biller){
				$this->datatables->where("fuel_customers.biller_id", $biller);
            }
			if($saleman){
				$this->datatables->where("fuel_customers.saleman_id", $saleman);
			}
			if($user){
				$this->datatables->where("fuel_customers.created_by", $user);
			}
			if($warehouse){
				$this->datatables->where("fuel_customers.warehouse_id", $warehouse);
			}
			if ($start_date) {
				$this->datatables->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("fuel_customers.created_by", $this->session->userdata('view_right'));
			}
            echo $this->datatables->generate();
        }
    }
	
	public function fuel_products()
	{
		$this->cus->checkPermissions('fuel_sales');
		$this->data['users'] = $this->reports_model->getStaff();
		$this->data['salemans'] = $this->site->getSalemans();
		$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_products_report')));
        $meta = array('page_title' => lang('fuel_products_report'), 'bc' => $bc);
        $this->core_page('reports/fuel_products', $meta, $this->data);
	}
	
	public function getFuelProductsReport($pdf = NULL, $xls = NULL)
    {
		$this->cus->checkPermissions('fuel_sales');
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $start_date = $this->input->get('start_date') ? $this->cus->fld($this->input->get('start_date')) : NULL;
        $end_date = $this->input->get('end_date') ? $this->cus->fld($this->input->get('end_date'),false,1) : NULL;
        if ($xls) {
			$this->db->select("
							products.code, 
							products.name, 
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as using_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0)) as customer_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as customer_amount,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0)) as fuel_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0)) as fuel_amount,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as total_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as total_amount
						")
					->from("fuel_sale_items")
					->join("fuel_sales","fuel_sales.id = fuel_sale_items.fuel_sale_id","inner")
					->join("products","products.id = fuel_sale_items.product_id","left")
					->group_by("fuel_sale_items.product_id");

			if($user){
				$this->db->where("fuel_sales.created_by", $user);
			}
			if($product){
				$this->db->where("fuel_sale_items.product_id", $product);
			}
			if($warehouse){
				$this->db->where("fuel_sales.warehouse_id", $warehouse);
			}
			if($start_date){
				$this->db->where("fuel_sales.date >=", $start_date);
			}
			if($end_date){
				$this->db->where("fuel_sales.date <=", $end_date);
			}
			if($biller){
				$this->db->where("fuel_sales.biller_id", $biller);
            }
			if($project){
				$this->db->where("fuel_sales.project_id", $project);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->db->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->db->where("fuel_sales.created_by", $this->session->userdata('view_right'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('using_qty'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer_qty'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('customer_amount'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('fuel_qty'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('fuel_amount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('total_qty'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('total_amount'));
				$row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->formatQuantity($data_row->using_qty));
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->formatQuantity($data_row->customer_qty));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->cus->formatDecimal($data_row->customer_amount));
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatQuantity($data_row->fuel_qty));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->formatDecimal($data_row->fuel_amount));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->total_qty));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->total_amount));

                    $row++;
                }
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
			
                $filename = 'fuel_products_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
            $this->datatables->select("
							products.code, 
							products.name, 
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as using_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0)) as customer_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as customer_amount,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0)) as fuel_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0)) as fuel_amount,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as total_qty,
							SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as total_amount
						")
					->from("fuel_sale_items")
					->join("fuel_sales","fuel_sales.id = fuel_sale_items.fuel_sale_id","inner")
					->join("products","products.id = fuel_sale_items.product_id","left")
					->group_by("fuel_sale_items.product_id");

			if($user){
				$this->datatables->where("fuel_sales.created_by", $user);
			}
			if($product){
				$this->datatables->where("fuel_sale_items.product_id", $product);
			}
			if($warehouse){
				$this->datatables->where("fuel_sales.warehouse_id", $warehouse);
			}
			if($start_date){
				$this->datatables->where("fuel_sales.date >=", $start_date);
			}
			if($end_date){
				$this->datatables->where("fuel_sales.date <=", $end_date);
			}
			if($biller){
				$this->datatables->where("fuel_sales.biller_id", $biller);
            }
			if($project){
				$this->datatables->where("fuel_sales.project_id", $project);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$this->datatables->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
			}
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where("fuel_sales.created_by", $this->session->userdata('view_right'));
			}
            echo $this->datatables->generate();
        }
    }
	
	public function receive_items_report($id = null)
    {
        $this->cus->checkPermissions('receive_items_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
		$this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('receive_items_report')));
        $meta = array('page_title' => lang('receive_items_report'), 'bc' => $bc);
        $this->core_page('reports/receive_items_report', $meta, $this->data);
    }
	
	public function getReceiveItems($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('receive_items_report');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
		$supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
		$product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
		if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }
        if ($xls) {
            $this->db->select('
						receives.date,
						receives.re_reference_no,
						receives.pu_reference_no,
						receives.supplier,
						receive_items.product_code,
						receive_items.product_name,
						convert_qty('.$this->db->dbprefix("receive_items.product_id").','.$this->db->dbprefix("receive_items.quantity").') as quantity,
						receives.id as id
					', false)
            ->from('receive_items')
			->join('receives','receives.id = receive_items.receive_id','inner')
            ->group_by('receive_items.id');
			
			if ($biller) {
				$this->db->where('receives.biller_id',$biller);
            }
			if ($product) {
				$this->db->where('receive_items.product_id',$product);
            }
			if ($warehouse) {
				$this->db->where('receives.warehouse_id',$warehouse);
            }
			if ($supplier) {
				$this->db->where('receives.supplier_id',$supplier);
            }
			if ($reference_no) {
				$this->db->where('receives.re_reference_no',$reference_no);
            }
            if ($user) {
				$this->db->where('receives.created_by',$user);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('view_right')) {
				$this->db->where('receives.created_by',$this->session->userdata('view_right'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('receives.biller_id',$this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->db->where('(receives.warehouse_id IN '.$warehouse_ids.')');
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('receive_items_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('pu_reference'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('product_code'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('product_name'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));

                $row = 2; 
                foreach ($data as $data_row) {
					$user = $this->site->getUser($expense->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->re_reference_no);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->pu_reference_no);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->product_code);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->product_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->cus->remove_tag($data_row->quantity));
                    $row++;
                }
				
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				
       
				$filename = 'receive_items_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
            ->select('
						receives.date,
						receives.re_reference_no,
						receives.pu_reference_no,
						receives.supplier,
						receive_items.product_code,
						receive_items.product_name,
						convert_qty('.$this->db->dbprefix("receive_items.product_id").','.$this->db->dbprefix("receive_items.quantity").') as quantity,
						receives.id as id
					', false)
            ->from('receive_items')
			->join('receives','receives.id = receive_items.receive_id','inner')
            ->group_by('receive_items.id');
			
			if ($biller) {
				$this->datatables->where('receives.biller_id',$biller);
            }
			if ($product) {
				$this->datatables->where('receive_items.product_id',$product);
            }
			if ($warehouse) {
				$this->datatables->where('receives.warehouse_id',$warehouse);
            }
			if ($supplier) {
				$this->datatables->where('receives.supplier_id',$supplier);
            }
			if ($reference_no) {
				$this->datatables->where('receives.re_reference_no',$reference_no);
            }
            if ($user) {
				$this->datatables->where('receives.created_by',$user);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('view_right')) {
				$this->datatables->where('receives.created_by',$this->session->userdata('view_right'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('receives.biller_id',$this->session->userdata('biller_id'));
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
				$warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
				$warehouse_ids = str_replace(']',')',$warehouse_ids);
				$this->datatables->where('(receives.warehouse_id IN '.$warehouse_ids.')');
			}
            echo $this->datatables->generate();
        }
    }
	
	public function inventory_valuation_report()
	{
		$this->cus->checkPermissions();
        $this->data['warehouses'] = $this->site->getWarehouses();
		$this->data['products'] = $this->reports_model->getValuationProducts($this->input->post());
		$this->data['stockmoves'] = $this->reports_model->getArrayStockmoves($this->input->post());
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('inventory_valuation_report')));
        $meta = array('page_title' => lang('inventory_valuation_report'), 'bc' => $bc);
        $this->core_page('reports/inventory_valuation_report', $meta, $this->data);
	}
	public function inventory_valuation_report_action($pdf = null , $xls = null){
		$products = $this->reports_model->getValuationProducts($this->input->post());
		$stockmoves = $this->reports_model->getArrayStockmoves($this->input->post());
		if (!empty($products)) {
			$this->load->library('excel');
			$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->setTitle(lang('inventory_valuation_report'));
			$this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
			$this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
			$this->excel->getActiveSheet()->SetCellValue('C1', lang('date'));
			$this->excel->getActiveSheet()->SetCellValue('D1', lang('transaction'));
			$this->excel->getActiveSheet()->SetCellValue('E1', lang('reference'));
			$this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
			$this->excel->getActiveSheet()->SetCellValue('G1', lang('unit'));
			$this->excel->getActiveSheet()->SetCellValue('H1', lang('unit_cost'));
			$this->excel->getActiveSheet()->SetCellValue('I1', lang('QOH'));
			$this->excel->getActiveSheet()->SetCellValue('J1', lang('average_cost'));
			$this->excel->getActiveSheet()->SetCellValue('K1', lang('stock_value'));
			$row = 2;
			$product_value = 0;
			foreach($products as $product){
				$old_qty = 0;
				$old_cost = 0;
				$stock_value = 0;
				$total_qoh = 0;
				$total_cost = 0;

				$style = array('font'  => array('bold'  => true));
				$this->excel->getActiveSheet()->getStyle('A'.$row.':B'.$row.'')->applyFromArray($style);
				$this->excel->getActiveSheet()->SetCellValue('A' . $row, $product->code);
				$this->excel->getActiveSheet()->SetCellValue('B' . $row, $product->name);
				$row++;
				if(isset($stockmoves[$product->id])){
					foreach($stockmoves[$product->id] as $stockmove){
						if($stockmove->transaction=='CostAdjument' || $stockmove->transaction=='OpeningBalance' || $stockmove->transaction=='Pawns' || $stockmove->transaction=='Purchases' || $stockmove->transaction=='Receives' || ($stockmove->transaction=='QuantityAdjustment' && $stockmove->quantity > 0) || ($stockmove->transaction=='Convert' && $stockmove->quantity > 0)){	
							$new_cost = $stockmove->real_unit_cost;
							$new_qty = $stockmove->quantity;
							$total_qty = $new_qty + $old_qty;
							if($old_qty >= 0){
								$total_old_cost = $old_qty * $old_cost;
								$total_new_cost = $new_qty * $new_cost; 
								$old_cost = ($total_old_cost + $total_new_cost) / $total_qty;
							}else{
								if($total_qty > 0){
									$old_cost = $new_cost;
								}else{
									$old_cost = $product->cost;
								}
							}
						}else{
							$old_cost = $stockmove->real_unit_cost;
						}
						$old_qty += $stockmove->quantity;
						$qoh = $old_qty;
						$average_cost = $old_cost;
						$stock_value = $old_cost * $old_qty;
						$total_qoh = $qoh;
						$total_cost = $average_cost;

						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->cus->hrld($stockmove->date));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $stockmove->transaction);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $stockmove->reference_no);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->cus->formatDecimal($stockmove->quantity));
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $stockmove->unit_name);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($stockmove->real_unit_cost * ($stockmove->unit_quantity > 0 ? $stockmove->unit_quantity : 1)));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($qoh));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($average_cost));
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($stock_value));
						$row++;
					}
				}
				$this->excel->getActiveSheet()->getStyle('H'.$row.':K'.$row.'')->applyFromArray($style);
				$this->excel->getActiveSheet()->SetCellValue('H' . $row, $product->name);
				$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($total_qoh));
				$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->cus->formatDecimal($total_cost));
				$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($stock_value));
				$row++;
				$product_value += $stock_value;
			}
			$style = array('font'  => array('bold'  => true, 'color' => array('rgb' => 'FF0000')));
			$this->excel->getActiveSheet()->getStyle('K'.$row)->applyFromArray($style);
			$this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->cus->formatDecimal($product_value));
			$row++;
			
			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
			$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

			$filename = 'inventory_valuation_report_' . date('Y_m_d_H_i_s');
			$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			$this->load->helper('excel');
            create_excel($this->excel, $filename);
		}
		$this->session->set_flashdata('error', lang('nothing_found'));
		redirect($_SERVER["HTTP_REFERER"]);
	}

	function sale_payments_report()
    {
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['projects'] = $this->site->getAllProjects();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sale_payments_report')));
        $meta = array('page_title' => lang('sale_payments_report'), 'bc' => $bc);
        $this->core_page('reports/sale_payments_report', $meta, $this->data);
    }

    function getSalePaymentsReport($pdf = NULL, $xls = NULL)
    {
       
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $subproject = $this->input->get('subproject') ? $this->input->get('subproject') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
        $sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->cus->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->cus->fld($end_date,false,1);
        }

        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        if ($xls) {
            $this->db->select("
                        DATE_FORMAT(".$this->db->dbprefix('payments').".date, '%Y-%m-%d %T') as date, 
                        payments.reference_no as payment_ref, 
                        IFNULL(".$this->db->dbprefix("sales").".reference_no,".$this->db->dbprefix("sale_orders").".reference_no) as sale_ref, 
                        DATE_FORMAT(IFNULL(".$this->db->dbprefix("sales").".date,".$this->db->dbprefix("sale_orders").".date), '%Y-%m-%d %T') as sale_date, 
                        IFNULL(".$this->db->dbprefix("sales").".customer,".$this->db->dbprefix("sale_orders").".customer) as customer, 
                        CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
                        IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                        (IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) as amount,
                        (IFNULL(".$this->db->dbprefix('payments').".discount,0)) as discount, 
                        payments.attachment,
                        IF(".$this->db->dbprefix('payments').".sale_order_id > 0,'deposited',".$this->db->dbprefix('payments').".type) as type,
                        payments.id as id
                    ")
                    ->from('payments')
                    ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                    ->join('sales', 'payments.sale_id=sales.id', 'left')
                    ->join('sale_items', 'sale_items.id=sales.sale_id', 'left')
                    ->join('products', 'products.id=sale_items.product_id', 'left')
                    ->join('sale_orders', 'payments.sale_order_id=sale_orders.id', 'left')
                    ->join('users', 'users.id=payments.created_by', 'left')
                    ->where('(payments.sale_id > 0 OR payments.sale_order_id > 0)')
                    ->group_by('payments.id');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($customer) {
                $this->db->where('('.$this->db->dbprefix("sales").'.customer_id = '.$customer.' OR '.$this->db->dbprefix("sale_orders").'.customer_id = '.$customer.')');
            }
            if ($biller) {
                $this->db->where('('.$this->db->dbprefix("sales").'.biller_id = '.$biller.' OR '.$this->db->dbprefix("sale_orders").'.biller_id = '.$biller.')');
            }
            if ($project) {
                $this->db->where('('.$this->db->dbprefix("sales").'.project_id = '.$project.' OR '.$this->db->dbprefix("sale_orders").'.project_id = '.$project.')');
            }
            if ($subproject) {
                $this->datatables->where('products.project_group_id', $subproject);
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($category) {
                $this->db->where('products.category_id', $category);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($start_date) {
                $this->db->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('payments.date <=', $end_date);
            }


            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
                $warehouse_ids = str_replace(']',')',$warehouse_ids);
                $this->db->where('('.$this->db->dbprefix("sales").'.warehouse_id IN '.$warehouse_ids.' OR '.$this->db->dbprefix("sale_orders").'.warehouse_id IN '.$warehouse_ids.')');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('('.$this->db->dbprefix("sales").'.biller_id = '.$this->session->userdata('biller_id').' OR '.$this->db->dbprefix("sale_orders").'.biller_id = '.$this->session->userdata('biller_id').')');
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('payments.created_by', $this->session->userdata('user_id'));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sale_payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sale_date'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('type'));
                $row = 2;
                $total = 0;
                $discount = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->hrld($data_row->sale_date));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid_by);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->amount));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, lang($data_row->type));
                    $total += $data_row->amount;
                    $discount += $data_row->discount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("H" . $row . ":I" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $discount);
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
        
                $filename = 'sale_payments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                        DATE_FORMAT(".$this->db->dbprefix('payments').".date, '%Y-%m-%d %T') as date,
                        payments.reference_no as payment_ref, 
                        IFNULL(".$this->db->dbprefix("sales").".reference_no,".$this->db->dbprefix("sale_orders").".reference_no) as sale_ref, 
                        DATE_FORMAT(IFNULL(".$this->db->dbprefix("sales").".date,".$this->db->dbprefix("sale_orders").".date), '%Y-%m-%d %T') as sale_date, 
                        IFNULL(".$this->db->dbprefix("sales").".customer,".$this->db->dbprefix("sale_orders").".customer) as customer, 
                       sales.description as description,
                        CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
                        IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                        (IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) as amount,
                        (IFNULL(".$this->db->dbprefix('payments').".discount,0)) as discount, 
                        payments.attachment,
                        IF(".$this->db->dbprefix('payments').".sale_order_id > 0,'deposited',".$this->db->dbprefix('payments').".type) as type,
                        payments.id as id
                    ")
                    ->from('payments')
                    ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                    ->join('sales', 'payments.sale_id=sales.id', 'left')
                    ->join('sale_items', 'sales.id=sale_items.sale_id', 'left')
                    ->join('products', 'products.id=sale_items.product_id', 'left')
                    ->join('sale_orders', 'payments.sale_order_id=sale_orders.id', 'left')
                    ->join('users', 'users.id=payments.created_by', 'left')
                    ->where('(payments.sale_id > 0 OR payments.sale_order_id > 0)')
                    ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($customer) {
                $this->datatables->where('('.$this->db->dbprefix("sales").'.customer_id = '.$customer.' OR '.$this->db->dbprefix("sale_orders").'.customer_id = '.$customer.')');
            }
            if ($biller) {
                $this->datatables->where('('.$this->db->dbprefix("sales").'.biller_id = '.$biller.' OR '.$this->db->dbprefix("sale_orders").'.biller_id = '.$biller.')');
            }
            if ($project) {
                $this->datatables->where('('.$this->db->dbprefix("sales").'.project_id = '.$project.' OR '.$this->db->dbprefix("sale_orders").'.project_id = '.$project.')');
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($category) {
                $this->datatables->where('products.category_id', $category);
            }

            if ($subproject) {
                $this->datatables->where('products.project_group_id', $subproject);
            }

            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
                $warehouse_ids = str_replace(']',')',$warehouse_ids);
                $this->datatables->where('('.$this->db->dbprefix("sales").'.warehouse_id IN '.$warehouse_ids.' OR '.$this->db->dbprefix("sale_orders").'.warehouse_id IN '.$warehouse_ids.')');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('('.$this->db->dbprefix("sales").'.biller_id = '.$this->session->userdata('biller_id').' OR '.$this->db->dbprefix("sale_orders").'.biller_id = '.$this->session->userdata('biller_id').')');
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('payments.created_by', $this->session->userdata('user_id'));
            }
            echo $this->datatables->generate();
        }
    }

    public function product_sale_by_customer_report()
	{	
		$this->cus->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
		$this->data['salesmans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_sale_by_customer_report')));
        $meta = array('page_title' => lang('product_sale_by_customer_report'), 'bc' => $bc);
        $this->core_page('reports/product_sale_by_customer_report', $meta, $this->data);
	}
    function purchase_payments_report()
    {
        $this->cus->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('purchase_payments_report')));
        $meta = array('page_title' => lang('purchase_payments_report'), 'bc' => $bc);
        $this->core_page('reports/purchase_payments_report', $meta, $this->data);
    }

    function getPurchasePaymentsReport($pdf = NULL, $xls = NULL)
    {
        $this->cus->checkPermissions('purchase_payments_report', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
        $purchase_ref = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : NULL;
        $start_date = $this->input->get('start_date') ? $this->cus->fld($this->input->get('start_date')) : NULL;
        $end_date = $this->input->get('end_date') ? $this->cus->fld($this->input->get('end_date')) : NULL;
        if ($xls) {
            $this->db->select("
                        DATE_FORMAT(".$this->db->dbprefix('payments').".date, '%Y-%m-%d %T') as date, 
                        payments.reference_no as payment_ref, 
                        IFNULL(".$this->db->dbprefix('purchases').".reference_no,IFNULL(".$this->db->dbprefix('expenses').".reference,".$this->db->dbprefix('purchase_orders').".reference_no)) as purchase_ref, 
                        DATE_FORMAT(IFNULL(".$this->db->dbprefix('purchases').".date,IFNULL(".$this->db->dbprefix('expenses').".date,".$this->db->dbprefix('purchase_orders').".date)), '%Y-%m-%d %T') as purchase_date, 
                        IFNULL(".$this->db->dbprefix('purchases').".supplier,IFNULL(".$this->db->dbprefix('expenses').".supplier,".$this->db->dbprefix('purchase_orders').".supplier)) as supplier, 
                        CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
                        IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                        IFNULL(".$this->db->dbprefix('payments').".amount,0) as amount,
                        IFNULL(".$this->db->dbprefix('payments').".discount,0) as discount, 
                        payments.attachment,
                        IF(".$this->db->dbprefix('expenses').".id > 0,'expense', IF(".$this->db->dbprefix('purchase_orders').".id > 0, 'deposited', ".$this->db->dbprefix('payments').".type)) as type,
                        payments.id as id
                    ")
                    ->from('payments')
                    ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                    ->join('purchases', 'payments.purchase_id = purchases.id', 'left')
                    ->join('expenses', 'payments.expense_id = expenses.id', 'left')
                    ->join('purchase_orders', 'payments.purchase_order_id = purchase_orders.id', 'left')
                    ->join('users', 'users.id=payments.created_by', 'left')
                    ->where('(payments.purchase_id > 0 OR payments.expense_id > 0 OR payments.purchase_order_id > 0)')
                    ->where('IFNULL('.$this->db->dbprefix("payments").'.amount,0) !=',0)
                    ->group_by('payments.id');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($supplier) {
                $this->db->where('('.$this->db->dbprefix("purchases").'.supplier_id = '.$supplier.' OR '.$this->db->dbprefix("expenses").'.supplier_id = '.$supplier.' OR '.$this->db->dbprefix("purchase_orders").'.supplier_id = '.$supplier.')');
            }
            if ($biller) {
                $this->db->where('('.$this->db->dbprefix("purchases").'.biller_id = '.$biller.' OR '.$this->db->dbprefix("expenses").'.biller_id = '.$biller.' OR '.$this->db->dbprefix("purchase_orders").'.biller_id = '.$biller.')');
            }
            if ($project) {
                $this->db->where('purchases.project_id', $project);
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
                $warehouse_ids = str_replace(']',')',$warehouse_ids);
                $this->db->where('('.$this->db->dbprefix("purchases").'.warehouse_id IN '.$warehouse_ids.' OR '.$this->db->dbprefix("expenses").'.warehouse_id IN '.$warehouse_ids.' OR '.$this->db->dbprefix("purchase_orders").'.warehouse_id IN '.$warehouse_ids.')');
            }
            
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('('.$this->db->dbprefix("purchases").'.biller_id = '.$this->session->userdata('biller_id').' OR '.$this->db->dbprefix("expenses").'.biller_id = '.$this->session->userdata('biller_id').' OR '.$this->db->dbprefix("purchase_orders").'.biller_id = '.$this->session->userdata('biller_id').')');
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('payments.created_by', $this->session->userdata('user_id'));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchase_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_date'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('type'));
                $row = 2;
                $total = 0;
                $discount = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->cus->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->cus->hrld($data_row->purchase_date));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid_by);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->cus->formatDecimal($data_row->amount));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->cus->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, lang($data_row->type));
                    $total += $data_row->amount;
                    $discount += $data_row->discount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("H" . $row . ":I" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $discount);
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
        
                $filename = 'purchase_payments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                        DATE_FORMAT(".$this->db->dbprefix('payments').".date, '%Y-%m-%d %T') as date, 
                        payments.reference_no as payment_ref, 
                        IFNULL(".$this->db->dbprefix('purchases').".reference_no,IFNULL(".$this->db->dbprefix('expenses').".reference,".$this->db->dbprefix('purchase_orders').".reference_no)) as purchase_ref, 
                        DATE_FORMAT(IFNULL(".$this->db->dbprefix('purchases').".date,IFNULL(".$this->db->dbprefix('expenses').".date,".$this->db->dbprefix('purchase_orders').".date)), '%Y-%m-%d %T') as purchase_date, 
                        IFNULL(".$this->db->dbprefix('purchases').".supplier,IFNULL(".$this->db->dbprefix('expenses').".supplier,".$this->db->dbprefix('purchase_orders').".supplier)) as supplier, 
                        CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
                        IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                        IFNULL(".$this->db->dbprefix('payments').".amount,0) as amount,
                        IFNULL(".$this->db->dbprefix('payments').".discount,0) as discount, 
                        payments.attachment,
                        IF(".$this->db->dbprefix('expenses').".id > 0,'expense', IF(".$this->db->dbprefix('purchase_orders').".id > 0, 'deposited', ".$this->db->dbprefix('payments').".type)) as type,
                        payments.id as id
                    ")
                    ->from('payments')
                    ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                    ->join('purchases', 'payments.purchase_id = purchases.id', 'left')
                    ->join('expenses', 'payments.expense_id = expenses.id', 'left')
                    ->join('purchase_orders', 'payments.purchase_order_id = purchase_orders.id', 'left')
                    ->join('users', 'users.id=payments.created_by', 'left')
                    ->where('(payments.purchase_id > 0 OR payments.expense_id > 0 OR payments.purchase_order_id > 0)')
                    ->where('IFNULL('.$this->db->dbprefix("payments").'.amount,0) !=',0)
                    ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($supplier) {
                $this->datatables->where('('.$this->db->dbprefix("purchases").'.supplier_id = '.$supplier.' OR '.$this->db->dbprefix("expenses").'.supplier_id = '.$supplier.' OR '.$this->db->dbprefix("purchase_orders").'.supplier_id = '.$supplier.')');
            }
            if ($biller) {
                $this->datatables->where('('.$this->db->dbprefix("purchases").'.biller_id = '.$biller.' OR '.$this->db->dbprefix("expenses").'.biller_id = '.$biller.' OR '.$this->db->dbprefix("purchase_orders").'.biller_id = '.$biller.')');
            }
            if ($project) {
                $this->datatables->where('purchases.project_id', $project);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
                $warehouse_ids = str_replace(']',')',$warehouse_ids);
                $this->datatables->where('('.$this->db->dbprefix("purchases").'.warehouse_id IN '.$warehouse_ids.' OR '.$this->db->dbprefix("expenses").'.warehouse_id IN '.$warehouse_ids.' OR '.$this->db->dbprefix("purchase_orders").'.warehouse_id IN '.$warehouse_ids.')');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('('.$this->db->dbprefix("purchases").'.biller_id = '.$this->session->userdata('biller_id').' OR '.$this->db->dbprefix("expenses").'.biller_id = '.$this->session->userdata('biller_id').' OR '.$this->db->dbprefix("purchase_orders").'.biller_id = '.$this->session->userdata('biller_id').')');
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('payments.created_by', $this->session->userdata('user_id'));
            }
            echo $this->datatables->generate();
        }
    }




}
